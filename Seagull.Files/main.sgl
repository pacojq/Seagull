

/*
//cool stuff we could try to achieve

#define COMPILER_MACRO

#assert false // assert in compile time maybe

*/

// Comment

/* Block comment */

/* /* Nested Block comment */ */

/* Multi
    /* Line
        /* Block comment */
    */
*/



delegate arithmetic : (a : int, b : int) -> int;


struct Person {
    name : string;
    age : int;
}

struct GenericPerson<T> {
    name : string;
    age : int;
    field : T; // ????
}

/*
struct Student : Person { // Inheritance?
    course : string;
}
*/

int enum INTS
{
    TYPE_A = 0,
    TYPE_B = 1,
    TYPE_C = 2
}

string enum STRINGS
{
    TYPE_A = "0",
    TYPE_B = "1",
    TYPE_C = "2"
}



[int -> int] square; 

void main() {

    square = (int i) -> { return i*i; }

    Person p1;
    Person p2 = new Person;
    p1 = new Person {
        name = "Mike";
        age = 20;
    }
    
    delay print("Deleting p1"); // delay takes a statement and executes it at the very end of the block
    delay delete p1;

    delete p2; // Destructor

	a := square(2);
	b : int = square(a);

    

	[int, int -> int] mult = (int a, int b) -> {
		return a * b;
	}

	arithmetic div = (int a, int b) ->{
		return a / b;
	}

	let sub = (int a, int b) -> {
		return a - b;
	}

	let sum = (int a, int b) -> a + b;

	arithmetic sum2 = (a, b) -> a + b;
	
	
	
	
	
	int i = 0;
	while (1) {
	
	    delay print(i);
	
	    if (i == 0) {
	        i ++;
	        continue;
	    }
	    else {
            i += 2;
            i = sum(i, square(i));
            
            if (i == 13)
                return;
                
            if (i > 300)
                break;
	    }
	    // delay print(i) will be called here
	}
	
	
	int[10] numbers;
	
	// Dynamic arrays?
	// int[] results: int[];
	
	for (n in 0..count-1) {
	    print(numbers[n]);
	}
	
	for (i in numbers) {
	    print(i);
	}
	

}

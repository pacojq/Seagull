//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar/SeagullParser.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419



    using System.Collections.Generic;
    
	using Seagull.Language.AST;
	using Seagull.Language.Grammar;
	
	using Seagull.Language.Semantics.Symbols;
	
	using Seagull.Language.AST.Expressions;
	using Seagull.Language.AST.Expressions.Binary;
	using Seagull.Language.AST.Expressions.Literals;
	
	using Seagull.Language.AST.Statements;
	using Seagull.Language.AST.Statements.Definitions;
	using Seagull.Language.AST.Statements.Definitions.Namespaces;
	
	using Seagull.Language.AST.Types;
	using Seagull.Language.AST.Types.Namespaces;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class SeagullParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SHARP=1, VOID=2, INT=3, CHAR=4, DOUBLE=5, STRING=6, STRUCT=7, LONG=8, 
		BYTE=9, ENUM=10, DELEGATE=11, NULL=12, PTR=13, TRUE=14, FALSE=15, IF=16, 
		ELSE=17, WHILE=18, FOR=19, IN=20, SWITCH=21, CASE=22, BREAK=23, CONTINUE=24, 
		NEW=25, DELETE=26, RETURN=27, PRINT=28, READ=29, ASSERT=30, DELAY=31, 
		PUBLIC=32, PRIVATE=33, LOAD=34, IMPORT=35, NAMESPACE=36, OWNED=37, IS=38, 
		DEFAULT=39, DOT=40, COMMA=41, COL=42, SEMI_COL=43, ASSIGN=44, STAR=45, 
		SLASH=46, PERCENT=47, ARROW=48, QUESTION=49, PLUS=50, MINUS=51, PLUS_PLUS=52, 
		MINUS_MINUS=53, ASSIGN_MUL=54, ASSIGN_DIV=55, ASSIGN_MOD=56, ASSIGN_SUM=57, 
		ASSIGN_SUB=58, NOT=59, AND=60, OR=61, L_BRACKET=62, R_BRACKET=63, L_PAR=64, 
		R_PAR=65, L_CURL=66, R_CURL=67, BIT_AND=68, BIT_OR=69, BIT_XOR=70, BIT_NOT=71, 
		BIT_RIGHT=72, BIT_LEFT=73, EQUAL=74, NOT_EQUAL=75, LESS_THAN=76, GREATER_THAN=77, 
		LESS_EQ_THAN=78, GREATER_EQ_THAN=79, ID=80, INT_CONSTANT=81, REAL_CONSTANT=82, 
		CHAR_CONSTANT=83, STRING_CONSTANT=84, BOOLEAN_CONSTANT=85, SL_COMMENT=86, 
		ML_COMMENT=87, BLANKS=88, DIR_DEFINE=89, DIR_IF=90, DIR_ELIF=91, DIR_ELSE=92, 
		DIR_WHITESPACE=93, DIR_ML_COMMENT=94, DIR_NEWLINE=95;
	public const int
		RULE_program = 0, RULE_load = 1, RULE_imp = 2, RULE_type = 3, RULE_userDefinedType = 4, 
		RULE_namespaceType = 5, RULE_functionType = 6, RULE_parameters = 7, RULE_structType = 8, 
		RULE_enumType = 9, RULE_enumElement = 10, RULE_primitive = 11, RULE_voidType = 12, 
		RULE_protectionLevel = 13, RULE_definition = 14, RULE_namespaceDef = 15, 
		RULE_variableDef = 16, RULE_fuctionDef = 17, RULE_structDef = 18, RULE_enumDef = 19, 
		RULE_delegate = 20, RULE_funcInvocation = 21, RULE_fnBlock = 22, RULE_fnBlockContent = 23, 
		RULE_statement = 24, RULE_readPrint = 25, RULE_expression = 26, RULE_variable = 27, 
		RULE_literal = 28;
	public static readonly string[] ruleNames = {
		"program", "load", "imp", "type", "userDefinedType", "namespaceType", 
		"functionType", "parameters", "structType", "enumType", "enumElement", 
		"primitive", "voidType", "protectionLevel", "definition", "namespaceDef", 
		"variableDef", "fuctionDef", "structDef", "enumDef", "delegate", "funcInvocation", 
		"fnBlock", "fnBlockContent", "statement", "readPrint", "expression", "variable", 
		"literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'#'", "'void'", "'int'", "'char'", "'double'", "'string'", "'struct'", 
		"'long'", "'byte'", "'enum'", "'delegate'", "'null'", "'ptr'", "'true'", 
		"'false'", null, null, "'while'", "'for'", "'in'", "'switch'", "'case'", 
		"'break'", "'continue'", "'new'", "'delete'", "'return'", "'print'", "'read'", 
		"'assert'", "'delay'", "'public'", "'private'", "'load'", "'import'", 
		"'namespace'", "'owned'", "'is'", "'default'", "'.'", "','", "':'", "';'", 
		"'='", "'*'", "'/'", "'%'", "'->'", "'?'", "'+'", "'-'", "'++'", "'--'", 
		"'*='", "'/='", "'%='", "'+='", "'-='", "'!'", "'&&'", "'||'", "'['", 
		"']'", "'('", "')'", "'{'", "'}'", "'&'", "'|'", "'^'", "'~'", "'>>'", 
		"'<<'", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", null, null, null, 
		null, null, null, null, null, null, "'define'", null, "'elif'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SHARP", "VOID", "INT", "CHAR", "DOUBLE", "STRING", "STRUCT", "LONG", 
		"BYTE", "ENUM", "DELEGATE", "NULL", "PTR", "TRUE", "FALSE", "IF", "ELSE", 
		"WHILE", "FOR", "IN", "SWITCH", "CASE", "BREAK", "CONTINUE", "NEW", "DELETE", 
		"RETURN", "PRINT", "READ", "ASSERT", "DELAY", "PUBLIC", "PRIVATE", "LOAD", 
		"IMPORT", "NAMESPACE", "OWNED", "IS", "DEFAULT", "DOT", "COMMA", "COL", 
		"SEMI_COL", "ASSIGN", "STAR", "SLASH", "PERCENT", "ARROW", "QUESTION", 
		"PLUS", "MINUS", "PLUS_PLUS", "MINUS_MINUS", "ASSIGN_MUL", "ASSIGN_DIV", 
		"ASSIGN_MOD", "ASSIGN_SUM", "ASSIGN_SUB", "NOT", "AND", "OR", "L_BRACKET", 
		"R_BRACKET", "L_PAR", "R_PAR", "L_CURL", "R_CURL", "BIT_AND", "BIT_OR", 
		"BIT_XOR", "BIT_NOT", "BIT_RIGHT", "BIT_LEFT", "EQUAL", "NOT_EQUAL", "LESS_THAN", 
		"GREATER_THAN", "LESS_EQ_THAN", "GREATER_EQ_THAN", "ID", "INT_CONSTANT", 
		"REAL_CONSTANT", "CHAR_CONSTANT", "STRING_CONSTANT", "BOOLEAN_CONSTANT", 
		"SL_COMMENT", "ML_COMMENT", "BLANKS", "DIR_DEFINE", "DIR_IF", "DIR_ELIF", 
		"DIR_ELSE", "DIR_WHITESPACE", "DIR_ML_COMMENT", "DIR_NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SeagullParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SeagullParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SeagullParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SeagullParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public Program Ast;
		public List<string> Loads = new List<string>();
		public List<string> Imports = new List<string>();
		public List<IDefinition> Def = new List<IDefinition>();
		public LoadContext l;
		public ImpContext i;
		public DefinitionContext d;
		public ITerminalNode Eof() { return GetToken(SeagullParser.Eof, 0); }
		public LoadContext[] load() {
			return GetRuleContexts<LoadContext>();
		}
		public LoadContext load(int i) {
			return GetRuleContext<LoadContext>(i);
		}
		public ImpContext[] imp() {
			return GetRuleContexts<ImpContext>();
		}
		public ImpContext imp(int i) {
			return GetRuleContext<ImpContext>(i);
		}
		public DefinitionContext[] definition() {
			return GetRuleContexts<DefinitionContext>();
		}
		public DefinitionContext definition(int i) {
			return GetRuleContext<DefinitionContext>(i);
		}
		public ProtectionLevelContext[] protectionLevel() {
			return GetRuleContexts<ProtectionLevelContext>();
		}
		public ProtectionLevelContext protectionLevel(int i) {
			return GetRuleContext<ProtectionLevelContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LOAD) {
				{
				{
				State = 58; _localctx.l = load();
				 _localctx.Loads.Add(_localctx.l.File); 
				}
				}
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IMPORT) {
				{
				{
				State = 66; _localctx.i = imp();
				 _localctx.Imports.Add(_localctx.i.Namespace); 
				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRUCT) | (1L << ENUM) | (1L << PUBLIC) | (1L << PRIVATE) | (1L << NAMESPACE))) != 0) || _la==ID) {
				{
				{
				State = 75;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PUBLIC || _la==PRIVATE) {
					{
					State = 74; protectionLevel();
					}
				}

				State = 77; _localctx.d = definition();
				 _localctx.Def.AddRange(_localctx.d.Ast); 
				}
				}
				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 85; Match(Eof);
			 _localctx.Ast =  new Program(0, 0, _localctx.Loads, _localctx.Imports, _localctx.Def); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadContext : ParserRuleContext {
		public string File;
		public IToken p;
		public ITerminalNode LOAD() { return GetToken(SeagullParser.LOAD, 0); }
		public ITerminalNode STRING_CONSTANT() { return GetToken(SeagullParser.STRING_CONSTANT, 0); }
		public LoadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_load; } }
	}

	[RuleVersion(0)]
	public LoadContext load() {
		LoadContext _localctx = new LoadContext(Context, State);
		EnterRule(_localctx, 2, RULE_load);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88; Match(LOAD);
			State = 89; _localctx.p = Match(STRING_CONSTANT);
			 _localctx.File =  (_localctx.p!=null?_localctx.p.Text:null); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImpContext : ParserRuleContext {
		public string Namespace;
		public IToken ns1;
		public IToken ns2;
		public ITerminalNode IMPORT() { return GetToken(SeagullParser.IMPORT, 0); }
		public ITerminalNode SEMI_COL() { return GetToken(SeagullParser.SEMI_COL, 0); }
		public ITerminalNode[] ID() { return GetTokens(SeagullParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(SeagullParser.ID, i);
		}
		public ITerminalNode[] DOT() { return GetTokens(SeagullParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(SeagullParser.DOT, i);
		}
		public ImpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imp; } }
	}

	[RuleVersion(0)]
	public ImpContext imp() {
		ImpContext _localctx = new ImpContext(Context, State);
		EnterRule(_localctx, 4, RULE_imp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92; Match(IMPORT);
			State = 93; _localctx.ns1 = Match(ID);
			 _localctx.Namespace =  _localctx.ns1.GetText(); 
			State = 100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 95; Match(DOT);
				State = 96; _localctx.ns2 = Match(ID);
				 _localctx.Namespace += "." + _localctx.ns2.GetText(); 
				}
				}
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 103; Match(SEMI_COL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public IType Ast;
		public TypeContext t;
		public PrimitiveContext _primitive;
		public FunctionTypeContext _functionType;
		public StructTypeContext _structType;
		public UserDefinedTypeContext _userDefinedType;
		public IToken i;
		public IToken i2;
		public PrimitiveContext primitive() {
			return GetRuleContext<PrimitiveContext>(0);
		}
		public FunctionTypeContext functionType() {
			return GetRuleContext<FunctionTypeContext>(0);
		}
		public StructTypeContext structType() {
			return GetRuleContext<StructTypeContext>(0);
		}
		public UserDefinedTypeContext userDefinedType() {
			return GetRuleContext<UserDefinedTypeContext>(0);
		}
		public ITerminalNode[] L_BRACKET() { return GetTokens(SeagullParser.L_BRACKET); }
		public ITerminalNode L_BRACKET(int i) {
			return GetToken(SeagullParser.L_BRACKET, i);
		}
		public ITerminalNode[] R_BRACKET() { return GetTokens(SeagullParser.R_BRACKET); }
		public ITerminalNode R_BRACKET(int i) {
			return GetToken(SeagullParser.R_BRACKET, i);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode[] INT_CONSTANT() { return GetTokens(SeagullParser.INT_CONSTANT); }
		public ITerminalNode INT_CONSTANT(int i) {
			return GetToken(SeagullParser.INT_CONSTANT, i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	}

	[RuleVersion(0)]
	public TypeContext type() {
		return type(0);
	}

	private TypeContext type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeContext _localctx = new TypeContext(Context, _parentState);
		TypeContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_type, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
			case CHAR:
			case DOUBLE:
			case STRING:
			case LONG:
			case BYTE:
			case PTR:
				{
				State = 106; _localctx._primitive = primitive();
				 _localctx.Ast =  _localctx._primitive.Ast; 
				}
				break;
			case L_PAR:
				{
				State = 109; _localctx._functionType = functionType();
				 _localctx.Ast =  _localctx._functionType.Ast; 
				}
				break;
			case L_CURL:
				{
				State = 112; _localctx._structType = structType();
				 _localctx.Ast =  _localctx._structType.Ast; 
				}
				break;
			case ID:
				{
				State = 115; _localctx._userDefinedType = userDefinedType();
				 _localctx.Ast =  _localctx._userDefinedType.Ast; 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 136;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypeContext(_parentctx, _parentState);
					_localctx.t = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_type);
					State = 120;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 121; Match(L_BRACKET);
					State = 122; _localctx.i = Match(INT_CONSTANT);
					State = 123; Match(R_BRACKET);
					 _localctx.Ast =  ArrayType.BuildArray(int.Parse((_localctx.i!=null?_localctx.i.Text:null)), _localctx.t.Ast); 
					State = 131;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 125; Match(L_BRACKET);
							State = 126; _localctx.i2 = Match(INT_CONSTANT);
							State = 127; Match(R_BRACKET);
							 _localctx.Ast =  ArrayType.BuildArray( int.Parse((_localctx.i2!=null?_localctx.i2.Text:null)), _localctx.Ast); 
							}
							} 
						}
						State = 133;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
					}
					}
					} 
				}
				State = 138;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UserDefinedTypeContext : ParserRuleContext {
		public IType Ast;
		public IToken _ID;
		public NamespaceTypeContext t;
		public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
		public ITerminalNode DOT() { return GetToken(SeagullParser.DOT, 0); }
		public NamespaceTypeContext namespaceType() {
			return GetRuleContext<NamespaceTypeContext>(0);
		}
		public UserDefinedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userDefinedType; } }
	}

	[RuleVersion(0)]
	public UserDefinedTypeContext userDefinedType() {
		UserDefinedTypeContext _localctx = new UserDefinedTypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_userDefinedType);
		try {
			State = 146;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 139; _localctx._ID = Match(ID);
				 _localctx.Ast =  new UnknownType(_localctx._ID.GetLine(), _localctx._ID.GetCol(), _localctx._ID.GetText()); 
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 141; _localctx.t = namespaceType(0);
				State = 142; Match(DOT);
				State = 143; _localctx._ID = Match(ID);
				 _localctx.Ast =  new UnknownType(_localctx._ID.GetLine(), _localctx._ID.GetCol(), _localctx._ID.GetText(), _localctx.t.Ast); 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceTypeContext : ParserRuleContext {
		public INamespaceType Ast;
		public NamespaceTypeContext t;
		public IToken _ID;
		public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
		public ITerminalNode DOT() { return GetToken(SeagullParser.DOT, 0); }
		public NamespaceTypeContext namespaceType() {
			return GetRuleContext<NamespaceTypeContext>(0);
		}
		public NamespaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceType; } }
	}

	[RuleVersion(0)]
	public NamespaceTypeContext namespaceType() {
		return namespaceType(0);
	}

	private NamespaceTypeContext namespaceType(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NamespaceTypeContext _localctx = new NamespaceTypeContext(Context, _parentState);
		NamespaceTypeContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_namespaceType, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 149; _localctx._ID = Match(ID);
			 _localctx.Ast =  NamespaceManager.Instance.AddType(_localctx._ID.GetLine(), _localctx._ID.GetCol(), _localctx._ID.GetText(), null); 
			}
			Context.Stop = TokenStream.LT(-1);
			State = 158;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NamespaceTypeContext(_parentctx, _parentState);
					_localctx.t = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_namespaceType);
					State = 152;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 153; Match(DOT);
					State = 154; _localctx._ID = Match(ID);
					 _localctx.Ast =  NamespaceManager.Instance.AddType(_localctx._ID.GetLine(), _localctx._ID.GetCol(), _localctx._ID.GetText(), _localctx.t.Ast); 
					}
					} 
				}
				State = 160;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FunctionTypeContext : ParserRuleContext {
		public FunctionType Ast;
		public List<VariableDefinition> Params = new List<VariableDefinition>();
		public IType Rt;
		public ParametersContext p;
		public IToken par;
		public TypeContext t;
		public VoidTypeContext vt;
		public ITerminalNode L_PAR() { return GetToken(SeagullParser.L_PAR, 0); }
		public ITerminalNode R_PAR() { return GetToken(SeagullParser.R_PAR, 0); }
		public ITerminalNode ARROW() { return GetToken(SeagullParser.ARROW, 0); }
		public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public VoidTypeContext voidType() {
			return GetRuleContext<VoidTypeContext>(0);
		}
		public FunctionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionType; } }
	}

	[RuleVersion(0)]
	public FunctionTypeContext functionType() {
		FunctionTypeContext _localctx = new FunctionTypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_functionType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161; Match(L_PAR);
			State = 165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 162; _localctx.p = parameters();
				 _localctx.Params =  _localctx.p.Ast;
				}
			}

			State = 167; _localctx.par = Match(R_PAR);
			 _localctx.Rt = new VoidType(_localctx.par.GetLine(), _localctx.par.GetCol()); 
			State = 178;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 169; Match(ARROW);
				State = 176;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INT:
				case CHAR:
				case DOUBLE:
				case STRING:
				case LONG:
				case BYTE:
				case PTR:
				case L_PAR:
				case L_CURL:
				case ID:
					{
					{
					State = 170; _localctx.t = type(0);
					 _localctx.Rt = _localctx.t.Ast; 
					}
					}
					break;
				case VOID:
					{
					{
					State = 173; _localctx.vt = voidType();
					 _localctx.Rt = _localctx.vt.Ast; 
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			 _localctx.Ast =  new FunctionType(_localctx.Rt, _localctx.Params); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		public List<VariableDefinition> Ast = new List<VariableDefinition>();
		public IToken id1;
		public TypeContext t1;
		public IToken id2;
		public TypeContext t2;
		public LiteralContext l;
		public ITerminalNode[] COL() { return GetTokens(SeagullParser.COL); }
		public ITerminalNode COL(int i) {
			return GetToken(SeagullParser.COL, i);
		}
		public ITerminalNode[] ID() { return GetTokens(SeagullParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(SeagullParser.ID, i);
		}
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SeagullParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SeagullParser.COMMA, i);
		}
		public ITerminalNode[] ASSIGN() { return GetTokens(SeagullParser.ASSIGN); }
		public ITerminalNode ASSIGN(int i) {
			return GetToken(SeagullParser.ASSIGN, i);
		}
		public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 14, RULE_parameters);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 182; _localctx.id1 = Match(ID);
			State = 183; Match(COL);
			State = 184; _localctx.t1 = type(0);
			 _localctx.Ast.Add(new VariableDefinition(_localctx.id1.GetLine(), _localctx.id1.GetCol(), _localctx.id1.GetText(), _localctx.t1.Ast, null)); 
			State = 194;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 186; Match(COMMA);
					State = 187; _localctx.id2 = Match(ID);
					State = 188; Match(COL);
					State = 189; _localctx.t2 = type(0);
					 _localctx.Ast.Add(new VariableDefinition(_localctx.id2.GetLine(), _localctx.id2.GetCol(), _localctx.id2.GetText(), _localctx.t2.Ast, null)); 
					}
					} 
				}
				State = 196;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 197; Match(COMMA);
				State = 198; _localctx.id2 = Match(ID);
				State = 199; Match(COL);
				State = 200; _localctx.t2 = type(0);
				State = 201; Match(ASSIGN);
				State = 202; _localctx.l = literal();
				 _localctx.Ast.Add(new VariableDefinition(_localctx.id2.GetLine(), _localctx.id2.GetCol(), _localctx.id2.GetText(), _localctx.t2.Ast, _localctx.l.Ast)); 
				}
				}
				State = 209;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructTypeContext : ParserRuleContext {
		public StructType Ast;
		public List<VariableDefinition> Fields = new List<VariableDefinition>();
		public IToken c;
		public VariableDefContext f;
		public ITerminalNode R_CURL() { return GetToken(SeagullParser.R_CURL, 0); }
		public ITerminalNode L_CURL() { return GetToken(SeagullParser.L_CURL, 0); }
		public VariableDefContext[] variableDef() {
			return GetRuleContexts<VariableDefContext>();
		}
		public VariableDefContext variableDef(int i) {
			return GetRuleContext<VariableDefContext>(i);
		}
		public ProtectionLevelContext[] protectionLevel() {
			return GetRuleContexts<ProtectionLevelContext>();
		}
		public ProtectionLevelContext protectionLevel(int i) {
			return GetRuleContext<ProtectionLevelContext>(i);
		}
		public StructTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structType; } }
	}

	[RuleVersion(0)]
	public StructTypeContext structType() {
		StructTypeContext _localctx = new StructTypeContext(Context, State);
		EnterRule(_localctx, 16, RULE_structType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210; _localctx.c = Match(L_CURL);
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (PUBLIC - 32)) | (1L << (PRIVATE - 32)) | (1L << (ID - 32)))) != 0)) {
				{
				{
				State = 212;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PUBLIC || _la==PRIVATE) {
					{
					State = 211; protectionLevel();
					}
				}

				State = 214; _localctx.f = variableDef();
				 _localctx.Fields.AddRange(_localctx.f.Ast); 
				}
				}
				State = 221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 222; Match(R_CURL);
			 _localctx.Ast =  new StructType(_localctx.c.GetLine(), _localctx.c.GetCol(), _localctx.Fields); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumTypeContext : ParserRuleContext {
		public IType typeOf;
		public EnumType Ast;
		public List<EnumElementDefinition> defs = new List<EnumElementDefinition>();
		public IToken curl;
		public EnumElementContext d1;
		public EnumElementContext d2;
		public ITerminalNode R_CURL() { return GetToken(SeagullParser.R_CURL, 0); }
		public ITerminalNode L_CURL() { return GetToken(SeagullParser.L_CURL, 0); }
		public EnumElementContext[] enumElement() {
			return GetRuleContexts<EnumElementContext>();
		}
		public EnumElementContext enumElement(int i) {
			return GetRuleContext<EnumElementContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SeagullParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SeagullParser.COMMA, i);
		}
		public EnumTypeContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public EnumTypeContext(ParserRuleContext parent, int invokingState, IType typeOf)
			: base(parent, invokingState)
		{
			this.typeOf = typeOf;
		}
		public override int RuleIndex { get { return RULE_enumType; } }
	}

	[RuleVersion(0)]
	public EnumTypeContext enumType(IType typeOf) {
		EnumTypeContext _localctx = new EnumTypeContext(Context, State, typeOf);
		EnterRule(_localctx, 18, RULE_enumType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225; _localctx.curl = Match(L_CURL);
			State = 237;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 226; _localctx.d1 = enumElement(_localctx.typeOf, 0);
				 _localctx.defs.Add(_localctx.d1.Ast); 
				State = 234;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 228; Match(COMMA);
					State = 229; _localctx.d2 = enumElement(_localctx.typeOf, 0);
					 _localctx.defs.Add(_localctx.d2.Ast); 
					}
					}
					State = 236;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 239; Match(R_CURL);
			 _localctx.Ast =  new EnumType(_localctx.curl.GetLine(), _localctx.curl.GetCol(), _localctx.typeOf, _localctx.defs); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumElementContext : ParserRuleContext {
		public IType typeOf;
		public int defaultInt;
		public EnumElementDefinition Ast;
		public IToken id;
		public ExpressionContext expr;
		public ITerminalNode ASSIGN() { return GetToken(SeagullParser.ASSIGN, 0); }
		public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EnumElementContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public EnumElementContext(ParserRuleContext parent, int invokingState, IType typeOf, int defaultInt)
			: base(parent, invokingState)
		{
			this.typeOf = typeOf;
			this.defaultInt = defaultInt;
		}
		public override int RuleIndex { get { return RULE_enumElement; } }
	}

	[RuleVersion(0)]
	public EnumElementContext enumElement(IType typeOf, int defaultInt) {
		EnumElementContext _localctx = new EnumElementContext(Context, State, typeOf, defaultInt);
		EnterRule(_localctx, 20, RULE_enumElement);
		try {
			State = 249;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 242; _localctx.id = Match(ID);
				State = 243; Match(ASSIGN);
				State = 244; _localctx.expr = expression(0);
				 _localctx.Ast =  new EnumElementDefinition(_localctx.id.GetLine(), _localctx.id.GetCol(), (_localctx.id!=null?_localctx.id.Text:null), _localctx.expr.Ast, _localctx.typeOf); 
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 247; _localctx.id = Match(ID);

				            IExpression def = new IntLiteral(_localctx.id.GetLine(), _localctx.id.GetCol(), defaultInt);
				            if (!(_localctx.typeOf is IntType))
				                def = new Default(_localctx.id.GetLine(), _localctx.id.GetCol(), _localctx.typeOf);
				            _localctx.Ast =  new EnumElementDefinition(_localctx.id.GetLine(), _localctx.id.GetCol(), (_localctx.id!=null?_localctx.id.Text:null), def, _localctx.typeOf); 
				        
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveContext : ParserRuleContext {
		public IType Ast;
		public IToken ptr;
		public IToken c;
		public IToken b;
		public IToken i;
		public IToken d;
		public IToken l;
		public IToken s;
		public ITerminalNode PTR() { return GetToken(SeagullParser.PTR, 0); }
		public ITerminalNode CHAR() { return GetToken(SeagullParser.CHAR, 0); }
		public ITerminalNode BYTE() { return GetToken(SeagullParser.BYTE, 0); }
		public ITerminalNode INT() { return GetToken(SeagullParser.INT, 0); }
		public ITerminalNode DOUBLE() { return GetToken(SeagullParser.DOUBLE, 0); }
		public ITerminalNode LONG() { return GetToken(SeagullParser.LONG, 0); }
		public ITerminalNode STRING() { return GetToken(SeagullParser.STRING, 0); }
		public PrimitiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitive; } }
	}

	[RuleVersion(0)]
	public PrimitiveContext primitive() {
		PrimitiveContext _localctx = new PrimitiveContext(Context, State);
		EnterRule(_localctx, 22, RULE_primitive);
		try {
			State = 265;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PTR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 251; _localctx.ptr = Match(PTR);
				 _localctx.Ast =  new PointerType(_localctx.ptr.GetLine(), _localctx.ptr.GetCol()); 
				}
				break;
			case CHAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 253; _localctx.c = Match(CHAR);
				 _localctx.Ast =  new CharType(_localctx.c.GetLine(), _localctx.c.GetCol()); 
				}
				break;
			case BYTE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 255; _localctx.b = Match(BYTE);
				 _localctx.Ast =  new ByteType(_localctx.b.GetLine(), _localctx.b.GetCol()); 
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 257; _localctx.i = Match(INT);
				 _localctx.Ast =  new IntType(_localctx.i.GetLine(), _localctx.i.GetCol()); 
				}
				break;
			case DOUBLE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 259; _localctx.d = Match(DOUBLE);
				 _localctx.Ast =  new DoubleType(_localctx.d.GetLine(), _localctx.d.GetCol()); 
				}
				break;
			case LONG:
				EnterOuterAlt(_localctx, 6);
				{
				State = 261; _localctx.l = Match(LONG);
				 _localctx.Ast =  new LongType(_localctx.l.GetLine(), _localctx.l.GetCol()); 
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 7);
				{
				State = 263; _localctx.s = Match(STRING);
				 _localctx.Ast =  new StringType(_localctx.s.GetLine(), _localctx.s.GetCol()); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoidTypeContext : ParserRuleContext {
		public IType Ast;
		public IToken v;
		public ITerminalNode VOID() { return GetToken(SeagullParser.VOID, 0); }
		public VoidTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voidType; } }
	}

	[RuleVersion(0)]
	public VoidTypeContext voidType() {
		VoidTypeContext _localctx = new VoidTypeContext(Context, State);
		EnterRule(_localctx, 24, RULE_voidType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267; _localctx.v = Match(VOID);
			 _localctx.Ast =  new VoidType(_localctx.v.GetLine(), _localctx.v.GetCol()); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProtectionLevelContext : ParserRuleContext {
		public ITerminalNode PUBLIC() { return GetToken(SeagullParser.PUBLIC, 0); }
		public ITerminalNode PRIVATE() { return GetToken(SeagullParser.PRIVATE, 0); }
		public ProtectionLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_protectionLevel; } }
	}

	[RuleVersion(0)]
	public ProtectionLevelContext protectionLevel() {
		ProtectionLevelContext _localctx = new ProtectionLevelContext(Context, State);
		EnterRule(_localctx, 26, RULE_protectionLevel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270;
			_la = TokenStream.LA(1);
			if ( !(_la==PUBLIC || _la==PRIVATE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		public List<IDefinition> Ast = new List<IDefinition>();
		public NamespaceDefContext _namespaceDef;
		public VariableDefContext _variableDef;
		public FuctionDefContext _fuctionDef;
		public StructDefContext _structDef;
		public EnumDefContext _enumDef;
		public NamespaceDefContext namespaceDef() {
			return GetRuleContext<NamespaceDefContext>(0);
		}
		public VariableDefContext variableDef() {
			return GetRuleContext<VariableDefContext>(0);
		}
		public FuctionDefContext fuctionDef() {
			return GetRuleContext<FuctionDefContext>(0);
		}
		public StructDefContext structDef() {
			return GetRuleContext<StructDefContext>(0);
		}
		public EnumDefContext enumDef() {
			return GetRuleContext<EnumDefContext>(0);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 28, RULE_definition);
		try {
			State = 287;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 272; _localctx._namespaceDef = namespaceDef();
				 _localctx.Ast.Add(_localctx._namespaceDef.Ast); 
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 275; _localctx._variableDef = variableDef();
				 _localctx.Ast.AddRange(_localctx._variableDef.Ast); 
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 278; _localctx._fuctionDef = fuctionDef();
				 _localctx.Ast.Add(_localctx._fuctionDef.Ast); 
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 281; _localctx._structDef = structDef();
				 _localctx.Ast.Add(_localctx._structDef.Ast); 
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 284; _localctx._enumDef = enumDef();
				 _localctx.Ast.Add(_localctx._enumDef.Ast); 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDefContext : ParserRuleContext {
		public NamespaceDefinition Ast;
		public IToken n;
		public NamespaceTypeContext t;
		public DefinitionContext d;
		public ITerminalNode L_CURL() { return GetToken(SeagullParser.L_CURL, 0); }
		public ITerminalNode R_CURL() { return GetToken(SeagullParser.R_CURL, 0); }
		public ITerminalNode NAMESPACE() { return GetToken(SeagullParser.NAMESPACE, 0); }
		public NamespaceTypeContext namespaceType() {
			return GetRuleContext<NamespaceTypeContext>(0);
		}
		public DefinitionContext[] definition() {
			return GetRuleContexts<DefinitionContext>();
		}
		public DefinitionContext definition(int i) {
			return GetRuleContext<DefinitionContext>(i);
		}
		public NamespaceDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDef; } }
	}

	[RuleVersion(0)]
	public NamespaceDefContext namespaceDef() {
		NamespaceDefContext _localctx = new NamespaceDefContext(Context, State);
		EnterRule(_localctx, 30, RULE_namespaceDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289; _localctx.n = Match(NAMESPACE);
			State = 290; _localctx.t = namespaceType(0);
			State = 291; Match(L_CURL);
			State = 297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRUCT) | (1L << ENUM) | (1L << NAMESPACE))) != 0) || _la==ID) {
				{
				{
				State = 292; _localctx.d = definition();
				 _localctx.t.Ast.AddDefinition(_localctx.d.Ast[0]); 
				}
				}
				State = 299;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 300; Match(R_CURL);
			 _localctx.Ast =  NamespaceManager.Instance.Define(_localctx.n.GetLine(), _localctx.n.GetCol(), _localctx.t.Ast); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDefContext : ParserRuleContext {
		public List<VariableDefinition> Ast = new List<VariableDefinition>();
		public List<string> ids = new List<string>();
		public IToken n1;
		public IToken n2;
		public TypeContext t;
		public ExpressionContext e;
		public ITerminalNode COL() { return GetToken(SeagullParser.COL, 0); }
		public ITerminalNode SEMI_COL() { return GetToken(SeagullParser.SEMI_COL, 0); }
		public ITerminalNode[] ID() { return GetTokens(SeagullParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(SeagullParser.ID, i);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SeagullParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SeagullParser.COMMA, i);
		}
		public ITerminalNode ASSIGN() { return GetToken(SeagullParser.ASSIGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDef; } }
	}

	[RuleVersion(0)]
	public VariableDefContext variableDef() {
		VariableDefContext _localctx = new VariableDefContext(Context, State);
		EnterRule(_localctx, 32, RULE_variableDef);
		int _la;
		try {
			State = 335;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 303; _localctx.n1 = Match(ID);
				 _localctx.ids.Add(_localctx.n1.GetText()); 
				State = 310;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 305; Match(COMMA);
					State = 306; _localctx.n2 = Match(ID);
					 _localctx.ids.Add(_localctx.n2.GetText()); 
					}
					}
					State = 312;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 313; Match(COL);
				State = 314; _localctx.t = type(0);
				State = 315; Match(SEMI_COL);

				            foreach (string id in _localctx.ids)
				                _localctx.Ast.Add(new VariableDefinition(_localctx.t.Ast.Line, _localctx.t.Ast.Column, id, _localctx.t.Ast, null)); 
				        
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 318; _localctx.n1 = Match(ID);
				 _localctx.ids.Add(_localctx.n1.GetText()); 
				State = 325;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 320; Match(COMMA);
					State = 321; _localctx.n2 = Match(ID);
					 _localctx.ids.Add(_localctx.n2.GetText()); 
					}
					}
					State = 327;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 328; Match(COL);
				State = 329; _localctx.t = type(0);
				State = 330; Match(ASSIGN);
				State = 331; _localctx.e = expression(0);
				State = 332; Match(SEMI_COL);

				            foreach (string id in _localctx.ids)
				                _localctx.Ast.Add(new VariableDefinition(_localctx.t.Ast.Line, _localctx.t.Ast.Column, id, _localctx.t.Ast, _localctx.e.Ast));
				        
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuctionDefContext : ParserRuleContext {
		public FunctionDefinition Ast;
		public IType funcType;
		public IToken n;
		public FunctionTypeContext t;
		public FnBlockContext _fnBlock;
		public ITerminalNode COL() { return GetToken(SeagullParser.COL, 0); }
		public FnBlockContext fnBlock() {
			return GetRuleContext<FnBlockContext>(0);
		}
		public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
		public FunctionTypeContext functionType() {
			return GetRuleContext<FunctionTypeContext>(0);
		}
		public FuctionDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fuctionDef; } }
	}

	[RuleVersion(0)]
	public FuctionDefContext fuctionDef() {
		FuctionDefContext _localctx = new FuctionDefContext(Context, State);
		EnterRule(_localctx, 34, RULE_fuctionDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337; _localctx.n = Match(ID);
			State = 338; Match(COL);
			State = 339; _localctx.t = functionType();
			State = 340; _localctx._fnBlock = fnBlock();
			 _localctx.Ast =  new FunctionDefinition(_localctx.n.GetLine(), _localctx.n.GetCol(), _localctx.n.GetText(), _localctx.t.Ast, _localctx._fnBlock.Ast); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDefContext : ParserRuleContext {
		public StructDefinition Ast;
		public IToken s;
		public IToken n;
		public StructTypeContext t;
		public ITerminalNode STRUCT() { return GetToken(SeagullParser.STRUCT, 0); }
		public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
		public StructTypeContext structType() {
			return GetRuleContext<StructTypeContext>(0);
		}
		public StructDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDef; } }
	}

	[RuleVersion(0)]
	public StructDefContext structDef() {
		StructDefContext _localctx = new StructDefContext(Context, State);
		EnterRule(_localctx, 36, RULE_structDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343; _localctx.s = Match(STRUCT);
			State = 344; _localctx.n = Match(ID);
			State = 345; _localctx.t = structType();
			 _localctx.Ast =  new StructDefinition(_localctx.s.GetLine(), _localctx.s.GetCol(), _localctx.n.GetText(), _localctx.t.Ast); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDefContext : ParserRuleContext {
		public EnumDefinition Ast;
		public IType typeOf;
		public IToken e;
		public IToken n;
		public TypeContext t;
		public EnumTypeContext _enumType;
		public EnumTypeContext enumType() {
			return GetRuleContext<EnumTypeContext>(0);
		}
		public ITerminalNode ENUM() { return GetToken(SeagullParser.ENUM, 0); }
		public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
		public ITerminalNode COL() { return GetToken(SeagullParser.COL, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public EnumDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDef; } }
	}

	[RuleVersion(0)]
	public EnumDefContext enumDef() {
		EnumDefContext _localctx = new EnumDefContext(Context, State);
		EnterRule(_localctx, 38, RULE_enumDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348; _localctx.e = Match(ENUM);
			State = 349; _localctx.n = Match(ID);
			 _localctx.typeOf =  new IntType(_localctx.n.GetLine(), _localctx.n.GetCol()); 
			State = 355;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COL) {
				{
				State = 351; Match(COL);
				State = 352; _localctx.t = type(0);
				 _localctx.typeOf =  _localctx.t.Ast; 
				}
			}

			State = 357; _localctx._enumType = enumType(_localctx.typeOf);
			 _localctx.Ast =  new EnumDefinition(_localctx.e.GetLine(), _localctx.e.GetCol(), _localctx.n.GetText(), _localctx._enumType.Ast); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelegateContext : ParserRuleContext {
		public IType Ast;
		public IToken n;
		public FunctionTypeContext _functionType;
		public ITerminalNode DELEGATE() { return GetToken(SeagullParser.DELEGATE, 0); }
		public FunctionTypeContext functionType() {
			return GetRuleContext<FunctionTypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
		public DelegateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegate; } }
	}

	[RuleVersion(0)]
	public DelegateContext @delegate() {
		DelegateContext _localctx = new DelegateContext(Context, State);
		EnterRule(_localctx, 40, RULE_delegate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360; Match(DELEGATE);
			State = 361; _localctx.n = Match(ID);
			State = 362; _localctx._functionType = functionType();
			 _localctx.Ast =  _localctx._functionType.Ast; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncInvocationContext : ParserRuleContext {
		public FunctionInvocation Ast;
		public List<IExpression> arguments = new List<IExpression>();
		public VariableContext func;
		public ExpressionContext e1;
		public ExpressionContext e2;
		public ITerminalNode L_PAR() { return GetToken(SeagullParser.L_PAR, 0); }
		public ITerminalNode R_PAR() { return GetToken(SeagullParser.R_PAR, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SeagullParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SeagullParser.COMMA, i);
		}
		public FuncInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcInvocation; } }
	}

	[RuleVersion(0)]
	public FuncInvocationContext funcInvocation() {
		FuncInvocationContext _localctx = new FuncInvocationContext(Context, State);
		EnterRule(_localctx, 42, RULE_funcInvocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 365; _localctx.func = variable();
			State = 366; Match(L_PAR);
			State = 378;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 25)) & ~0x3f) == 0 && ((1L << (_la - 25)) & ((1L << (NEW - 25)) | (1L << (DEFAULT - 25)) | (1L << (MINUS - 25)) | (1L << (NOT - 25)) | (1L << (L_PAR - 25)) | (1L << (ID - 25)) | (1L << (INT_CONSTANT - 25)) | (1L << (REAL_CONSTANT - 25)) | (1L << (CHAR_CONSTANT - 25)) | (1L << (STRING_CONSTANT - 25)) | (1L << (BOOLEAN_CONSTANT - 25)))) != 0)) {
				{
				State = 367; _localctx.e1 = expression(0);
				 _localctx.arguments.Add(_localctx.e1.Ast); 
				State = 375;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 369; Match(COMMA);
					State = 370; _localctx.e2 = expression(0);
					 _localctx.arguments.Add(_localctx.e2.Ast); 
					}
					}
					State = 377;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 380; Match(R_PAR);
			 _localctx.Ast =  new FunctionInvocation(_localctx.func.Ast, _localctx.arguments); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FnBlockContext : ParserRuleContext {
		public List<IStatement> Ast = new List<IStatement>();
		public FnBlockContentContext c1;
		public FnBlockContentContext c2;
		public ITerminalNode L_CURL() { return GetToken(SeagullParser.L_CURL, 0); }
		public ITerminalNode R_CURL() { return GetToken(SeagullParser.R_CURL, 0); }
		public ITerminalNode[] DELAY() { return GetTokens(SeagullParser.DELAY); }
		public ITerminalNode DELAY(int i) {
			return GetToken(SeagullParser.DELAY, i);
		}
		public FnBlockContentContext[] fnBlockContent() {
			return GetRuleContexts<FnBlockContentContext>();
		}
		public FnBlockContentContext fnBlockContent(int i) {
			return GetRuleContext<FnBlockContentContext>(i);
		}
		public FnBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fnBlock; } }
	}

	[RuleVersion(0)]
	public FnBlockContext fnBlock() {
		FnBlockContext _localctx = new FnBlockContext(Context, State);
		EnterRule(_localctx, 44, RULE_fnBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383; Match(L_CURL);
			 List<IStatement> delayed = new List<IStatement>(); 
			State = 394;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << WHILE) | (1L << FOR) | (1L << BREAK) | (1L << CONTINUE) | (1L << NEW) | (1L << RETURN) | (1L << PRINT) | (1L << READ) | (1L << DELAY) | (1L << DEFAULT) | (1L << MINUS) | (1L << NOT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (L_PAR - 64)) | (1L << (L_CURL - 64)) | (1L << (ID - 64)) | (1L << (INT_CONSTANT - 64)) | (1L << (REAL_CONSTANT - 64)) | (1L << (CHAR_CONSTANT - 64)) | (1L << (STRING_CONSTANT - 64)) | (1L << (BOOLEAN_CONSTANT - 64)))) != 0)) {
				{
				State = 392;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IF:
				case WHILE:
				case FOR:
				case BREAK:
				case CONTINUE:
				case NEW:
				case RETURN:
				case PRINT:
				case READ:
				case DEFAULT:
				case MINUS:
				case NOT:
				case L_PAR:
				case L_CURL:
				case ID:
				case INT_CONSTANT:
				case REAL_CONSTANT:
				case CHAR_CONSTANT:
				case STRING_CONSTANT:
				case BOOLEAN_CONSTANT:
					{
					{
					State = 385; _localctx.c1 = fnBlockContent();
					 _localctx.Ast.AddRange(_localctx.c1.Ast); 
					}
					}
					break;
				case DELAY:
					{
					{
					State = 388; Match(DELAY);
					State = 389; _localctx.c2 = fnBlockContent();
					 delayed.AddRange(_localctx.c2.Ast); 
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 396;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			 _localctx.Ast.AddRange(delayed); 
			State = 398; Match(R_CURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FnBlockContentContext : ParserRuleContext {
		public List<IStatement> Ast = new List<IStatement>();
		public VariableDefContext _variableDef;
		public StatementContext block;
		public VariableDefContext variableDef() {
			return GetRuleContext<VariableDefContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public FnBlockContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fnBlockContent; } }
	}

	[RuleVersion(0)]
	public FnBlockContentContext fnBlockContent() {
		FnBlockContentContext _localctx = new FnBlockContentContext(Context, State);
		EnterRule(_localctx, 46, RULE_fnBlockContent);
		try {
			State = 406;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 400; _localctx._variableDef = variableDef();
				 _localctx.Ast.AddRange(_localctx._variableDef.Ast); 
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 403; _localctx.block = statement();
				 _localctx.Ast.AddRange(_localctx.block.Ast); 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public List<IStatement> Ast = new List<IStatement>();
		public StatementContext st1;
		public StatementContext st2;
		public IToken w;
		public ExpressionContext cond;
		public StatementContext st;
		public IToken f;
		public StatementContext init;
		public StatementContext incr;
		public VariableContext e;
		public ExpressionContext col;
		public IToken c;
		public IToken br;
		public IToken i;
		public ExpressionContext e1;
		public ExpressionContext e2;
		public IToken r;
		public ExpressionContext expr;
		public ReadPrintContext _readPrint;
		public FuncInvocationContext _funcInvocation;
		public ITerminalNode L_CURL() { return GetToken(SeagullParser.L_CURL, 0); }
		public ITerminalNode R_CURL() { return GetToken(SeagullParser.R_CURL, 0); }
		public ITerminalNode[] DELAY() { return GetTokens(SeagullParser.DELAY); }
		public ITerminalNode DELAY(int i) {
			return GetToken(SeagullParser.DELAY, i);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode L_PAR() { return GetToken(SeagullParser.L_PAR, 0); }
		public ITerminalNode R_PAR() { return GetToken(SeagullParser.R_PAR, 0); }
		public ITerminalNode WHILE() { return GetToken(SeagullParser.WHILE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode SEMI_COL() { return GetToken(SeagullParser.SEMI_COL, 0); }
		public ITerminalNode FOR() { return GetToken(SeagullParser.FOR, 0); }
		public ITerminalNode IN() { return GetToken(SeagullParser.IN, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode CONTINUE() { return GetToken(SeagullParser.CONTINUE, 0); }
		public ITerminalNode BREAK() { return GetToken(SeagullParser.BREAK, 0); }
		public ITerminalNode IF() { return GetToken(SeagullParser.IF, 0); }
		public ITerminalNode ELSE() { return GetToken(SeagullParser.ELSE, 0); }
		public ITerminalNode ASSIGN() { return GetToken(SeagullParser.ASSIGN, 0); }
		public ITerminalNode RETURN() { return GetToken(SeagullParser.RETURN, 0); }
		public ReadPrintContext readPrint() {
			return GetRuleContext<ReadPrintContext>(0);
		}
		public FuncInvocationContext funcInvocation() {
			return GetRuleContext<FuncInvocationContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 48, RULE_statement);
		int _la;
		try {
			State = 489;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 408; Match(L_CURL);
				 List<IStatement> delayed = new List<IStatement>(); 
				State = 419;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << WHILE) | (1L << FOR) | (1L << BREAK) | (1L << CONTINUE) | (1L << NEW) | (1L << RETURN) | (1L << PRINT) | (1L << READ) | (1L << DELAY) | (1L << DEFAULT) | (1L << MINUS) | (1L << NOT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (L_PAR - 64)) | (1L << (L_CURL - 64)) | (1L << (ID - 64)) | (1L << (INT_CONSTANT - 64)) | (1L << (REAL_CONSTANT - 64)) | (1L << (CHAR_CONSTANT - 64)) | (1L << (STRING_CONSTANT - 64)) | (1L << (BOOLEAN_CONSTANT - 64)))) != 0)) {
					{
					State = 417;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case IF:
					case WHILE:
					case FOR:
					case BREAK:
					case CONTINUE:
					case NEW:
					case RETURN:
					case PRINT:
					case READ:
					case DEFAULT:
					case MINUS:
					case NOT:
					case L_PAR:
					case L_CURL:
					case ID:
					case INT_CONSTANT:
					case REAL_CONSTANT:
					case CHAR_CONSTANT:
					case STRING_CONSTANT:
					case BOOLEAN_CONSTANT:
						{
						{
						State = 410; _localctx.st1 = statement();
						 _localctx.Ast.AddRange(_localctx.st1.Ast); 
						}
						}
						break;
					case DELAY:
						{
						{
						State = 413; Match(DELAY);
						State = 414; _localctx.st2 = statement();
						 delayed.AddRange(_localctx.st2.Ast); 
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 421;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				 _localctx.Ast.AddRange(delayed); 
				State = 423; Match(R_CURL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 424; _localctx.w = Match(WHILE);
				State = 425; Match(L_PAR);
				State = 426; _localctx.cond = expression(0);
				State = 427; Match(R_PAR);
				State = 428; _localctx.st = statement();
				 _localctx.Ast.Add(new WhileLoop(_localctx.w.GetLine(), _localctx.w.GetCol(), _localctx.cond.Ast, _localctx.st.Ast)); 
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 431; _localctx.f = Match(FOR);
				State = 432; Match(L_PAR);
				State = 433; _localctx.init = statement();
				State = 434; _localctx.cond = expression(0);
				State = 435; Match(SEMI_COL);
				State = 436; _localctx.incr = statement();
				State = 437; Match(R_PAR);
				State = 438; _localctx.st = statement();
				 _localctx.Ast.Add(new ForLoop(_localctx.f.GetLine(), _localctx.f.GetCol(), _localctx.init.Ast[0], _localctx.cond.Ast, _localctx.incr.Ast[0], _localctx.st.Ast)); 
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 441; _localctx.f = Match(FOR);
				State = 442; Match(L_PAR);
				State = 443; _localctx.e = variable();
				State = 444; Match(IN);
				State = 445; _localctx.col = expression(0);
				State = 446; Match(R_PAR);
				State = 447; _localctx.st = statement();
				 _localctx.Ast.Add(new ForeachLoop(_localctx.f.GetLine(), _localctx.f.GetCol(), _localctx.e.Ast, _localctx.col.Ast, _localctx.st.Ast)); 
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 450; _localctx.c = Match(CONTINUE);
				State = 451; Match(SEMI_COL);
				 _localctx.Ast.Add(new Continue(_localctx.c.GetLine(), _localctx.c.GetCol())); 
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 453; _localctx.br = Match(BREAK);
				State = 454; Match(SEMI_COL);
				 _localctx.Ast.Add(new Break(_localctx.br.GetLine(), _localctx.br.GetCol())); 
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 456; _localctx.i = Match(IF);
				State = 457; Match(L_PAR);
				State = 458; _localctx.cond = expression(0);
				State = 459; Match(R_PAR);
				State = 460; _localctx.st1 = statement();
				 _localctx.Ast.Add(new IfStatement(_localctx.i.GetLine(), _localctx.i.GetCol(), _localctx.cond.Ast, _localctx.st1.Ast)); 
				State = 466;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
				case 1:
					{
					State = 462; Match(ELSE);
					State = 463; _localctx.st2 = statement();
					 ((IfStatement)_localctx.Ast[0]).Else = _localctx.st2.Ast; 
					}
					break;
				}
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 468; _localctx.e1 = expression(0);
				State = 469; Match(ASSIGN);
				State = 470; _localctx.e2 = expression(0);
				State = 471; Match(SEMI_COL);
				 _localctx.Ast.Add(new Assignment(_localctx.e1.Ast, _localctx.e2.Ast)); 
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 474; _localctx.r = Match(RETURN);
				State = 475; _localctx.expr = expression(0);
				State = 476; Match(SEMI_COL);
				 _localctx.Ast.Add(new Return(_localctx.r.GetLine(), _localctx.r.GetCol(), _localctx.expr.Ast)); 
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 479; _localctx.r = Match(RETURN);
				State = 480; Match(SEMI_COL);
				 _localctx.Ast.Add(new Return(_localctx.r.GetLine(), _localctx.r.GetCol(), null)); 
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 482; _localctx._readPrint = readPrint();
				 _localctx.Ast.Add(_localctx._readPrint.Ast); 
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 485; _localctx._funcInvocation = funcInvocation();
				State = 486; Match(SEMI_COL);
				 _localctx.Ast.Add(_localctx._funcInvocation.Ast); 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadPrintContext : ParserRuleContext {
		public IStatement Ast;
		public IToken p;
		public ExpressionContext e;
		public IToken r;
		public ITerminalNode L_PAR() { return GetToken(SeagullParser.L_PAR, 0); }
		public ITerminalNode R_PAR() { return GetToken(SeagullParser.R_PAR, 0); }
		public ITerminalNode SEMI_COL() { return GetToken(SeagullParser.SEMI_COL, 0); }
		public ITerminalNode PRINT() { return GetToken(SeagullParser.PRINT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode READ() { return GetToken(SeagullParser.READ, 0); }
		public ReadPrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_readPrint; } }
	}

	[RuleVersion(0)]
	public ReadPrintContext readPrint() {
		ReadPrintContext _localctx = new ReadPrintContext(Context, State);
		EnterRule(_localctx, 50, RULE_readPrint);
		try {
			State = 505;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRINT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 491; _localctx.p = Match(PRINT);
				State = 492; Match(L_PAR);
				State = 493; _localctx.e = expression(0);
				State = 494; Match(R_PAR);
				State = 495; Match(SEMI_COL);
				 _localctx.Ast =  new Print(_localctx.p.GetLine(), _localctx.p.GetCol(), _localctx.e.Ast); 
				}
				break;
			case READ:
				EnterOuterAlt(_localctx, 2);
				{
				State = 498; _localctx.r = Match(READ);
				State = 499; Match(L_PAR);
				State = 500; _localctx.e = expression(0);
				State = 501; Match(R_PAR);
				State = 502; Match(SEMI_COL);
				 _localctx.Ast =  new Read(_localctx.r.GetLine(), _localctx.r.GetCol(), _localctx.e.Ast); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public IExpression Ast;
		public ExpressionContext e1;
		public ExpressionContext e;
		public VariableContext _variable;
		public LiteralContext _literal;
		public FuncInvocationContext _funcInvocation;
		public ExpressionContext _expression;
		public IToken n;
		public IToken id;
		public IToken def;
		public TypeContext _type;
		public IToken um;
		public IToken not;
		public IToken p;
		public PrimitiveContext t;
		public IToken op;
		public ExpressionContext e2;
		public ExpressionContext e3;
		public IToken att;
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public FuncInvocationContext funcInvocation() {
			return GetRuleContext<FuncInvocationContext>(0);
		}
		public ITerminalNode L_PAR() { return GetToken(SeagullParser.L_PAR, 0); }
		public ITerminalNode R_PAR() { return GetToken(SeagullParser.R_PAR, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode NEW() { return GetToken(SeagullParser.NEW, 0); }
		public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(SeagullParser.DEFAULT, 0); }
		public ITerminalNode MINUS() { return GetToken(SeagullParser.MINUS, 0); }
		public ITerminalNode NOT() { return GetToken(SeagullParser.NOT, 0); }
		public PrimitiveContext primitive() {
			return GetRuleContext<PrimitiveContext>(0);
		}
		public ITerminalNode STAR() { return GetToken(SeagullParser.STAR, 0); }
		public ITerminalNode SLASH() { return GetToken(SeagullParser.SLASH, 0); }
		public ITerminalNode PERCENT() { return GetToken(SeagullParser.PERCENT, 0); }
		public ITerminalNode PLUS() { return GetToken(SeagullParser.PLUS, 0); }
		public ITerminalNode GREATER_THAN() { return GetToken(SeagullParser.GREATER_THAN, 0); }
		public ITerminalNode LESS_THAN() { return GetToken(SeagullParser.LESS_THAN, 0); }
		public ITerminalNode GREATER_EQ_THAN() { return GetToken(SeagullParser.GREATER_EQ_THAN, 0); }
		public ITerminalNode LESS_EQ_THAN() { return GetToken(SeagullParser.LESS_EQ_THAN, 0); }
		public ITerminalNode EQUAL() { return GetToken(SeagullParser.EQUAL, 0); }
		public ITerminalNode NOT_EQUAL() { return GetToken(SeagullParser.NOT_EQUAL, 0); }
		public ITerminalNode AND() { return GetToken(SeagullParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(SeagullParser.OR, 0); }
		public ITerminalNode QUESTION() { return GetToken(SeagullParser.QUESTION, 0); }
		public ITerminalNode COL() { return GetToken(SeagullParser.COL, 0); }
		public ITerminalNode L_BRACKET() { return GetToken(SeagullParser.L_BRACKET, 0); }
		public ITerminalNode R_BRACKET() { return GetToken(SeagullParser.R_BRACKET, 0); }
		public ITerminalNode DOT() { return GetToken(SeagullParser.DOT, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 52;
		EnterRecursionRule(_localctx, 52, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 545;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				{
				State = 508; _localctx._variable = variable();
				 _localctx.Ast =  _localctx._variable.Ast; 
				}
				break;
			case 2:
				{
				State = 511; _localctx._literal = literal();
				 _localctx.Ast =  _localctx._literal.Ast; 
				}
				break;
			case 3:
				{
				State = 514; _localctx._funcInvocation = funcInvocation();
				 _localctx.Ast =  _localctx._funcInvocation.Ast; 
				}
				break;
			case 4:
				{
				State = 517; Match(L_PAR);
				State = 518; _localctx.e = _localctx._expression = expression(0);
				State = 519; Match(R_PAR);
				 _localctx.Ast =  _localctx.e.Ast; 
				}
				break;
			case 5:
				{
				State = 522; _localctx.n = Match(NEW);
				State = 523; _localctx.id = Match(ID);
				 _localctx.Ast =  new New(_localctx.n.GetLine(), _localctx.n.GetCol(), _localctx.id.GetText()); 
				}
				break;
			case 6:
				{
				State = 525; _localctx.def = Match(DEFAULT);
				State = 526; Match(L_PAR);
				State = 527; _localctx._type = type(0);
				State = 528; Match(R_PAR);
				 _localctx.Ast =  new Default(_localctx.def.GetLine(), _localctx.def.GetCol(), _localctx._type.Ast); 
				}
				break;
			case 7:
				{
				State = 531; _localctx.um = Match(MINUS);
				State = 532; _localctx._expression = expression(8);
				 _localctx.Ast =  new UnaryMinus(_localctx.um.GetLine(), _localctx.um.GetCol(), _localctx._expression.Ast); 
				}
				break;
			case 8:
				{
				State = 535; _localctx.not = Match(NOT);
				State = 536; _localctx._expression = expression(7);
				 _localctx.Ast =  new Negation(_localctx.not.GetLine(), _localctx.not.GetCol(), _localctx._expression.Ast); 
				}
				break;
			case 9:
				{
				State = 539; _localctx.p = Match(L_PAR);
				State = 540; _localctx.t = primitive();
				State = 541; Match(R_PAR);
				State = 542; _localctx.e = _localctx._expression = expression(4);
				 _localctx.Ast =  new Cast(_localctx.p.GetLine(), _localctx.p.GetCol(), _localctx.t.Ast, _localctx.e.Ast); 
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 586;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 584;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.e1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 547;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 548;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << SLASH) | (1L << PERCENT))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 549; _localctx.e2 = _localctx._expression = expression(7);
						 _localctx.Ast =  new Arithmetic((_localctx.op!=null?_localctx.op.Text:null), _localctx.e1.Ast, _localctx.e2.Ast); 
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.e1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 552;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 553;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 554; _localctx.e2 = _localctx._expression = expression(6);
						 _localctx.Ast =  new Arithmetic((_localctx.op!=null?_localctx.op.Text:null), _localctx.e1.Ast, _localctx.e2.Ast); 
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.e1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 557;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 558;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (EQUAL - 74)) | (1L << (NOT_EQUAL - 74)) | (1L << (LESS_THAN - 74)) | (1L << (GREATER_THAN - 74)) | (1L << (LESS_EQ_THAN - 74)) | (1L << (GREATER_EQ_THAN - 74)))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 559; _localctx.e2 = _localctx._expression = expression(4);
						 _localctx.Ast =  new Comparison((_localctx.op!=null?_localctx.op.Text:null), _localctx.e1.Ast, _localctx.e2.Ast); 
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.e1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 562;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 563;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==AND || _la==OR) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 564; _localctx.e2 = _localctx._expression = expression(3);
						 _localctx.Ast =  new LogicalOperation((_localctx.op!=null?_localctx.op.Text:null), _localctx.e1.Ast, _localctx.e2.Ast); 
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.e1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 567;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 568; Match(QUESTION);
						State = 569; _localctx.e2 = _localctx._expression = expression(0);
						State = 570; Match(COL);
						State = 571; _localctx.e3 = _localctx._expression = expression(2);
						 _localctx.Ast =  new TernaryOperator(_localctx.e1.Ast, _localctx.e2.Ast, _localctx.e3.Ast); 
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.e1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 574;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 575; Match(L_BRACKET);
						State = 576; _localctx.e2 = _localctx._expression = expression(0);
						State = 577; Match(R_BRACKET);
						 _localctx.Ast =  new Indexing(_localctx.e1.Ast, _localctx.e2.Ast); 
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.e = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 580;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 581; Match(DOT);
						State = 582; _localctx.att = Match(ID);
						 _localctx.Ast =  new AttributeAccess(_localctx.e.Ast, (_localctx.att!=null?_localctx.att.Text:null)); 
						}
						break;
					}
					} 
				}
				State = 588;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public Variable Ast;
		public IToken _ID;
		public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 54, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 589; _localctx._ID = Match(ID);
			 _localctx.Ast =  new Variable(_localctx._ID.GetLine(), _localctx._ID.GetCol(), (_localctx._ID!=null?_localctx._ID.Text:null)); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public IExpression Ast;
		public IToken i;
		public IToken r;
		public IToken c;
		public IToken s;
		public IToken b;
		public ITerminalNode INT_CONSTANT() { return GetToken(SeagullParser.INT_CONSTANT, 0); }
		public ITerminalNode REAL_CONSTANT() { return GetToken(SeagullParser.REAL_CONSTANT, 0); }
		public ITerminalNode CHAR_CONSTANT() { return GetToken(SeagullParser.CHAR_CONSTANT, 0); }
		public ITerminalNode STRING_CONSTANT() { return GetToken(SeagullParser.STRING_CONSTANT, 0); }
		public ITerminalNode BOOLEAN_CONSTANT() { return GetToken(SeagullParser.BOOLEAN_CONSTANT, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 56, RULE_literal);
		try {
			State = 602;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_CONSTANT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 592; _localctx.i = Match(INT_CONSTANT);
				 _localctx.Ast =  new IntLiteral(_localctx.i.GetLine(), _localctx.i.GetCol(), LexerHelper.LexemeToInt((_localctx.i!=null?_localctx.i.Text:null))); 
				}
				break;
			case REAL_CONSTANT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 594; _localctx.r = Match(REAL_CONSTANT);
				 _localctx.Ast =  new DoubleLiteral(_localctx.r.GetLine(), _localctx.r.GetCol(), LexerHelper.LexemeToReal((_localctx.r!=null?_localctx.r.Text:null))); 
				}
				break;
			case CHAR_CONSTANT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 596; _localctx.c = Match(CHAR_CONSTANT);
				 _localctx.Ast =  new CharLiteral(_localctx.c.GetLine(), _localctx.c.GetCol(), LexerHelper.LexemeToChar((_localctx.c!=null?_localctx.c.Text:null))); 
				}
				break;
			case STRING_CONSTANT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 598; _localctx.s = Match(STRING_CONSTANT);
				 _localctx.Ast =  new StringLiteral(_localctx.s.GetLine(), _localctx.s.GetCol(), (_localctx.s!=null?_localctx.s.Text:null)); 
				}
				break;
			case BOOLEAN_CONSTANT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 600; _localctx.b = Match(BOOLEAN_CONSTANT);
				 _localctx.Ast =  new BooleanLiteral(_localctx.b.GetLine(), _localctx.b.GetCol(), LexerHelper.LexemeToBoolean((_localctx.b!=null?_localctx.b.Text:null))); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return type_sempred((TypeContext)_localctx, predIndex);
		case 5: return namespaceType_sempred((NamespaceTypeContext)_localctx, predIndex);
		case 26: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool type_sempred(TypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool namespaceType_sempred(NamespaceTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 3);
		case 5: return Precpred(Context, 2);
		case 6: return Precpred(Context, 1);
		case 7: return Precpred(Context, 12);
		case 8: return Precpred(Context, 11);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x61', '\x25F', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\a', '\x2', '@', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x43', 
		'\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', 'H', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', 'K', '\v', '\x2', '\x3', '\x2', 
		'\x5', '\x2', 'N', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\a', '\x2', 'S', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 'V', '\v', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\x65', '\n', '\x4', 
		'\f', '\x4', '\xE', '\x4', 'h', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'y', '\n', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x84', 
		'\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x87', '\v', '\x5', '\a', '\x5', 
		'\x89', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x8C', '\v', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', '\x95', '\n', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\a', '\a', '\x9F', '\n', '\a', '\f', '\a', '\xE', '\a', 
		'\xA2', '\v', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x5', '\b', '\xA8', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x5', '\b', '\xB3', '\n', '\b', '\x5', '\b', '\xB5', '\n', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\a', '\t', '\xC3', '\n', '\t', '\f', '\t', '\xE', '\t', 
		'\xC6', '\v', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', '\xD0', 
		'\n', '\t', '\f', '\t', '\xE', '\t', '\xD3', '\v', '\t', '\x3', '\n', 
		'\x3', '\n', '\x5', '\n', '\xD7', '\n', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\a', '\n', '\xDC', '\n', '\n', '\f', '\n', '\xE', '\n', 
		'\xDF', '\v', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\a', '\v', '\xEB', '\n', '\v', '\f', '\v', '\xE', '\v', '\xEE', 
		'\v', '\v', '\x5', '\v', '\xF0', '\n', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\xFC', '\n', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x10C', '\n', '\r', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', 
		'\x10', '\x122', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\x12A', '\n', 
		'\x11', '\f', '\x11', '\xE', '\x11', '\x12D', '\v', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\a', '\x12', '\x137', '\n', '\x12', '\f', 
		'\x12', '\xE', '\x12', '\x13A', '\v', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\a', '\x12', '\x146', '\n', 
		'\x12', '\f', '\x12', '\xE', '\x12', '\x149', '\v', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x5', '\x12', '\x152', '\n', '\x12', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x5', '\x15', '\x166', '\n', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\a', '\x17', '\x178', '\n', '\x17', '\f', '\x17', '\xE', '\x17', '\x17B', 
		'\v', '\x17', '\x5', '\x17', '\x17D', '\n', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\a', '\x18', '\x18B', '\n', '\x18', '\f', '\x18', '\xE', '\x18', 
		'\x18E', '\v', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x5', '\x19', '\x199', '\n', '\x19', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\a', '\x1A', '\x1A4', '\n', '\x1A', '\f', 
		'\x1A', '\xE', '\x1A', '\x1A7', '\v', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x1D5', '\n', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x5', '\x1A', '\x1EC', '\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x1FC', '\n', '\x1B', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x224', '\n', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\a', '\x1C', '\x24B', '\n', '\x1C', '\f', 
		'\x1C', '\xE', '\x1C', '\x24E', '\v', '\x1C', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x5', '\x1E', '\x25D', '\n', '\x1E', '\x3', '\x1E', '\x2', 
		'\x5', '\b', '\f', '\x36', '\x1F', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '\x2', '\a', '\x3', '\x2', '\"', '#', '\x3', '\x2', '/', 
		'\x31', '\x3', '\x2', '\x34', '\x35', '\x3', '\x2', 'L', 'Q', '\x3', '\x2', 
		'>', '?', '\x2', '\x28D', '\x2', '\x41', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'Z', '\x3', '\x2', '\x2', '\x2', '\x6', '^', '\x3', '\x2', '\x2', '\x2', 
		'\b', 'x', '\x3', '\x2', '\x2', '\x2', '\n', '\x94', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\x96', '\x3', '\x2', '\x2', '\x2', '\xE', '\xA3', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '\xB8', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\xD4', '\x3', '\x2', '\x2', '\x2', '\x14', '\xE3', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\xFB', '\x3', '\x2', '\x2', '\x2', '\x18', '\x10B', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x110', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x121', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\x123', '\x3', '\x2', '\x2', '\x2', '\"', '\x151', '\x3', 
		'\x2', '\x2', '\x2', '$', '\x153', '\x3', '\x2', '\x2', '\x2', '&', '\x159', 
		'\x3', '\x2', '\x2', '\x2', '(', '\x15E', '\x3', '\x2', '\x2', '\x2', 
		'*', '\x16A', '\x3', '\x2', '\x2', '\x2', ',', '\x16F', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x181', '\x3', '\x2', '\x2', '\x2', '\x30', '\x198', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x1EB', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x1FB', '\x3', '\x2', '\x2', '\x2', '\x36', '\x223', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x24F', '\x3', '\x2', '\x2', '\x2', ':', '\x25C', 
		'\x3', '\x2', '\x2', '\x2', '<', '=', '\x5', '\x4', '\x3', '\x2', '=', 
		'>', '\b', '\x2', '\x1', '\x2', '>', '@', '\x3', '\x2', '\x2', '\x2', 
		'?', '<', '\x3', '\x2', '\x2', '\x2', '@', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '?', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\x3', 
		'\x2', '\x2', '\x2', '\x42', 'I', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\x5', '\x6', '\x4', 
		'\x2', '\x45', '\x46', '\b', '\x2', '\x1', '\x2', '\x46', 'H', '\x3', 
		'\x2', '\x2', '\x2', 'G', '\x44', '\x3', '\x2', '\x2', '\x2', 'H', 'K', 
		'\x3', '\x2', '\x2', '\x2', 'I', 'G', '\x3', '\x2', '\x2', '\x2', 'I', 
		'J', '\x3', '\x2', '\x2', '\x2', 'J', 'T', '\x3', '\x2', '\x2', '\x2', 
		'K', 'I', '\x3', '\x2', '\x2', '\x2', 'L', 'N', '\x5', '\x1C', '\xF', 
		'\x2', 'M', 'L', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\x3', '\x2', '\x2', 
		'\x2', 'N', 'O', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\x5', '\x1E', 
		'\x10', '\x2', 'P', 'Q', '\b', '\x2', '\x1', '\x2', 'Q', 'S', '\x3', '\x2', 
		'\x2', '\x2', 'R', 'M', '\x3', '\x2', '\x2', '\x2', 'S', 'V', '\x3', '\x2', 
		'\x2', '\x2', 'T', 'R', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\x3', '\x2', 
		'\x2', '\x2', 'U', 'W', '\x3', '\x2', '\x2', '\x2', 'V', 'T', '\x3', '\x2', 
		'\x2', '\x2', 'W', 'X', '\a', '\x2', '\x2', '\x3', 'X', 'Y', '\b', '\x2', 
		'\x1', '\x2', 'Y', '\x3', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\a', 
		'$', '\x2', '\x2', '[', '\\', '\a', 'V', '\x2', '\x2', '\\', ']', '\b', 
		'\x3', '\x1', '\x2', ']', '\x5', '\x3', '\x2', '\x2', '\x2', '^', '_', 
		'\a', '%', '\x2', '\x2', '_', '`', '\a', 'R', '\x2', '\x2', '`', '\x66', 
		'\b', '\x4', '\x1', '\x2', '\x61', '\x62', '\a', '*', '\x2', '\x2', '\x62', 
		'\x63', '\a', 'R', '\x2', '\x2', '\x63', '\x65', '\b', '\x4', '\x1', '\x2', 
		'\x64', '\x61', '\x3', '\x2', '\x2', '\x2', '\x65', 'h', '\x3', '\x2', 
		'\x2', '\x2', '\x66', '\x64', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', 
		'\x3', '\x2', '\x2', '\x2', 'g', 'i', '\x3', '\x2', '\x2', '\x2', 'h', 
		'\x66', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\a', '-', '\x2', '\x2', 
		'j', '\a', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\b', '\x5', '\x1', '\x2', 
		'l', 'm', '\x5', '\x18', '\r', '\x2', 'm', 'n', '\b', '\x5', '\x1', '\x2', 
		'n', 'y', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\x5', '\xE', '\b', '\x2', 
		'p', 'q', '\b', '\x5', '\x1', '\x2', 'q', 'y', '\x3', '\x2', '\x2', '\x2', 
		'r', 's', '\x5', '\x12', '\n', '\x2', 's', 't', '\b', '\x5', '\x1', '\x2', 
		't', 'y', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x5', '\n', '\x6', '\x2', 
		'v', 'w', '\b', '\x5', '\x1', '\x2', 'w', 'y', '\x3', '\x2', '\x2', '\x2', 
		'x', 'k', '\x3', '\x2', '\x2', '\x2', 'x', 'o', '\x3', '\x2', '\x2', '\x2', 
		'x', 'r', '\x3', '\x2', '\x2', '\x2', 'x', 'u', '\x3', '\x2', '\x2', '\x2', 
		'y', '\x8A', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\f', '\x3', '\x2', 
		'\x2', '{', '|', '\a', '@', '\x2', '\x2', '|', '}', '\a', 'S', '\x2', 
		'\x2', '}', '~', '\a', '\x41', '\x2', '\x2', '~', '\x85', '\b', '\x5', 
		'\x1', '\x2', '\x7F', '\x80', '\a', '@', '\x2', '\x2', '\x80', '\x81', 
		'\a', 'S', '\x2', '\x2', '\x81', '\x82', '\a', '\x41', '\x2', '\x2', '\x82', 
		'\x84', '\b', '\x5', '\x1', '\x2', '\x83', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', '\x84', '\x87', '\x3', '\x2', '\x2', '\x2', '\x85', '\x83', '\x3', 
		'\x2', '\x2', '\x2', '\x85', '\x86', '\x3', '\x2', '\x2', '\x2', '\x86', 
		'\x89', '\x3', '\x2', '\x2', '\x2', '\x87', '\x85', '\x3', '\x2', '\x2', 
		'\x2', '\x88', 'z', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8C', '\x3', 
		'\x2', '\x2', '\x2', '\x8A', '\x88', '\x3', '\x2', '\x2', '\x2', '\x8A', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x8B', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\x8C', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', '\a', 
		'R', '\x2', '\x2', '\x8E', '\x95', '\b', '\x6', '\x1', '\x2', '\x8F', 
		'\x90', '\x5', '\f', '\a', '\x2', '\x90', '\x91', '\a', '*', '\x2', '\x2', 
		'\x91', '\x92', '\a', 'R', '\x2', '\x2', '\x92', '\x93', '\b', '\x6', 
		'\x1', '\x2', '\x93', '\x95', '\x3', '\x2', '\x2', '\x2', '\x94', '\x8D', 
		'\x3', '\x2', '\x2', '\x2', '\x94', '\x8F', '\x3', '\x2', '\x2', '\x2', 
		'\x95', '\v', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97', '\b', '\a', 
		'\x1', '\x2', '\x97', '\x98', '\a', 'R', '\x2', '\x2', '\x98', '\x99', 
		'\b', '\a', '\x1', '\x2', '\x99', '\xA0', '\x3', '\x2', '\x2', '\x2', 
		'\x9A', '\x9B', '\f', '\x3', '\x2', '\x2', '\x9B', '\x9C', '\a', '*', 
		'\x2', '\x2', '\x9C', '\x9D', '\a', 'R', '\x2', '\x2', '\x9D', '\x9F', 
		'\b', '\a', '\x1', '\x2', '\x9E', '\x9A', '\x3', '\x2', '\x2', '\x2', 
		'\x9F', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x9E', '\x3', '\x2', 
		'\x2', '\x2', '\xA0', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA1', '\r', 
		'\x3', '\x2', '\x2', '\x2', '\xA2', '\xA0', '\x3', '\x2', '\x2', '\x2', 
		'\xA3', '\xA7', '\a', '\x42', '\x2', '\x2', '\xA4', '\xA5', '\x5', '\x10', 
		'\t', '\x2', '\xA5', '\xA6', '\b', '\b', '\x1', '\x2', '\xA6', '\xA8', 
		'\x3', '\x2', '\x2', '\x2', '\xA7', '\xA4', '\x3', '\x2', '\x2', '\x2', 
		'\xA7', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA9', '\x3', '\x2', 
		'\x2', '\x2', '\xA9', '\xAA', '\a', '\x43', '\x2', '\x2', '\xAA', '\xB4', 
		'\b', '\b', '\x1', '\x2', '\xAB', '\xB2', '\a', '\x32', '\x2', '\x2', 
		'\xAC', '\xAD', '\x5', '\b', '\x5', '\x2', '\xAD', '\xAE', '\b', '\b', 
		'\x1', '\x2', '\xAE', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB0', 
		'\x5', '\x1A', '\xE', '\x2', '\xB0', '\xB1', '\b', '\b', '\x1', '\x2', 
		'\xB1', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xAC', '\x3', '\x2', 
		'\x2', '\x2', '\xB2', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB5', 
		'\x3', '\x2', '\x2', '\x2', '\xB4', '\xAB', '\x3', '\x2', '\x2', '\x2', 
		'\xB4', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB6', '\x3', '\x2', 
		'\x2', '\x2', '\xB6', '\xB7', '\b', '\b', '\x1', '\x2', '\xB7', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', '\a', 'R', '\x2', '\x2', '\xB9', 
		'\xBA', '\a', ',', '\x2', '\x2', '\xBA', '\xBB', '\x5', '\b', '\x5', '\x2', 
		'\xBB', '\xC4', '\b', '\t', '\x1', '\x2', '\xBC', '\xBD', '\a', '+', '\x2', 
		'\x2', '\xBD', '\xBE', '\a', 'R', '\x2', '\x2', '\xBE', '\xBF', '\a', 
		',', '\x2', '\x2', '\xBF', '\xC0', '\x5', '\b', '\x5', '\x2', '\xC0', 
		'\xC1', '\b', '\t', '\x1', '\x2', '\xC1', '\xC3', '\x3', '\x2', '\x2', 
		'\x2', '\xC2', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC6', '\x3', 
		'\x2', '\x2', '\x2', '\xC4', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC4', 
		'\xC5', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xD1', '\x3', '\x2', '\x2', 
		'\x2', '\xC6', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', '\a', 
		'+', '\x2', '\x2', '\xC8', '\xC9', '\a', 'R', '\x2', '\x2', '\xC9', '\xCA', 
		'\a', ',', '\x2', '\x2', '\xCA', '\xCB', '\x5', '\b', '\x5', '\x2', '\xCB', 
		'\xCC', '\a', '.', '\x2', '\x2', '\xCC', '\xCD', '\x5', ':', '\x1E', '\x2', 
		'\xCD', '\xCE', '\b', '\t', '\x1', '\x2', '\xCE', '\xD0', '\x3', '\x2', 
		'\x2', '\x2', '\xCF', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD3', 
		'\x3', '\x2', '\x2', '\x2', '\xD1', '\xCF', '\x3', '\x2', '\x2', '\x2', 
		'\xD1', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD2', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '\xD3', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xDD', 
		'\a', '\x44', '\x2', '\x2', '\xD5', '\xD7', '\x5', '\x1C', '\xF', '\x2', 
		'\xD6', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD7', '\x3', '\x2', 
		'\x2', '\x2', '\xD7', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD9', 
		'\x5', '\"', '\x12', '\x2', '\xD9', '\xDA', '\b', '\n', '\x1', '\x2', 
		'\xDA', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xD6', '\x3', '\x2', 
		'\x2', '\x2', '\xDC', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDB', 
		'\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', '\x3', '\x2', '\x2', '\x2', 
		'\xDE', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xDD', '\x3', '\x2', 
		'\x2', '\x2', '\xE0', '\xE1', '\a', '\x45', '\x2', '\x2', '\xE1', '\xE2', 
		'\b', '\n', '\x1', '\x2', '\xE2', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\xE3', '\xEF', '\a', '\x44', '\x2', '\x2', '\xE4', '\xE5', '\x5', '\x16', 
		'\f', '\x2', '\xE5', '\xEC', '\b', '\v', '\x1', '\x2', '\xE6', '\xE7', 
		'\a', '+', '\x2', '\x2', '\xE7', '\xE8', '\x5', '\x16', '\f', '\x2', '\xE8', 
		'\xE9', '\b', '\v', '\x1', '\x2', '\xE9', '\xEB', '\x3', '\x2', '\x2', 
		'\x2', '\xEA', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xEE', '\x3', 
		'\x2', '\x2', '\x2', '\xEC', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEC', 
		'\xED', '\x3', '\x2', '\x2', '\x2', '\xED', '\xF0', '\x3', '\x2', '\x2', 
		'\x2', '\xEE', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xE4', '\x3', 
		'\x2', '\x2', '\x2', '\xEF', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF0', 
		'\xF1', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF2', '\a', '\x45', '\x2', 
		'\x2', '\xF2', '\xF3', '\b', '\v', '\x1', '\x2', '\xF3', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\xF4', '\xF5', '\a', 'R', '\x2', '\x2', '\xF5', 
		'\xF6', '\a', '.', '\x2', '\x2', '\xF6', '\xF7', '\x5', '\x36', '\x1C', 
		'\x2', '\xF7', '\xF8', '\b', '\f', '\x1', '\x2', '\xF8', '\xFC', '\x3', 
		'\x2', '\x2', '\x2', '\xF9', '\xFA', '\a', 'R', '\x2', '\x2', '\xFA', 
		'\xFC', '\b', '\f', '\x1', '\x2', '\xFB', '\xF4', '\x3', '\x2', '\x2', 
		'\x2', '\xFB', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xFC', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\xFD', '\xFE', '\a', '\xF', '\x2', '\x2', '\xFE', 
		'\x10C', '\b', '\r', '\x1', '\x2', '\xFF', '\x100', '\a', '\x6', '\x2', 
		'\x2', '\x100', '\x10C', '\b', '\r', '\x1', '\x2', '\x101', '\x102', '\a', 
		'\v', '\x2', '\x2', '\x102', '\x10C', '\b', '\r', '\x1', '\x2', '\x103', 
		'\x104', '\a', '\x5', '\x2', '\x2', '\x104', '\x10C', '\b', '\r', '\x1', 
		'\x2', '\x105', '\x106', '\a', '\a', '\x2', '\x2', '\x106', '\x10C', '\b', 
		'\r', '\x1', '\x2', '\x107', '\x108', '\a', '\n', '\x2', '\x2', '\x108', 
		'\x10C', '\b', '\r', '\x1', '\x2', '\x109', '\x10A', '\a', '\b', '\x2', 
		'\x2', '\x10A', '\x10C', '\b', '\r', '\x1', '\x2', '\x10B', '\xFD', '\x3', 
		'\x2', '\x2', '\x2', '\x10B', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x10B', 
		'\x101', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x103', '\x3', '\x2', '\x2', 
		'\x2', '\x10B', '\x105', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x107', 
		'\x3', '\x2', '\x2', '\x2', '\x10B', '\x109', '\x3', '\x2', '\x2', '\x2', 
		'\x10C', '\x19', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10E', '\a', '\x4', 
		'\x2', '\x2', '\x10E', '\x10F', '\b', '\xE', '\x1', '\x2', '\x10F', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x110', '\x111', '\t', '\x2', '\x2', '\x2', 
		'\x111', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x112', '\x113', '\x5', 
		' ', '\x11', '\x2', '\x113', '\x114', '\b', '\x10', '\x1', '\x2', '\x114', 
		'\x122', '\x3', '\x2', '\x2', '\x2', '\x115', '\x116', '\x5', '\"', '\x12', 
		'\x2', '\x116', '\x117', '\b', '\x10', '\x1', '\x2', '\x117', '\x122', 
		'\x3', '\x2', '\x2', '\x2', '\x118', '\x119', '\x5', '$', '\x13', '\x2', 
		'\x119', '\x11A', '\b', '\x10', '\x1', '\x2', '\x11A', '\x122', '\x3', 
		'\x2', '\x2', '\x2', '\x11B', '\x11C', '\x5', '&', '\x14', '\x2', '\x11C', 
		'\x11D', '\b', '\x10', '\x1', '\x2', '\x11D', '\x122', '\x3', '\x2', '\x2', 
		'\x2', '\x11E', '\x11F', '\x5', '(', '\x15', '\x2', '\x11F', '\x120', 
		'\b', '\x10', '\x1', '\x2', '\x120', '\x122', '\x3', '\x2', '\x2', '\x2', 
		'\x121', '\x112', '\x3', '\x2', '\x2', '\x2', '\x121', '\x115', '\x3', 
		'\x2', '\x2', '\x2', '\x121', '\x118', '\x3', '\x2', '\x2', '\x2', '\x121', 
		'\x11B', '\x3', '\x2', '\x2', '\x2', '\x121', '\x11E', '\x3', '\x2', '\x2', 
		'\x2', '\x122', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x123', '\x124', 
		'\a', '&', '\x2', '\x2', '\x124', '\x125', '\x5', '\f', '\a', '\x2', '\x125', 
		'\x12B', '\a', '\x44', '\x2', '\x2', '\x126', '\x127', '\x5', '\x1E', 
		'\x10', '\x2', '\x127', '\x128', '\b', '\x11', '\x1', '\x2', '\x128', 
		'\x12A', '\x3', '\x2', '\x2', '\x2', '\x129', '\x126', '\x3', '\x2', '\x2', 
		'\x2', '\x12A', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x129', 
		'\x3', '\x2', '\x2', '\x2', '\x12B', '\x12C', '\x3', '\x2', '\x2', '\x2', 
		'\x12C', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12B', '\x3', 
		'\x2', '\x2', '\x2', '\x12E', '\x12F', '\a', '\x45', '\x2', '\x2', '\x12F', 
		'\x130', '\b', '\x11', '\x1', '\x2', '\x130', '!', '\x3', '\x2', '\x2', 
		'\x2', '\x131', '\x132', '\a', 'R', '\x2', '\x2', '\x132', '\x138', '\b', 
		'\x12', '\x1', '\x2', '\x133', '\x134', '\a', '+', '\x2', '\x2', '\x134', 
		'\x135', '\a', 'R', '\x2', '\x2', '\x135', '\x137', '\b', '\x12', '\x1', 
		'\x2', '\x136', '\x133', '\x3', '\x2', '\x2', '\x2', '\x137', '\x13A', 
		'\x3', '\x2', '\x2', '\x2', '\x138', '\x136', '\x3', '\x2', '\x2', '\x2', 
		'\x138', '\x139', '\x3', '\x2', '\x2', '\x2', '\x139', '\x13B', '\x3', 
		'\x2', '\x2', '\x2', '\x13A', '\x138', '\x3', '\x2', '\x2', '\x2', '\x13B', 
		'\x13C', '\a', ',', '\x2', '\x2', '\x13C', '\x13D', '\x5', '\b', '\x5', 
		'\x2', '\x13D', '\x13E', '\a', '-', '\x2', '\x2', '\x13E', '\x13F', '\b', 
		'\x12', '\x1', '\x2', '\x13F', '\x152', '\x3', '\x2', '\x2', '\x2', '\x140', 
		'\x141', '\a', 'R', '\x2', '\x2', '\x141', '\x147', '\b', '\x12', '\x1', 
		'\x2', '\x142', '\x143', '\a', '+', '\x2', '\x2', '\x143', '\x144', '\a', 
		'R', '\x2', '\x2', '\x144', '\x146', '\b', '\x12', '\x1', '\x2', '\x145', 
		'\x142', '\x3', '\x2', '\x2', '\x2', '\x146', '\x149', '\x3', '\x2', '\x2', 
		'\x2', '\x147', '\x145', '\x3', '\x2', '\x2', '\x2', '\x147', '\x148', 
		'\x3', '\x2', '\x2', '\x2', '\x148', '\x14A', '\x3', '\x2', '\x2', '\x2', 
		'\x149', '\x147', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x14B', '\a', 
		',', '\x2', '\x2', '\x14B', '\x14C', '\x5', '\b', '\x5', '\x2', '\x14C', 
		'\x14D', '\a', '.', '\x2', '\x2', '\x14D', '\x14E', '\x5', '\x36', '\x1C', 
		'\x2', '\x14E', '\x14F', '\a', '-', '\x2', '\x2', '\x14F', '\x150', '\b', 
		'\x12', '\x1', '\x2', '\x150', '\x152', '\x3', '\x2', '\x2', '\x2', '\x151', 
		'\x131', '\x3', '\x2', '\x2', '\x2', '\x151', '\x140', '\x3', '\x2', '\x2', 
		'\x2', '\x152', '#', '\x3', '\x2', '\x2', '\x2', '\x153', '\x154', '\a', 
		'R', '\x2', '\x2', '\x154', '\x155', '\a', ',', '\x2', '\x2', '\x155', 
		'\x156', '\x5', '\xE', '\b', '\x2', '\x156', '\x157', '\x5', '.', '\x18', 
		'\x2', '\x157', '\x158', '\b', '\x13', '\x1', '\x2', '\x158', '%', '\x3', 
		'\x2', '\x2', '\x2', '\x159', '\x15A', '\a', '\t', '\x2', '\x2', '\x15A', 
		'\x15B', '\a', 'R', '\x2', '\x2', '\x15B', '\x15C', '\x5', '\x12', '\n', 
		'\x2', '\x15C', '\x15D', '\b', '\x14', '\x1', '\x2', '\x15D', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\x15E', '\x15F', '\a', '\f', '\x2', '\x2', '\x15F', 
		'\x160', '\a', 'R', '\x2', '\x2', '\x160', '\x165', '\b', '\x15', '\x1', 
		'\x2', '\x161', '\x162', '\a', ',', '\x2', '\x2', '\x162', '\x163', '\x5', 
		'\b', '\x5', '\x2', '\x163', '\x164', '\b', '\x15', '\x1', '\x2', '\x164', 
		'\x166', '\x3', '\x2', '\x2', '\x2', '\x165', '\x161', '\x3', '\x2', '\x2', 
		'\x2', '\x165', '\x166', '\x3', '\x2', '\x2', '\x2', '\x166', '\x167', 
		'\x3', '\x2', '\x2', '\x2', '\x167', '\x168', '\x5', '\x14', '\v', '\x2', 
		'\x168', '\x169', '\b', '\x15', '\x1', '\x2', '\x169', ')', '\x3', '\x2', 
		'\x2', '\x2', '\x16A', '\x16B', '\a', '\r', '\x2', '\x2', '\x16B', '\x16C', 
		'\a', 'R', '\x2', '\x2', '\x16C', '\x16D', '\x5', '\xE', '\b', '\x2', 
		'\x16D', '\x16E', '\b', '\x16', '\x1', '\x2', '\x16E', '+', '\x3', '\x2', 
		'\x2', '\x2', '\x16F', '\x170', '\x5', '\x38', '\x1D', '\x2', '\x170', 
		'\x17C', '\a', '\x42', '\x2', '\x2', '\x171', '\x172', '\x5', '\x36', 
		'\x1C', '\x2', '\x172', '\x179', '\b', '\x17', '\x1', '\x2', '\x173', 
		'\x174', '\a', '+', '\x2', '\x2', '\x174', '\x175', '\x5', '\x36', '\x1C', 
		'\x2', '\x175', '\x176', '\b', '\x17', '\x1', '\x2', '\x176', '\x178', 
		'\x3', '\x2', '\x2', '\x2', '\x177', '\x173', '\x3', '\x2', '\x2', '\x2', 
		'\x178', '\x17B', '\x3', '\x2', '\x2', '\x2', '\x179', '\x177', '\x3', 
		'\x2', '\x2', '\x2', '\x179', '\x17A', '\x3', '\x2', '\x2', '\x2', '\x17A', 
		'\x17D', '\x3', '\x2', '\x2', '\x2', '\x17B', '\x179', '\x3', '\x2', '\x2', 
		'\x2', '\x17C', '\x171', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x17D', 
		'\x3', '\x2', '\x2', '\x2', '\x17D', '\x17E', '\x3', '\x2', '\x2', '\x2', 
		'\x17E', '\x17F', '\a', '\x43', '\x2', '\x2', '\x17F', '\x180', '\b', 
		'\x17', '\x1', '\x2', '\x180', '-', '\x3', '\x2', '\x2', '\x2', '\x181', 
		'\x182', '\a', '\x44', '\x2', '\x2', '\x182', '\x18C', '\b', '\x18', '\x1', 
		'\x2', '\x183', '\x184', '\x5', '\x30', '\x19', '\x2', '\x184', '\x185', 
		'\b', '\x18', '\x1', '\x2', '\x185', '\x18B', '\x3', '\x2', '\x2', '\x2', 
		'\x186', '\x187', '\a', '!', '\x2', '\x2', '\x187', '\x188', '\x5', '\x30', 
		'\x19', '\x2', '\x188', '\x189', '\b', '\x18', '\x1', '\x2', '\x189', 
		'\x18B', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x183', '\x3', '\x2', '\x2', 
		'\x2', '\x18A', '\x186', '\x3', '\x2', '\x2', '\x2', '\x18B', '\x18E', 
		'\x3', '\x2', '\x2', '\x2', '\x18C', '\x18A', '\x3', '\x2', '\x2', '\x2', 
		'\x18C', '\x18D', '\x3', '\x2', '\x2', '\x2', '\x18D', '\x18F', '\x3', 
		'\x2', '\x2', '\x2', '\x18E', '\x18C', '\x3', '\x2', '\x2', '\x2', '\x18F', 
		'\x190', '\b', '\x18', '\x1', '\x2', '\x190', '\x191', '\a', '\x45', '\x2', 
		'\x2', '\x191', '/', '\x3', '\x2', '\x2', '\x2', '\x192', '\x193', '\x5', 
		'\"', '\x12', '\x2', '\x193', '\x194', '\b', '\x19', '\x1', '\x2', '\x194', 
		'\x199', '\x3', '\x2', '\x2', '\x2', '\x195', '\x196', '\x5', '\x32', 
		'\x1A', '\x2', '\x196', '\x197', '\b', '\x19', '\x1', '\x2', '\x197', 
		'\x199', '\x3', '\x2', '\x2', '\x2', '\x198', '\x192', '\x3', '\x2', '\x2', 
		'\x2', '\x198', '\x195', '\x3', '\x2', '\x2', '\x2', '\x199', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x19A', '\x19B', '\a', '\x44', '\x2', '\x2', 
		'\x19B', '\x1A5', '\b', '\x1A', '\x1', '\x2', '\x19C', '\x19D', '\x5', 
		'\x32', '\x1A', '\x2', '\x19D', '\x19E', '\b', '\x1A', '\x1', '\x2', '\x19E', 
		'\x1A4', '\x3', '\x2', '\x2', '\x2', '\x19F', '\x1A0', '\a', '!', '\x2', 
		'\x2', '\x1A0', '\x1A1', '\x5', '\x32', '\x1A', '\x2', '\x1A1', '\x1A2', 
		'\b', '\x1A', '\x1', '\x2', '\x1A2', '\x1A4', '\x3', '\x2', '\x2', '\x2', 
		'\x1A3', '\x19C', '\x3', '\x2', '\x2', '\x2', '\x1A3', '\x19F', '\x3', 
		'\x2', '\x2', '\x2', '\x1A4', '\x1A7', '\x3', '\x2', '\x2', '\x2', '\x1A5', 
		'\x1A3', '\x3', '\x2', '\x2', '\x2', '\x1A5', '\x1A6', '\x3', '\x2', '\x2', 
		'\x2', '\x1A6', '\x1A8', '\x3', '\x2', '\x2', '\x2', '\x1A7', '\x1A5', 
		'\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1A9', '\b', '\x1A', '\x1', '\x2', 
		'\x1A9', '\x1EC', '\a', '\x45', '\x2', '\x2', '\x1AA', '\x1AB', '\a', 
		'\x14', '\x2', '\x2', '\x1AB', '\x1AC', '\a', '\x42', '\x2', '\x2', '\x1AC', 
		'\x1AD', '\x5', '\x36', '\x1C', '\x2', '\x1AD', '\x1AE', '\a', '\x43', 
		'\x2', '\x2', '\x1AE', '\x1AF', '\x5', '\x32', '\x1A', '\x2', '\x1AF', 
		'\x1B0', '\b', '\x1A', '\x1', '\x2', '\x1B0', '\x1EC', '\x3', '\x2', '\x2', 
		'\x2', '\x1B1', '\x1B2', '\a', '\x15', '\x2', '\x2', '\x1B2', '\x1B3', 
		'\a', '\x42', '\x2', '\x2', '\x1B3', '\x1B4', '\x5', '\x32', '\x1A', '\x2', 
		'\x1B4', '\x1B5', '\x5', '\x36', '\x1C', '\x2', '\x1B5', '\x1B6', '\a', 
		'-', '\x2', '\x2', '\x1B6', '\x1B7', '\x5', '\x32', '\x1A', '\x2', '\x1B7', 
		'\x1B8', '\a', '\x43', '\x2', '\x2', '\x1B8', '\x1B9', '\x5', '\x32', 
		'\x1A', '\x2', '\x1B9', '\x1BA', '\b', '\x1A', '\x1', '\x2', '\x1BA', 
		'\x1EC', '\x3', '\x2', '\x2', '\x2', '\x1BB', '\x1BC', '\a', '\x15', '\x2', 
		'\x2', '\x1BC', '\x1BD', '\a', '\x42', '\x2', '\x2', '\x1BD', '\x1BE', 
		'\x5', '\x38', '\x1D', '\x2', '\x1BE', '\x1BF', '\a', '\x16', '\x2', '\x2', 
		'\x1BF', '\x1C0', '\x5', '\x36', '\x1C', '\x2', '\x1C0', '\x1C1', '\a', 
		'\x43', '\x2', '\x2', '\x1C1', '\x1C2', '\x5', '\x32', '\x1A', '\x2', 
		'\x1C2', '\x1C3', '\b', '\x1A', '\x1', '\x2', '\x1C3', '\x1EC', '\x3', 
		'\x2', '\x2', '\x2', '\x1C4', '\x1C5', '\a', '\x1A', '\x2', '\x2', '\x1C5', 
		'\x1C6', '\a', '-', '\x2', '\x2', '\x1C6', '\x1EC', '\b', '\x1A', '\x1', 
		'\x2', '\x1C7', '\x1C8', '\a', '\x19', '\x2', '\x2', '\x1C8', '\x1C9', 
		'\a', '-', '\x2', '\x2', '\x1C9', '\x1EC', '\b', '\x1A', '\x1', '\x2', 
		'\x1CA', '\x1CB', '\a', '\x12', '\x2', '\x2', '\x1CB', '\x1CC', '\a', 
		'\x42', '\x2', '\x2', '\x1CC', '\x1CD', '\x5', '\x36', '\x1C', '\x2', 
		'\x1CD', '\x1CE', '\a', '\x43', '\x2', '\x2', '\x1CE', '\x1CF', '\x5', 
		'\x32', '\x1A', '\x2', '\x1CF', '\x1D4', '\b', '\x1A', '\x1', '\x2', '\x1D0', 
		'\x1D1', '\a', '\x13', '\x2', '\x2', '\x1D1', '\x1D2', '\x5', '\x32', 
		'\x1A', '\x2', '\x1D2', '\x1D3', '\b', '\x1A', '\x1', '\x2', '\x1D3', 
		'\x1D5', '\x3', '\x2', '\x2', '\x2', '\x1D4', '\x1D0', '\x3', '\x2', '\x2', 
		'\x2', '\x1D4', '\x1D5', '\x3', '\x2', '\x2', '\x2', '\x1D5', '\x1EC', 
		'\x3', '\x2', '\x2', '\x2', '\x1D6', '\x1D7', '\x5', '\x36', '\x1C', '\x2', 
		'\x1D7', '\x1D8', '\a', '.', '\x2', '\x2', '\x1D8', '\x1D9', '\x5', '\x36', 
		'\x1C', '\x2', '\x1D9', '\x1DA', '\a', '-', '\x2', '\x2', '\x1DA', '\x1DB', 
		'\b', '\x1A', '\x1', '\x2', '\x1DB', '\x1EC', '\x3', '\x2', '\x2', '\x2', 
		'\x1DC', '\x1DD', '\a', '\x1D', '\x2', '\x2', '\x1DD', '\x1DE', '\x5', 
		'\x36', '\x1C', '\x2', '\x1DE', '\x1DF', '\a', '-', '\x2', '\x2', '\x1DF', 
		'\x1E0', '\b', '\x1A', '\x1', '\x2', '\x1E0', '\x1EC', '\x3', '\x2', '\x2', 
		'\x2', '\x1E1', '\x1E2', '\a', '\x1D', '\x2', '\x2', '\x1E2', '\x1E3', 
		'\a', '-', '\x2', '\x2', '\x1E3', '\x1EC', '\b', '\x1A', '\x1', '\x2', 
		'\x1E4', '\x1E5', '\x5', '\x34', '\x1B', '\x2', '\x1E5', '\x1E6', '\b', 
		'\x1A', '\x1', '\x2', '\x1E6', '\x1EC', '\x3', '\x2', '\x2', '\x2', '\x1E7', 
		'\x1E8', '\x5', ',', '\x17', '\x2', '\x1E8', '\x1E9', '\a', '-', '\x2', 
		'\x2', '\x1E9', '\x1EA', '\b', '\x1A', '\x1', '\x2', '\x1EA', '\x1EC', 
		'\x3', '\x2', '\x2', '\x2', '\x1EB', '\x19A', '\x3', '\x2', '\x2', '\x2', 
		'\x1EB', '\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1EB', '\x1B1', '\x3', 
		'\x2', '\x2', '\x2', '\x1EB', '\x1BB', '\x3', '\x2', '\x2', '\x2', '\x1EB', 
		'\x1C4', '\x3', '\x2', '\x2', '\x2', '\x1EB', '\x1C7', '\x3', '\x2', '\x2', 
		'\x2', '\x1EB', '\x1CA', '\x3', '\x2', '\x2', '\x2', '\x1EB', '\x1D6', 
		'\x3', '\x2', '\x2', '\x2', '\x1EB', '\x1DC', '\x3', '\x2', '\x2', '\x2', 
		'\x1EB', '\x1E1', '\x3', '\x2', '\x2', '\x2', '\x1EB', '\x1E4', '\x3', 
		'\x2', '\x2', '\x2', '\x1EB', '\x1E7', '\x3', '\x2', '\x2', '\x2', '\x1EC', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x1ED', '\x1EE', '\a', '\x1E', '\x2', 
		'\x2', '\x1EE', '\x1EF', '\a', '\x42', '\x2', '\x2', '\x1EF', '\x1F0', 
		'\x5', '\x36', '\x1C', '\x2', '\x1F0', '\x1F1', '\a', '\x43', '\x2', '\x2', 
		'\x1F1', '\x1F2', '\a', '-', '\x2', '\x2', '\x1F2', '\x1F3', '\b', '\x1B', 
		'\x1', '\x2', '\x1F3', '\x1FC', '\x3', '\x2', '\x2', '\x2', '\x1F4', '\x1F5', 
		'\a', '\x1F', '\x2', '\x2', '\x1F5', '\x1F6', '\a', '\x42', '\x2', '\x2', 
		'\x1F6', '\x1F7', '\x5', '\x36', '\x1C', '\x2', '\x1F7', '\x1F8', '\a', 
		'\x43', '\x2', '\x2', '\x1F8', '\x1F9', '\a', '-', '\x2', '\x2', '\x1F9', 
		'\x1FA', '\b', '\x1B', '\x1', '\x2', '\x1FA', '\x1FC', '\x3', '\x2', '\x2', 
		'\x2', '\x1FB', '\x1ED', '\x3', '\x2', '\x2', '\x2', '\x1FB', '\x1F4', 
		'\x3', '\x2', '\x2', '\x2', '\x1FC', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x1FD', '\x1FE', '\b', '\x1C', '\x1', '\x2', '\x1FE', '\x1FF', '\x5', 
		'\x38', '\x1D', '\x2', '\x1FF', '\x200', '\b', '\x1C', '\x1', '\x2', '\x200', 
		'\x224', '\x3', '\x2', '\x2', '\x2', '\x201', '\x202', '\x5', ':', '\x1E', 
		'\x2', '\x202', '\x203', '\b', '\x1C', '\x1', '\x2', '\x203', '\x224', 
		'\x3', '\x2', '\x2', '\x2', '\x204', '\x205', '\x5', ',', '\x17', '\x2', 
		'\x205', '\x206', '\b', '\x1C', '\x1', '\x2', '\x206', '\x224', '\x3', 
		'\x2', '\x2', '\x2', '\x207', '\x208', '\a', '\x42', '\x2', '\x2', '\x208', 
		'\x209', '\x5', '\x36', '\x1C', '\x2', '\x209', '\x20A', '\a', '\x43', 
		'\x2', '\x2', '\x20A', '\x20B', '\b', '\x1C', '\x1', '\x2', '\x20B', '\x224', 
		'\x3', '\x2', '\x2', '\x2', '\x20C', '\x20D', '\a', '\x1B', '\x2', '\x2', 
		'\x20D', '\x20E', '\a', 'R', '\x2', '\x2', '\x20E', '\x224', '\b', '\x1C', 
		'\x1', '\x2', '\x20F', '\x210', '\a', ')', '\x2', '\x2', '\x210', '\x211', 
		'\a', '\x42', '\x2', '\x2', '\x211', '\x212', '\x5', '\b', '\x5', '\x2', 
		'\x212', '\x213', '\a', '\x43', '\x2', '\x2', '\x213', '\x214', '\b', 
		'\x1C', '\x1', '\x2', '\x214', '\x224', '\x3', '\x2', '\x2', '\x2', '\x215', 
		'\x216', '\a', '\x35', '\x2', '\x2', '\x216', '\x217', '\x5', '\x36', 
		'\x1C', '\n', '\x217', '\x218', '\b', '\x1C', '\x1', '\x2', '\x218', '\x224', 
		'\x3', '\x2', '\x2', '\x2', '\x219', '\x21A', '\a', '=', '\x2', '\x2', 
		'\x21A', '\x21B', '\x5', '\x36', '\x1C', '\t', '\x21B', '\x21C', '\b', 
		'\x1C', '\x1', '\x2', '\x21C', '\x224', '\x3', '\x2', '\x2', '\x2', '\x21D', 
		'\x21E', '\a', '\x42', '\x2', '\x2', '\x21E', '\x21F', '\x5', '\x18', 
		'\r', '\x2', '\x21F', '\x220', '\a', '\x43', '\x2', '\x2', '\x220', '\x221', 
		'\x5', '\x36', '\x1C', '\x6', '\x221', '\x222', '\b', '\x1C', '\x1', '\x2', 
		'\x222', '\x224', '\x3', '\x2', '\x2', '\x2', '\x223', '\x1FD', '\x3', 
		'\x2', '\x2', '\x2', '\x223', '\x201', '\x3', '\x2', '\x2', '\x2', '\x223', 
		'\x204', '\x3', '\x2', '\x2', '\x2', '\x223', '\x207', '\x3', '\x2', '\x2', 
		'\x2', '\x223', '\x20C', '\x3', '\x2', '\x2', '\x2', '\x223', '\x20F', 
		'\x3', '\x2', '\x2', '\x2', '\x223', '\x215', '\x3', '\x2', '\x2', '\x2', 
		'\x223', '\x219', '\x3', '\x2', '\x2', '\x2', '\x223', '\x21D', '\x3', 
		'\x2', '\x2', '\x2', '\x224', '\x24C', '\x3', '\x2', '\x2', '\x2', '\x225', 
		'\x226', '\f', '\b', '\x2', '\x2', '\x226', '\x227', '\t', '\x3', '\x2', 
		'\x2', '\x227', '\x228', '\x5', '\x36', '\x1C', '\t', '\x228', '\x229', 
		'\b', '\x1C', '\x1', '\x2', '\x229', '\x24B', '\x3', '\x2', '\x2', '\x2', 
		'\x22A', '\x22B', '\f', '\a', '\x2', '\x2', '\x22B', '\x22C', '\t', '\x4', 
		'\x2', '\x2', '\x22C', '\x22D', '\x5', '\x36', '\x1C', '\b', '\x22D', 
		'\x22E', '\b', '\x1C', '\x1', '\x2', '\x22E', '\x24B', '\x3', '\x2', '\x2', 
		'\x2', '\x22F', '\x230', '\f', '\x5', '\x2', '\x2', '\x230', '\x231', 
		'\t', '\x5', '\x2', '\x2', '\x231', '\x232', '\x5', '\x36', '\x1C', '\x6', 
		'\x232', '\x233', '\b', '\x1C', '\x1', '\x2', '\x233', '\x24B', '\x3', 
		'\x2', '\x2', '\x2', '\x234', '\x235', '\f', '\x4', '\x2', '\x2', '\x235', 
		'\x236', '\t', '\x6', '\x2', '\x2', '\x236', '\x237', '\x5', '\x36', '\x1C', 
		'\x5', '\x237', '\x238', '\b', '\x1C', '\x1', '\x2', '\x238', '\x24B', 
		'\x3', '\x2', '\x2', '\x2', '\x239', '\x23A', '\f', '\x3', '\x2', '\x2', 
		'\x23A', '\x23B', '\a', '\x33', '\x2', '\x2', '\x23B', '\x23C', '\x5', 
		'\x36', '\x1C', '\x2', '\x23C', '\x23D', '\a', ',', '\x2', '\x2', '\x23D', 
		'\x23E', '\x5', '\x36', '\x1C', '\x4', '\x23E', '\x23F', '\b', '\x1C', 
		'\x1', '\x2', '\x23F', '\x24B', '\x3', '\x2', '\x2', '\x2', '\x240', '\x241', 
		'\f', '\xE', '\x2', '\x2', '\x241', '\x242', '\a', '@', '\x2', '\x2', 
		'\x242', '\x243', '\x5', '\x36', '\x1C', '\x2', '\x243', '\x244', '\a', 
		'\x41', '\x2', '\x2', '\x244', '\x245', '\b', '\x1C', '\x1', '\x2', '\x245', 
		'\x24B', '\x3', '\x2', '\x2', '\x2', '\x246', '\x247', '\f', '\r', '\x2', 
		'\x2', '\x247', '\x248', '\a', '*', '\x2', '\x2', '\x248', '\x249', '\a', 
		'R', '\x2', '\x2', '\x249', '\x24B', '\b', '\x1C', '\x1', '\x2', '\x24A', 
		'\x225', '\x3', '\x2', '\x2', '\x2', '\x24A', '\x22A', '\x3', '\x2', '\x2', 
		'\x2', '\x24A', '\x22F', '\x3', '\x2', '\x2', '\x2', '\x24A', '\x234', 
		'\x3', '\x2', '\x2', '\x2', '\x24A', '\x239', '\x3', '\x2', '\x2', '\x2', 
		'\x24A', '\x240', '\x3', '\x2', '\x2', '\x2', '\x24A', '\x246', '\x3', 
		'\x2', '\x2', '\x2', '\x24B', '\x24E', '\x3', '\x2', '\x2', '\x2', '\x24C', 
		'\x24A', '\x3', '\x2', '\x2', '\x2', '\x24C', '\x24D', '\x3', '\x2', '\x2', 
		'\x2', '\x24D', '\x37', '\x3', '\x2', '\x2', '\x2', '\x24E', '\x24C', 
		'\x3', '\x2', '\x2', '\x2', '\x24F', '\x250', '\a', 'R', '\x2', '\x2', 
		'\x250', '\x251', '\b', '\x1D', '\x1', '\x2', '\x251', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x252', '\x253', '\a', 'S', '\x2', '\x2', '\x253', 
		'\x25D', '\b', '\x1E', '\x1', '\x2', '\x254', '\x255', '\a', 'T', '\x2', 
		'\x2', '\x255', '\x25D', '\b', '\x1E', '\x1', '\x2', '\x256', '\x257', 
		'\a', 'U', '\x2', '\x2', '\x257', '\x25D', '\b', '\x1E', '\x1', '\x2', 
		'\x258', '\x259', '\a', 'V', '\x2', '\x2', '\x259', '\x25D', '\b', '\x1E', 
		'\x1', '\x2', '\x25A', '\x25B', '\a', 'W', '\x2', '\x2', '\x25B', '\x25D', 
		'\b', '\x1E', '\x1', '\x2', '\x25C', '\x252', '\x3', '\x2', '\x2', '\x2', 
		'\x25C', '\x254', '\x3', '\x2', '\x2', '\x2', '\x25C', '\x256', '\x3', 
		'\x2', '\x2', '\x2', '\x25C', '\x258', '\x3', '\x2', '\x2', '\x2', '\x25C', 
		'\x25A', '\x3', '\x2', '\x2', '\x2', '\x25D', ';', '\x3', '\x2', '\x2', 
		'\x2', '+', '\x41', 'I', 'M', 'T', '\x66', 'x', '\x85', '\x8A', '\x94', 
		'\xA0', '\xA7', '\xB2', '\xB4', '\xC4', '\xD1', '\xD6', '\xDD', '\xEC', 
		'\xEF', '\xFB', '\x10B', '\x121', '\x12B', '\x138', '\x147', '\x151', 
		'\x165', '\x179', '\x17C', '\x18A', '\x18C', '\x198', '\x1A3', '\x1A5', 
		'\x1D4', '\x1EB', '\x1FB', '\x223', '\x24A', '\x24C', '\x25C',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}

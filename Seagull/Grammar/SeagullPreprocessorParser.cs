//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar/SeagullPreprocessorParser.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class SeagullPreprocessorParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SHARP=1, VOID=2, INT=3, CHAR=4, DOUBLE=5, STRING=6, STRUCT=7, LONG=8, 
		BYTE=9, ENUM=10, LAMBDA=11, CLASS=12, VAR=13, NULL=14, PTR=15, ANY=16, 
		IF=17, ELSE=18, WHILE=19, FOR=20, IN=21, SWITCH=22, CASE=23, BREAK=24, 
		CONTINUE=25, NEW=26, DELETE=27, RETURN=28, PRINT=29, READ=30, ASSERT=31, 
		DELAY=32, PUBLIC=33, PROTECTED=34, PRIVATE=35, FRIEND=36, NULLABLE=37, 
		CONST=38, OVERRIDE=39, LOCKED=40, ABSTRACT=41, LINK=42, IMPORT=43, NAMESPACE=44, 
		OWNED=45, IS=46, DEFAULT=47, DOT=48, COMMA=49, COL=50, SEMI_COL=51, ASSIGN=52, 
		STAR=53, SLASH=54, PERCENT=55, ARROW=56, QUESTION=57, PLUS=58, MINUS=59, 
		ADDRESS=60, PLUS_PLUS=61, MINUS_MINUS=62, ASSIGN_MUL=63, ASSIGN_DIV=64, 
		ASSIGN_MOD=65, ASSIGN_SUM=66, ASSIGN_SUB=67, NOT=68, AND=69, OR=70, L_BRACKET=71, 
		R_BRACKET=72, L_PAR=73, R_PAR=74, L_CURL=75, R_CURL=76, BIT_AND=77, BIT_OR=78, 
		BIT_XOR=79, BIT_NOT=80, BIT_RIGHT=81, BIT_LEFT=82, EQUAL=83, NOT_EQUAL=84, 
		LESS_THAN=85, GREATER_THAN=86, LESS_EQ_THAN=87, GREATER_EQ_THAN=88, BOOLEAN_CONSTANT=89, 
		INT_CONSTANT=90, REAL_CONSTANT=91, CHAR_CONSTANT=92, STRING_CONSTANT=93, 
		ID=94, SL_COMMENT=95, ML_COMMENT=96, BLANKS=97, DIR_DEFINE=98, DIR_IF=99, 
		DIR_ELIF=100, DIR_ELSE=101, DIR_WHITESPACE=102, DIR_ML_COMMENT=103, DIR_NEWLINE=104;
	public const int
		RULE_preprocessorDirective = 0, RULE_preprocessorExpression = 1;
	public static readonly string[] ruleNames = {
		"preprocessorDirective", "preprocessorExpression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'#'", "'void'", "'int'", "'char'", "'double'", "'string'", "'struct'", 
		"'long'", "'byte'", "'enum'", "'lambda'", "'class'", "'var'", "'null'", 
		"'ptr'", "'any'", null, null, "'while'", "'for'", "'in'", "'switch'", 
		"'case'", "'break'", "'continue'", "'new'", "'delete'", "'return'", "'print'", 
		"'read'", "'assert'", "'delay'", "'public'", "'protected'", "'private'", 
		"'friend'", "'nullable'", "'const'", "'override'", "'locked'", "'abstract'", 
		"'link'", "'import'", "'namespace'", "'owned'", "'is'", "'default'", "'.'", 
		"','", "':'", "';'", "'='", "'*'", "'/'", "'%'", "'->'", "'?'", "'+'", 
		"'-'", "'@'", "'++'", "'--'", "'*='", "'/='", "'%='", "'+='", "'-='", 
		"'!'", "'&&'", "'||'", "'['", "']'", "'('", "')'", "'{'", "'}'", "'&'", 
		"'|'", "'^'", "'~'", "'>>'", "'<<'", "'=='", "'!='", "'<'", "'>'", "'<='", 
		"'>='", null, null, null, null, null, null, null, null, null, "'define'", 
		null, "'elif'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SHARP", "VOID", "INT", "CHAR", "DOUBLE", "STRING", "STRUCT", "LONG", 
		"BYTE", "ENUM", "LAMBDA", "CLASS", "VAR", "NULL", "PTR", "ANY", "IF", 
		"ELSE", "WHILE", "FOR", "IN", "SWITCH", "CASE", "BREAK", "CONTINUE", "NEW", 
		"DELETE", "RETURN", "PRINT", "READ", "ASSERT", "DELAY", "PUBLIC", "PROTECTED", 
		"PRIVATE", "FRIEND", "NULLABLE", "CONST", "OVERRIDE", "LOCKED", "ABSTRACT", 
		"LINK", "IMPORT", "NAMESPACE", "OWNED", "IS", "DEFAULT", "DOT", "COMMA", 
		"COL", "SEMI_COL", "ASSIGN", "STAR", "SLASH", "PERCENT", "ARROW", "QUESTION", 
		"PLUS", "MINUS", "ADDRESS", "PLUS_PLUS", "MINUS_MINUS", "ASSIGN_MUL", 
		"ASSIGN_DIV", "ASSIGN_MOD", "ASSIGN_SUM", "ASSIGN_SUB", "NOT", "AND", 
		"OR", "L_BRACKET", "R_BRACKET", "L_PAR", "R_PAR", "L_CURL", "R_CURL", 
		"BIT_AND", "BIT_OR", "BIT_XOR", "BIT_NOT", "BIT_RIGHT", "BIT_LEFT", "EQUAL", 
		"NOT_EQUAL", "LESS_THAN", "GREATER_THAN", "LESS_EQ_THAN", "GREATER_EQ_THAN", 
		"BOOLEAN_CONSTANT", "INT_CONSTANT", "REAL_CONSTANT", "CHAR_CONSTANT", 
		"STRING_CONSTANT", "ID", "SL_COMMENT", "ML_COMMENT", "BLANKS", "DIR_DEFINE", 
		"DIR_IF", "DIR_ELIF", "DIR_ELSE", "DIR_WHITESPACE", "DIR_ML_COMMENT", 
		"DIR_NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SeagullPreprocessorParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SeagullPreprocessorParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SeagullPreprocessorParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SeagullPreprocessorParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class PreprocessorDirectiveContext : ParserRuleContext {
		public ITerminalNode DIR_DEFINE() { return GetToken(SeagullPreprocessorParser.DIR_DEFINE, 0); }
		public ITerminalNode ID() { return GetToken(SeagullPreprocessorParser.ID, 0); }
		public ITerminalNode DIR_IF() { return GetToken(SeagullPreprocessorParser.DIR_IF, 0); }
		public PreprocessorExpressionContext preprocessorExpression() {
			return GetRuleContext<PreprocessorExpressionContext>(0);
		}
		public PreprocessorDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessorDirective; } }
	}

	[RuleVersion(0)]
	public PreprocessorDirectiveContext preprocessorDirective() {
		PreprocessorDirectiveContext _localctx = new PreprocessorDirectiveContext(Context, State);
		EnterRule(_localctx, 0, RULE_preprocessorDirective);
		try {
			State = 8;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DIR_DEFINE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4; Match(DIR_DEFINE);
				State = 5; Match(ID);
				}
				break;
			case DIR_IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6; Match(DIR_IF);
				State = 7; preprocessorExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessorExpressionContext : ParserRuleContext {
		public ITerminalNode BOOLEAN_CONSTANT() { return GetToken(SeagullPreprocessorParser.BOOLEAN_CONSTANT, 0); }
		public PreprocessorExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessorExpression; } }
	}

	[RuleVersion(0)]
	public PreprocessorExpressionContext preprocessorExpression() {
		PreprocessorExpressionContext _localctx = new PreprocessorExpressionContext(Context, State);
		EnterRule(_localctx, 2, RULE_preprocessorExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10; Match(BOOLEAN_CONSTANT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'j', '\xF', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', 
		'\x2', '\v', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x2', 
		'\x2', '\x4', '\x2', '\x4', '\x2', '\x2', '\x2', '\r', '\x2', '\n', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\f', '\x3', '\x2', '\x2', '\x2', '\x6', '\a', 
		'\a', '\x64', '\x2', '\x2', '\a', '\v', '\a', '`', '\x2', '\x2', '\b', 
		'\t', '\a', '\x65', '\x2', '\x2', '\t', '\v', '\x5', '\x4', '\x3', '\x2', 
		'\n', '\x6', '\x3', '\x2', '\x2', '\x2', '\n', '\b', '\x3', '\x2', '\x2', 
		'\x2', '\v', '\x3', '\x3', '\x2', '\x2', '\x2', '\f', '\r', '\a', '[', 
		'\x2', '\x2', '\r', '\x5', '\x3', '\x2', '\x2', '\x2', '\x3', '\n',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}

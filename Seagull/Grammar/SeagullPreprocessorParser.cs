//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar/SeagullPreprocessorParser.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

namespace Seagull.Grammar
{
	[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
	[System.CLSCompliant(false)]
	public partial class SeagullPreprocessorParser : Parser {
		protected static DFA[] decisionToDFA;
		protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
		public const int
			SHARP=1, VOID=2, INT=3, CHAR=4, DOUBLE=5, STRING=6, STRUCT=7, LONG=8, 
			BYTE=9, ENUM=10, LAMBDA=11, CLASS=12, VAR=13, NULL=14, PTR=15, ANY=16, 
			TRUE=17, FALSE=18, IF=19, ELSE=20, WHILE=21, FOR=22, IN=23, SWITCH=24, 
			CASE=25, BREAK=26, CONTINUE=27, NEW=28, DELETE=29, RETURN=30, PRINT=31, 
			READ=32, ASSERT=33, DELAY=34, PUBLIC=35, PROTECTED=36, PRIVATE=37, FRIEND=38, 
			NULLABLE=39, CONST=40, OVERRIDE=41, LOCKED=42, ABSTRACT=43, LOAD=44, IMPORT=45, 
			NAMESPACE=46, OWNED=47, IS=48, DEFAULT=49, DOT=50, COMMA=51, COL=52, SEMI_COL=53, 
			ASSIGN=54, STAR=55, SLASH=56, PERCENT=57, ARROW=58, QUESTION=59, PLUS=60, 
			MINUS=61, ADDRESS=62, PLUS_PLUS=63, MINUS_MINUS=64, ASSIGN_MUL=65, ASSIGN_DIV=66, 
			ASSIGN_MOD=67, ASSIGN_SUM=68, ASSIGN_SUB=69, NOT=70, AND=71, OR=72, L_BRACKET=73, 
			R_BRACKET=74, L_PAR=75, R_PAR=76, L_CURL=77, R_CURL=78, BIT_AND=79, BIT_OR=80, 
			BIT_XOR=81, BIT_NOT=82, BIT_RIGHT=83, BIT_LEFT=84, EQUAL=85, NOT_EQUAL=86, 
			LESS_THAN=87, GREATER_THAN=88, LESS_EQ_THAN=89, GREATER_EQ_THAN=90, ID=91, 
			INT_CONSTANT=92, REAL_CONSTANT=93, CHAR_CONSTANT=94, STRING_CONSTANT=95, 
			BOOLEAN_CONSTANT=96, SL_COMMENT=97, ML_COMMENT=98, BLANKS=99, DIR_DEFINE=100, 
			DIR_IF=101, DIR_ELIF=102, DIR_ELSE=103, DIR_WHITESPACE=104, DIR_ML_COMMENT=105, 
			DIR_NEWLINE=106;
		public const int
			RULE_preprocessorDirective = 0, RULE_preprocessorExpression = 1;
		public static readonly string[] ruleNames = {
			"preprocessorDirective", "preprocessorExpression"
		};

		private static readonly string[] _LiteralNames = {
			null, "'#'", "'void'", "'int'", "'char'", "'double'", "'string'", "'struct'", 
			"'long'", "'byte'", "'enum'", "'lambda'", "'class'", "'var'", "'null'", 
			"'ptr'", "'any'", "'true'", "'false'", null, null, "'while'", "'for'", 
			"'in'", "'switch'", "'case'", "'break'", "'continue'", "'new'", "'delete'", 
			"'return'", "'print'", "'read'", "'assert'", "'delay'", "'public'", "'protected'", 
			"'private'", "'friend'", "'nullable'", "'const'", "'override'", "'locked'", 
			"'abstract'", "'load'", "'import'", "'namespace'", "'owned'", "'is'", 
			"'default'", "'.'", "','", "':'", "';'", "'='", "'*'", "'/'", "'%'", "'->'", 
			"'?'", "'+'", "'-'", "'@'", "'++'", "'--'", "'*='", "'/='", "'%='", "'+='", 
			"'-='", "'!'", "'&&'", "'||'", "'['", "']'", "'('", "')'", "'{'", "'}'", 
			"'&'", "'|'", "'^'", "'~'", "'>>'", "'<<'", "'=='", "'!='", "'<'", "'>'", 
			"'<='", "'>='", null, null, null, null, null, null, null, null, null, 
			"'define'", null, "'elif'"
		};
		private static readonly string[] _SymbolicNames = {
			null, "SHARP", "VOID", "INT", "CHAR", "DOUBLE", "STRING", "STRUCT", "LONG", 
			"BYTE", "ENUM", "LAMBDA", "CLASS", "VAR", "NULL", "PTR", "ANY", "TRUE", 
			"FALSE", "IF", "ELSE", "WHILE", "FOR", "IN", "SWITCH", "CASE", "BREAK", 
			"CONTINUE", "NEW", "DELETE", "RETURN", "PRINT", "READ", "ASSERT", "DELAY", 
			"PUBLIC", "PROTECTED", "PRIVATE", "FRIEND", "NULLABLE", "CONST", "OVERRIDE", 
			"LOCKED", "ABSTRACT", "LOAD", "IMPORT", "NAMESPACE", "OWNED", "IS", "DEFAULT", 
			"DOT", "COMMA", "COL", "SEMI_COL", "ASSIGN", "STAR", "SLASH", "PERCENT", 
			"ARROW", "QUESTION", "PLUS", "MINUS", "ADDRESS", "PLUS_PLUS", "MINUS_MINUS", 
			"ASSIGN_MUL", "ASSIGN_DIV", "ASSIGN_MOD", "ASSIGN_SUM", "ASSIGN_SUB", 
			"NOT", "AND", "OR", "L_BRACKET", "R_BRACKET", "L_PAR", "R_PAR", "L_CURL", 
			"R_CURL", "BIT_AND", "BIT_OR", "BIT_XOR", "BIT_NOT", "BIT_RIGHT", "BIT_LEFT", 
			"EQUAL", "NOT_EQUAL", "LESS_THAN", "GREATER_THAN", "LESS_EQ_THAN", "GREATER_EQ_THAN", 
			"ID", "INT_CONSTANT", "REAL_CONSTANT", "CHAR_CONSTANT", "STRING_CONSTANT", 
			"BOOLEAN_CONSTANT", "SL_COMMENT", "ML_COMMENT", "BLANKS", "DIR_DEFINE", 
			"DIR_IF", "DIR_ELIF", "DIR_ELSE", "DIR_WHITESPACE", "DIR_ML_COMMENT", 
			"DIR_NEWLINE"
		};
		public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

		[NotNull]
		public override IVocabulary Vocabulary
		{
			get
			{
				return DefaultVocabulary;
			}
		}

		public override string GrammarFileName { get { return "SeagullPreprocessorParser.g4"; } }

		public override string[] RuleNames { get { return ruleNames; } }

		public override string SerializedAtn { get { return new string(_serializedATN); } }

		static SeagullPreprocessorParser() {
			decisionToDFA = new DFA[_ATN.NumberOfDecisions];
			for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
				decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
			}
		}

		public SeagullPreprocessorParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SeagullPreprocessorParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
			: base(input, output, errorOutput)
		{
			Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
		}

		public partial class PreprocessorDirectiveContext : ParserRuleContext {
			public ITerminalNode DIR_DEFINE() { return GetToken(SeagullPreprocessorParser.DIR_DEFINE, 0); }
			public ITerminalNode ID() { return GetToken(SeagullPreprocessorParser.ID, 0); }
			public ITerminalNode DIR_IF() { return GetToken(SeagullPreprocessorParser.DIR_IF, 0); }
			public PreprocessorExpressionContext preprocessorExpression() {
				return GetRuleContext<PreprocessorExpressionContext>(0);
			}
			public PreprocessorDirectiveContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_preprocessorDirective; } }
		}

		[RuleVersion(0)]
		public PreprocessorDirectiveContext preprocessorDirective() {
			PreprocessorDirectiveContext _localctx = new PreprocessorDirectiveContext(Context, State);
			EnterRule(_localctx, 0, RULE_preprocessorDirective);
			try {
				State = 8;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
					case DIR_DEFINE:
						EnterOuterAlt(_localctx, 1);
					{
						State = 4; Match(DIR_DEFINE);
						State = 5; Match(ID);
					}
						break;
					case DIR_IF:
						EnterOuterAlt(_localctx, 2);
					{
						State = 6; Match(DIR_IF);
						State = 7; preprocessorExpression();
					}
						break;
					default:
						throw new NoViableAltException(this);
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class PreprocessorExpressionContext : ParserRuleContext {
			public ITerminalNode TRUE() { return GetToken(SeagullPreprocessorParser.TRUE, 0); }
			public ITerminalNode FALSE() { return GetToken(SeagullPreprocessorParser.FALSE, 0); }
			public PreprocessorExpressionContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_preprocessorExpression; } }
		}

		[RuleVersion(0)]
		public PreprocessorExpressionContext preprocessorExpression() {
			PreprocessorExpressionContext _localctx = new PreprocessorExpressionContext(Context, State);
			EnterRule(_localctx, 2, RULE_preprocessorExpression);
			int _la;
			try {
				EnterOuterAlt(_localctx, 1);
				{
					State = 10;
					_la = TokenStream.LA(1);
					if ( !(_la==TRUE || _la==FALSE) ) {
						ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
						Consume();
					}
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		private static char[] _serializedATN = {
			'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
			'\x5964', '\x3', 'l', '\xF', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
			'\t', '\x3', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', 
			'\x2', '\v', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x2', 
			'\x2', '\x4', '\x2', '\x4', '\x2', '\x3', '\x3', '\x2', '\x13', '\x14', 
			'\x2', '\r', '\x2', '\n', '\x3', '\x2', '\x2', '\x2', '\x4', '\f', '\x3', 
			'\x2', '\x2', '\x2', '\x6', '\a', '\a', '\x66', '\x2', '\x2', '\a', '\v', 
			'\a', ']', '\x2', '\x2', '\b', '\t', '\a', 'g', '\x2', '\x2', '\t', '\v', 
			'\x5', '\x4', '\x3', '\x2', '\n', '\x6', '\x3', '\x2', '\x2', '\x2', '\n', 
			'\b', '\x3', '\x2', '\x2', '\x2', '\v', '\x3', '\x3', '\x2', '\x2', '\x2', 
			'\f', '\r', '\t', '\x2', '\x2', '\x2', '\r', '\x5', '\x3', '\x2', '\x2', 
			'\x2', '\x3', '\n',
		};

		public static readonly ATN _ATN =
			new ATNDeserializer().Deserialize(_serializedATN);


	}
}

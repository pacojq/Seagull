//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar/SeagullParser.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using System;
using System.Collections.Generic;
using System.IO;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using Seagull.AST;
using Seagull.AST.AccessModifiers;
using Seagull.AST.Expressions;
using Seagull.AST.Expressions.Binary;
using Seagull.AST.Expressions.Increments;
using Seagull.AST.Expressions.Literals;
using Seagull.AST.Statements;
using Seagull.AST.Statements.Definitions;
using Seagull.AST.Statements.Definitions.Namespaces;
using Seagull.AST.Types;
using Seagull.AST.Types.Namespaces;
using Seagull.Semantics.Symbols;
using DFA = Antlr4.Runtime.Dfa.DFA;

namespace Seagull.Grammar
{
	[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
	[System.CLSCompliant(false)]
	public partial class SeagullParser : Parser {
		protected static DFA[] decisionToDFA;
		protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
		public const int
			SHARP=1, VOID=2, INT=3, CHAR=4, DOUBLE=5, STRING=6, STRUCT=7, LONG=8, 
			BYTE=9, ENUM=10, LAMBDA=11, CLASS=12, VAR=13, NULL=14, PTR=15, ANY=16, 
			TRUE=17, FALSE=18, IF=19, ELSE=20, WHILE=21, FOR=22, IN=23, SWITCH=24, 
			CASE=25, BREAK=26, CONTINUE=27, NEW=28, DELETE=29, RETURN=30, PRINT=31, 
			READ=32, ASSERT=33, DELAY=34, PUBLIC=35, PROTECTED=36, PRIVATE=37, FRIEND=38, 
			NULLABLE=39, CONST=40, OVERRIDE=41, LOCKED=42, ABSTRACT=43, LOAD=44, IMPORT=45, 
			NAMESPACE=46, OWNED=47, IS=48, DEFAULT=49, DOT=50, COMMA=51, COL=52, SEMI_COL=53, 
			ASSIGN=54, STAR=55, SLASH=56, PERCENT=57, ARROW=58, QUESTION=59, PLUS=60, 
			MINUS=61, ADDRESS=62, PLUS_PLUS=63, MINUS_MINUS=64, ASSIGN_MUL=65, ASSIGN_DIV=66, 
			ASSIGN_MOD=67, ASSIGN_SUM=68, ASSIGN_SUB=69, NOT=70, AND=71, OR=72, L_BRACKET=73, 
			R_BRACKET=74, L_PAR=75, R_PAR=76, L_CURL=77, R_CURL=78, BIT_AND=79, BIT_OR=80, 
			BIT_XOR=81, BIT_NOT=82, BIT_RIGHT=83, BIT_LEFT=84, EQUAL=85, NOT_EQUAL=86, 
			LESS_THAN=87, GREATER_THAN=88, LESS_EQ_THAN=89, GREATER_EQ_THAN=90, ID=91, 
			INT_CONSTANT=92, REAL_CONSTANT=93, CHAR_CONSTANT=94, STRING_CONSTANT=95, 
			BOOLEAN_CONSTANT=96, SL_COMMENT=97, ML_COMMENT=98, BLANKS=99, DIR_DEFINE=100, 
			DIR_IF=101, DIR_ELIF=102, DIR_ELSE=103, DIR_WHITESPACE=104, DIR_ML_COMMENT=105, 
			DIR_NEWLINE=106;
		public const int
			RULE_program = 0, RULE_load = 1, RULE_imp = 2, RULE_typeOrVoid = 3, RULE_type = 4, 
			RULE_userDefinedType = 5, RULE_namespaceType = 6, RULE_functionType = 7, 
			RULE_parameters = 8, RULE_structType = 9, RULE_enumType = 10, RULE_enumElement = 11, 
			RULE_primitive = 12, RULE_voidType = 13, RULE_accessModifier = 14, RULE_definition = 15, 
			RULE_namespaceDef = 16, RULE_variableDef = 17, RULE_variableDefIds = 18, 
			RULE_functionDef = 19, RULE_structDef = 20, RULE_enumDef = 21, RULE_lambda = 22, 
			RULE_statement = 23, RULE_readPrint = 24, RULE_funcInvocation = 25, RULE_fnBlock = 26, 
			RULE_fnBlockContent = 27, RULE_expression = 28, RULE_variable = 29, RULE_literal = 30;
		public static readonly string[] ruleNames = {
			"program", "load", "imp", "typeOrVoid", "type", "userDefinedType", "namespaceType", 
			"functionType", "parameters", "structType", "enumType", "enumElement", 
			"primitive", "voidType", "accessModifier", "definition", "namespaceDef", 
			"variableDef", "variableDefIds", "functionDef", "structDef", "enumDef", 
			"lambda", "statement", "readPrint", "funcInvocation", "fnBlock", "fnBlockContent", 
			"expression", "variable", "literal"
		};

		private static readonly string[] _LiteralNames = {
			null, "'#'", "'void'", "'int'", "'char'", "'double'", "'string'", "'struct'", 
			"'long'", "'byte'", "'enum'", "'lambda'", "'class'", "'var'", "'null'", 
			"'ptr'", "'any'", "'true'", "'false'", null, null, "'while'", "'for'", 
			"'in'", "'switch'", "'case'", "'break'", "'continue'", "'new'", "'delete'", 
			"'return'", "'print'", "'read'", "'assert'", "'delay'", "'public'", "'protected'", 
			"'private'", "'friend'", "'nullable'", "'const'", "'override'", "'locked'", 
			"'abstract'", "'load'", "'import'", "'namespace'", "'owned'", "'is'", 
			"'default'", "'.'", "','", "':'", "';'", "'='", "'*'", "'/'", "'%'", "'->'", 
			"'?'", "'+'", "'-'", "'@'", "'++'", "'--'", "'*='", "'/='", "'%='", "'+='", 
			"'-='", "'!'", "'&&'", "'||'", "'['", "']'", "'('", "')'", "'{'", "'}'", 
			"'&'", "'|'", "'^'", "'~'", "'>>'", "'<<'", "'=='", "'!='", "'<'", "'>'", 
			"'<='", "'>='", null, null, null, null, null, null, null, null, null, 
			"'define'", null, "'elif'"
		};
		private static readonly string[] _SymbolicNames = {
			null, "SHARP", "VOID", "INT", "CHAR", "DOUBLE", "STRING", "STRUCT", "LONG", 
			"BYTE", "ENUM", "LAMBDA", "CLASS", "VAR", "NULL", "PTR", "ANY", "TRUE", 
			"FALSE", "IF", "ELSE", "WHILE", "FOR", "IN", "SWITCH", "CASE", "BREAK", 
			"CONTINUE", "NEW", "DELETE", "RETURN", "PRINT", "READ", "ASSERT", "DELAY", 
			"PUBLIC", "PROTECTED", "PRIVATE", "FRIEND", "NULLABLE", "CONST", "OVERRIDE", 
			"LOCKED", "ABSTRACT", "LOAD", "IMPORT", "NAMESPACE", "OWNED", "IS", "DEFAULT", 
			"DOT", "COMMA", "COL", "SEMI_COL", "ASSIGN", "STAR", "SLASH", "PERCENT", 
			"ARROW", "QUESTION", "PLUS", "MINUS", "ADDRESS", "PLUS_PLUS", "MINUS_MINUS", 
			"ASSIGN_MUL", "ASSIGN_DIV", "ASSIGN_MOD", "ASSIGN_SUM", "ASSIGN_SUB", 
			"NOT", "AND", "OR", "L_BRACKET", "R_BRACKET", "L_PAR", "R_PAR", "L_CURL", 
			"R_CURL", "BIT_AND", "BIT_OR", "BIT_XOR", "BIT_NOT", "BIT_RIGHT", "BIT_LEFT", 
			"EQUAL", "NOT_EQUAL", "LESS_THAN", "GREATER_THAN", "LESS_EQ_THAN", "GREATER_EQ_THAN", 
			"ID", "INT_CONSTANT", "REAL_CONSTANT", "CHAR_CONSTANT", "STRING_CONSTANT", 
			"BOOLEAN_CONSTANT", "SL_COMMENT", "ML_COMMENT", "BLANKS", "DIR_DEFINE", 
			"DIR_IF", "DIR_ELIF", "DIR_ELSE", "DIR_WHITESPACE", "DIR_ML_COMMENT", 
			"DIR_NEWLINE"
		};
		public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

		[NotNull]
		public override IVocabulary Vocabulary
		{
			get
			{
				return DefaultVocabulary;
			}
		}

		public override string GrammarFileName { get { return "SeagullParser.g4"; } }

		public override string[] RuleNames { get { return ruleNames; } }

		public override string SerializedAtn { get { return new string(_serializedATN); } }

		static SeagullParser() {
			decisionToDFA = new DFA[_ATN.NumberOfDecisions];
			for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
				decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
			}
		}

		public SeagullParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SeagullParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
			: base(input, output, errorOutput)
		{
			Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
		}

		public partial class ProgramContext : ParserRuleContext {
			public Program Ast;
			public List<string> Loads = new List<string>();
			public List<string> Imports = new List<string>();
			public List<IDefinition> Def = new List<IDefinition>();
			public LoadContext l;
			public ImpContext i;
			public NamespaceDefContext n;
			public NamespaceDefContext _namespaceDef;
			public DefinitionContext d;
			public ITerminalNode Eof() { return GetToken(SeagullParser.Eof, 0); }
			public LoadContext[] load() {
				return GetRuleContexts<LoadContext>();
			}
			public LoadContext load(int i) {
				return GetRuleContext<LoadContext>(i);
			}
			public ImpContext[] imp() {
				return GetRuleContexts<ImpContext>();
			}
			public ImpContext imp(int i) {
				return GetRuleContext<ImpContext>(i);
			}
			public NamespaceDefContext[] namespaceDef() {
				return GetRuleContexts<NamespaceDefContext>();
			}
			public NamespaceDefContext namespaceDef(int i) {
				return GetRuleContext<NamespaceDefContext>(i);
			}
			public DefinitionContext[] definition() {
				return GetRuleContexts<DefinitionContext>();
			}
			public DefinitionContext definition(int i) {
				return GetRuleContext<DefinitionContext>(i);
			}
			public ProgramContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_program; } }
		}

		[RuleVersion(0)]
		public ProgramContext program() {
			ProgramContext _localctx = new ProgramContext(Context, State);
			EnterRule(_localctx, 0, RULE_program);
			int _la;
			try {
				EnterOuterAlt(_localctx, 1);
				{
					State = 67;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==LOAD) {
						{
							{
								State = 62; _localctx.l = load();
								_localctx.Loads.Add(_localctx.l.File); 
							}
						}
						State = 69;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 75;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==IMPORT) {
						{
							{
								State = 70; _localctx.i = imp();
								_localctx.Imports.Add(_localctx.i.Namespace); 
							}
						}
						State = 77;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 86;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VOID) | (1L << INT) | (1L << CHAR) | (1L << DOUBLE) | (1L << STRING) | (1L << STRUCT) | (1L << LONG) | (1L << BYTE) | (1L << ENUM) | (1L << PTR) | (1L << NAMESPACE))) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (L_PAR - 75)) | (1L << (L_CURL - 75)) | (1L << (ID - 75)))) != 0)) {
						{
							State = 84;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
								case NAMESPACE:
								{
									{
										State = 78; _localctx.n = _localctx._namespaceDef = namespaceDef();
										_localctx.Def.Add(_localctx._namespaceDef.Ast); 
									}
								}
									break;
								case VOID:
								case INT:
								case CHAR:
								case DOUBLE:
								case STRING:
								case STRUCT:
								case LONG:
								case BYTE:
								case ENUM:
								case PTR:
								case L_PAR:
								case L_CURL:
								case ID:
								{
									{
										State = 81; _localctx.d = definition();
										_localctx.Def.AddRange(_localctx.d.Ast); 
									}
								}
									break;
								default:
									throw new NoViableAltException(this);
							}
						}
						State = 88;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 89; Match(Eof);
					_localctx.Ast =  new Program(0, 0, _localctx.Loads, _localctx.Imports, _localctx.Def); 
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class LoadContext : ParserRuleContext {
			public string File;
			public IToken p;
			public ITerminalNode LOAD() { return GetToken(SeagullParser.LOAD, 0); }
			public ITerminalNode STRING_CONSTANT() { return GetToken(SeagullParser.STRING_CONSTANT, 0); }
			public LoadContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_load; } }
		}

		[RuleVersion(0)]
		public LoadContext load() {
			LoadContext _localctx = new LoadContext(Context, State);
			EnterRule(_localctx, 2, RULE_load);
			try {
				EnterOuterAlt(_localctx, 1);
				{
					State = 92; Match(LOAD);
					State = 93; _localctx.p = Match(STRING_CONSTANT);
					_localctx.File =  (_localctx.p!=null?_localctx.p.Text:null); 
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class ImpContext : ParserRuleContext {
			public string Namespace;
			public IToken ns1;
			public IToken ns2;
			public ITerminalNode IMPORT() { return GetToken(SeagullParser.IMPORT, 0); }
			public ITerminalNode SEMI_COL() { return GetToken(SeagullParser.SEMI_COL, 0); }
			public ITerminalNode[] ID() { return GetTokens(SeagullParser.ID); }
			public ITerminalNode ID(int i) {
				return GetToken(SeagullParser.ID, i);
			}
			public ITerminalNode[] DOT() { return GetTokens(SeagullParser.DOT); }
			public ITerminalNode DOT(int i) {
				return GetToken(SeagullParser.DOT, i);
			}
			public ImpContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_imp; } }
		}

		[RuleVersion(0)]
		public ImpContext imp() {
			ImpContext _localctx = new ImpContext(Context, State);
			EnterRule(_localctx, 4, RULE_imp);
			int _la;
			try {
				EnterOuterAlt(_localctx, 1);
				{
					State = 96; Match(IMPORT);
					State = 97; _localctx.ns1 = Match(ID);
					_localctx.Namespace =  _localctx.ns1.GetText(); 
					State = 104;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==DOT) {
						{
							{
								State = 99; Match(DOT);
								State = 100; _localctx.ns2 = Match(ID);
								_localctx.Namespace += "." + _localctx.ns2.GetText(); 
							}
						}
						State = 106;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 107; Match(SEMI_COL);
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class TypeOrVoidContext : ParserRuleContext {
			public IType Ast;
			public TypeContext _type;
			public VoidTypeContext _voidType;
			public TypeContext type() {
				return GetRuleContext<TypeContext>(0);
			}
			public VoidTypeContext voidType() {
				return GetRuleContext<VoidTypeContext>(0);
			}
			public TypeOrVoidContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_typeOrVoid; } }
		}

		[RuleVersion(0)]
		public TypeOrVoidContext typeOrVoid() {
			TypeOrVoidContext _localctx = new TypeOrVoidContext(Context, State);
			EnterRule(_localctx, 6, RULE_typeOrVoid);
			try {
				State = 115;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
					case INT:
					case CHAR:
					case DOUBLE:
					case STRING:
					case LONG:
					case BYTE:
					case PTR:
					case L_PAR:
					case L_CURL:
					case ID:
						EnterOuterAlt(_localctx, 1);
					{
						State = 109; _localctx._type = type(0);
						_localctx.Ast =  _localctx._type.Ast; 
					}
						break;
					case VOID:
						EnterOuterAlt(_localctx, 2);
					{
						State = 112; _localctx._voidType = voidType();
						_localctx.Ast =  _localctx._voidType.Ast; 
					}
						break;
					default:
						throw new NoViableAltException(this);
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class TypeContext : ParserRuleContext {
			public IType Ast;
			public TypeContext t;
			public PrimitiveContext _primitive;
			public FunctionTypeContext _functionType;
			public StructTypeContext _structType;
			public UserDefinedTypeContext _userDefinedType;
			public IToken i;
			public IToken i2;
			public PrimitiveContext primitive() {
				return GetRuleContext<PrimitiveContext>(0);
			}
			public FunctionTypeContext functionType() {
				return GetRuleContext<FunctionTypeContext>(0);
			}
			public StructTypeContext structType() {
				return GetRuleContext<StructTypeContext>(0);
			}
			public UserDefinedTypeContext userDefinedType() {
				return GetRuleContext<UserDefinedTypeContext>(0);
			}
			public ITerminalNode[] L_BRACKET() { return GetTokens(SeagullParser.L_BRACKET); }
			public ITerminalNode L_BRACKET(int i) {
				return GetToken(SeagullParser.L_BRACKET, i);
			}
			public ITerminalNode[] R_BRACKET() { return GetTokens(SeagullParser.R_BRACKET); }
			public ITerminalNode R_BRACKET(int i) {
				return GetToken(SeagullParser.R_BRACKET, i);
			}
			public TypeContext type() {
				return GetRuleContext<TypeContext>(0);
			}
			public ITerminalNode[] INT_CONSTANT() { return GetTokens(SeagullParser.INT_CONSTANT); }
			public ITerminalNode INT_CONSTANT(int i) {
				return GetToken(SeagullParser.INT_CONSTANT, i);
			}
			public TypeContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_type; } }
		}

		[RuleVersion(0)]
		public TypeContext type() {
			return type(0);
		}

		private TypeContext type(int _p) {
			ParserRuleContext _parentctx = Context;
			int _parentState = State;
			TypeContext _localctx = new TypeContext(Context, _parentState);
			TypeContext _prevctx = _localctx;
			int _startState = 8;
			EnterRecursionRule(_localctx, 8, RULE_type, _p);
			try {
				int _alt;
				EnterOuterAlt(_localctx, 1);
				{
					State = 130;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
						case INT:
						case CHAR:
						case DOUBLE:
						case STRING:
						case LONG:
						case BYTE:
						case PTR:
						{
							State = 118; _localctx._primitive = primitive();
							_localctx.Ast =  _localctx._primitive.Ast; 
						}
							break;
						case L_PAR:
						{
							State = 121; _localctx._functionType = functionType();
							_localctx.Ast =  _localctx._functionType.Ast; 
						}
							break;
						case L_CURL:
						{
							State = 124; _localctx._structType = structType();
							_localctx.Ast =  _localctx._structType.Ast; 
						}
							break;
						case ID:
						{
							State = 127; _localctx._userDefinedType = userDefinedType();
							_localctx.Ast =  _localctx._userDefinedType.Ast; 
						}
							break;
						default:
							throw new NoViableAltException(this);
					}
					Context.Stop = TokenStream.LT(-1);
					State = 148;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							if ( ParseListeners!=null )
								TriggerExitRuleEvent();
							_prevctx = _localctx;
							{
								{
									_localctx = new TypeContext(_parentctx, _parentState);
									_localctx.t = _prevctx;
									PushNewRecursionContext(_localctx, _startState, RULE_type);
									State = 132;
									if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
									State = 133; Match(L_BRACKET);
									State = 134; _localctx.i = Match(INT_CONSTANT);
									State = 135; Match(R_BRACKET);
									_localctx.Ast =  ArrayType.BuildArray(int.Parse((_localctx.i!=null?_localctx.i.Text:null)), _localctx.t.Ast); 
									State = 143;
									ErrorHandler.Sync(this);
									_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
									while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
										if ( _alt==1 ) {
											{
												{
													State = 137; Match(L_BRACKET);
													State = 138; _localctx.i2 = Match(INT_CONSTANT);
													State = 139; Match(R_BRACKET);
													_localctx.Ast =  ArrayType.BuildArray( int.Parse((_localctx.i2!=null?_localctx.i2.Text:null)), _localctx.Ast); 
												}
											} 
										}
										State = 145;
										ErrorHandler.Sync(this);
										_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
									}
								}
							} 
						}
						State = 150;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
					}
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				UnrollRecursionContexts(_parentctx);
			}
			return _localctx;
		}

		public partial class UserDefinedTypeContext : ParserRuleContext {
			public IType Ast;
			public IToken _ID;
			public NamespaceTypeContext t;
			public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
			public ITerminalNode DOT() { return GetToken(SeagullParser.DOT, 0); }
			public NamespaceTypeContext namespaceType() {
				return GetRuleContext<NamespaceTypeContext>(0);
			}
			public UserDefinedTypeContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_userDefinedType; } }
		}

		[RuleVersion(0)]
		public UserDefinedTypeContext userDefinedType() {
			UserDefinedTypeContext _localctx = new UserDefinedTypeContext(Context, State);
			EnterRule(_localctx, 10, RULE_userDefinedType);
			try {
				State = 158;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
					case 1:
						EnterOuterAlt(_localctx, 1);
					{
						State = 151; _localctx._ID = Match(ID);
						_localctx.Ast =  new UnknownType(_localctx._ID.GetLine(), _localctx._ID.GetCol(), _localctx._ID.GetText()); 
					}
						break;
					case 2:
						EnterOuterAlt(_localctx, 2);
					{
						State = 153; _localctx.t = namespaceType(0);
						State = 154; Match(DOT);
						State = 155; _localctx._ID = Match(ID);
						_localctx.Ast =  new UnknownType(_localctx._ID.GetLine(), _localctx._ID.GetCol(), _localctx._ID.GetText(), _localctx.t.Ast); 
					}
						break;
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class NamespaceTypeContext : ParserRuleContext {
			public INamespaceType Ast;
			public NamespaceTypeContext t;
			public IToken _ID;
			public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
			public ITerminalNode DOT() { return GetToken(SeagullParser.DOT, 0); }
			public NamespaceTypeContext namespaceType() {
				return GetRuleContext<NamespaceTypeContext>(0);
			}
			public NamespaceTypeContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_namespaceType; } }
		}

		[RuleVersion(0)]
		public NamespaceTypeContext namespaceType() {
			return namespaceType(0);
		}

		private NamespaceTypeContext namespaceType(int _p) {
			ParserRuleContext _parentctx = Context;
			int _parentState = State;
			NamespaceTypeContext _localctx = new NamespaceTypeContext(Context, _parentState);
			NamespaceTypeContext _prevctx = _localctx;
			int _startState = 12;
			EnterRecursionRule(_localctx, 12, RULE_namespaceType, _p);
			try {
				int _alt;
				EnterOuterAlt(_localctx, 1);
				{
					{
						State = 161; _localctx._ID = Match(ID);
						_localctx.Ast =  NamespaceManager.Instance.AddType(_localctx._ID.GetLine(), _localctx._ID.GetCol(), _localctx._ID.GetText(), null); 
					}
					Context.Stop = TokenStream.LT(-1);
					State = 170;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							if ( ParseListeners!=null )
								TriggerExitRuleEvent();
							_prevctx = _localctx;
							{
								{
									_localctx = new NamespaceTypeContext(_parentctx, _parentState);
									_localctx.t = _prevctx;
									PushNewRecursionContext(_localctx, _startState, RULE_namespaceType);
									State = 164;
									if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
									State = 165; Match(DOT);
									State = 166; _localctx._ID = Match(ID);
									_localctx.Ast =  NamespaceManager.Instance.AddType(_localctx._ID.GetLine(), _localctx._ID.GetCol(), _localctx._ID.GetText(), _localctx.t.Ast); 
								}
							} 
						}
						State = 172;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
					}
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				UnrollRecursionContexts(_parentctx);
			}
			return _localctx;
		}

		public partial class FunctionTypeContext : ParserRuleContext {
			public FunctionType Ast;
			public List<VariableDefinition> Params = new List<VariableDefinition>();
			public IType Rt;
			public ParametersContext p;
			public IToken par;
			public TypeContext t;
			public VoidTypeContext vt;
			public ITerminalNode L_PAR() { return GetToken(SeagullParser.L_PAR, 0); }
			public ITerminalNode R_PAR() { return GetToken(SeagullParser.R_PAR, 0); }
			public ITerminalNode ARROW() { return GetToken(SeagullParser.ARROW, 0); }
			public ParametersContext parameters() {
				return GetRuleContext<ParametersContext>(0);
			}
			public TypeContext type() {
				return GetRuleContext<TypeContext>(0);
			}
			public VoidTypeContext voidType() {
				return GetRuleContext<VoidTypeContext>(0);
			}
			public FunctionTypeContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_functionType; } }
		}

		[RuleVersion(0)]
		public FunctionTypeContext functionType() {
			FunctionTypeContext _localctx = new FunctionTypeContext(Context, State);
			EnterRule(_localctx, 14, RULE_functionType);
			int _la;
			try {
				EnterOuterAlt(_localctx, 1);
				{
					State = 173; Match(L_PAR);
					State = 177;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << CHAR) | (1L << DOUBLE) | (1L << STRING) | (1L << LONG) | (1L << BYTE) | (1L << PTR))) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (L_PAR - 75)) | (1L << (L_CURL - 75)) | (1L << (ID - 75)))) != 0)) {
						{
							State = 174; _localctx.p = parameters();
							_localctx.Params =  _localctx.p.Ast;
						}
					}

					State = 179; _localctx.par = Match(R_PAR);
					_localctx.Rt = new VoidType(_localctx.par.GetLine(), _localctx.par.GetCol()); 
					State = 190;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
						case 1:
						{
							State = 181; Match(ARROW);
							State = 188;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
								case INT:
								case CHAR:
								case DOUBLE:
								case STRING:
								case LONG:
								case BYTE:
								case PTR:
								case L_PAR:
								case L_CURL:
								case ID:
								{
									{
										State = 182; _localctx.t = type(0);
										_localctx.Rt = _localctx.t.Ast; 
									}
								}
									break;
								case VOID:
								{
									{
										State = 185; _localctx.vt = voidType();
										_localctx.Rt = _localctx.vt.Ast; 
									}
								}
									break;
								default:
									throw new NoViableAltException(this);
							}
						}
							break;
					}
					_localctx.Ast =  new FunctionType(_localctx.Rt, _localctx.Params); 
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class ParametersContext : ParserRuleContext {
			public List<VariableDefinition> Ast = new List<VariableDefinition>();
			public TypeContext t1;
			public IToken id1;
			public TypeContext t2;
			public IToken id2;
			public LiteralContext l;
			public TypeContext[] type() {
				return GetRuleContexts<TypeContext>();
			}
			public TypeContext type(int i) {
				return GetRuleContext<TypeContext>(i);
			}
			public ITerminalNode[] ID() { return GetTokens(SeagullParser.ID); }
			public ITerminalNode ID(int i) {
				return GetToken(SeagullParser.ID, i);
			}
			public ITerminalNode[] COMMA() { return GetTokens(SeagullParser.COMMA); }
			public ITerminalNode COMMA(int i) {
				return GetToken(SeagullParser.COMMA, i);
			}
			public ITerminalNode[] ASSIGN() { return GetTokens(SeagullParser.ASSIGN); }
			public ITerminalNode ASSIGN(int i) {
				return GetToken(SeagullParser.ASSIGN, i);
			}
			public LiteralContext[] literal() {
				return GetRuleContexts<LiteralContext>();
			}
			public LiteralContext literal(int i) {
				return GetRuleContext<LiteralContext>(i);
			}
			public ParametersContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_parameters; } }
		}

		[RuleVersion(0)]
		public ParametersContext parameters() {
			ParametersContext _localctx = new ParametersContext(Context, State);
			EnterRule(_localctx, 16, RULE_parameters);
			int _la;
			try {
				int _alt;
				EnterOuterAlt(_localctx, 1);
				{
					State = 194; _localctx.t1 = type(0);
					State = 195; _localctx.id1 = Match(ID);
					_localctx.Ast.Add(new VariableDefinition(_localctx.id1.GetLine(), _localctx.id1.GetCol(), _localctx.id1.GetText(), _localctx.t1.Ast, null)); 
					State = 204;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
								{
									State = 197; Match(COMMA);
									State = 198; _localctx.t2 = type(0);
									State = 199; _localctx.id2 = Match(ID);
									_localctx.Ast.Add(new VariableDefinition(_localctx.id2.GetLine(), _localctx.id2.GetCol(), _localctx.id2.GetText(), _localctx.t2.Ast, null)); 
								}
							} 
						}
						State = 206;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
					}
					State = 216;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
							{
								State = 207; Match(COMMA);
								State = 208; _localctx.t2 = type(0);
								State = 209; _localctx.id2 = Match(ID);
								State = 210; Match(ASSIGN);
								State = 211; _localctx.l = literal();
								_localctx.Ast.Add(new VariableDefinition(_localctx.id2.GetLine(), _localctx.id2.GetCol(), _localctx.id2.GetText(), _localctx.t2.Ast, _localctx.l.Ast)); 
							}
						}
						State = 218;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class StructTypeContext : ParserRuleContext {
			public StructType Ast;
			public List<VariableDefinition> fields = new List<VariableDefinition>();
			public IAccessModifier access;
			public IToken c;
			public AccessModifierContext am;
			public VariableDefContext f;
			public ITerminalNode R_CURL() { return GetToken(SeagullParser.R_CURL, 0); }
			public ITerminalNode L_CURL() { return GetToken(SeagullParser.L_CURL, 0); }
			public VariableDefContext[] variableDef() {
				return GetRuleContexts<VariableDefContext>();
			}
			public VariableDefContext variableDef(int i) {
				return GetRuleContext<VariableDefContext>(i);
			}
			public AccessModifierContext[] accessModifier() {
				return GetRuleContexts<AccessModifierContext>();
			}
			public AccessModifierContext accessModifier(int i) {
				return GetRuleContext<AccessModifierContext>(i);
			}
			public StructTypeContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_structType; } }
		}

		[RuleVersion(0)]
		public StructTypeContext structType() {
			StructTypeContext _localctx = new StructTypeContext(Context, State);
			EnterRule(_localctx, 18, RULE_structType);
			int _la;
			try {
				EnterOuterAlt(_localctx, 1);
				{
					State = 219; _localctx.c = Match(L_CURL);
					State = 230;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << CHAR) | (1L << DOUBLE) | (1L << STRING) | (1L << LONG) | (1L << BYTE) | (1L << PTR) | (1L << PUBLIC) | (1L << PROTECTED) | (1L << PRIVATE))) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (L_PAR - 75)) | (1L << (L_CURL - 75)) | (1L << (ID - 75)))) != 0)) {
						{
							{
								State = 223;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PUBLIC) | (1L << PROTECTED) | (1L << PRIVATE))) != 0)) {
									{
										State = 220; _localctx.am = accessModifier();
										_localctx.access =  _localctx.am.Ast; 
									}
								}

								State = 225; _localctx.f = variableDef();
				 
								foreach (var def in _localctx.f.Ast)
								{
									if (_localctx.access != null)
										def.AccessModifier = _localctx.access;
									_localctx.fields.Add(def);
								}
								_localctx.access =  null;
				            
							}
						}
						State = 232;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 233; Match(R_CURL);
					_localctx.Ast =  new StructType(_localctx.c.GetLine(), _localctx.c.GetCol(), _localctx.fields); 
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class EnumTypeContext : ParserRuleContext {
			public IType typeOf;
			public EnumType Ast;
			public List<EnumElementDefinition> defs = new List<EnumElementDefinition>();
			public IToken curl;
			public EnumElementContext d1;
			public EnumElementContext d2;
			public ITerminalNode R_CURL() { return GetToken(SeagullParser.R_CURL, 0); }
			public ITerminalNode L_CURL() { return GetToken(SeagullParser.L_CURL, 0); }
			public EnumElementContext[] enumElement() {
				return GetRuleContexts<EnumElementContext>();
			}
			public EnumElementContext enumElement(int i) {
				return GetRuleContext<EnumElementContext>(i);
			}
			public ITerminalNode[] COMMA() { return GetTokens(SeagullParser.COMMA); }
			public ITerminalNode COMMA(int i) {
				return GetToken(SeagullParser.COMMA, i);
			}
			public EnumTypeContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
			public EnumTypeContext(ParserRuleContext parent, int invokingState, IType typeOf)
				: base(parent, invokingState)
			{
				this.typeOf = typeOf;
			}
			public override int RuleIndex { get { return RULE_enumType; } }
		}

		[RuleVersion(0)]
		public EnumTypeContext enumType(IType typeOf) {
			EnumTypeContext _localctx = new EnumTypeContext(Context, State, typeOf);
			EnterRule(_localctx, 20, RULE_enumType);
			int _la;
			try {
				EnterOuterAlt(_localctx, 1);
				{
					State = 236; _localctx.curl = Match(L_CURL);
					State = 248;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ID) {
						{
							State = 237; _localctx.d1 = enumElement(_localctx.typeOf, 0);
							_localctx.defs.Add(_localctx.d1.Ast); 
							State = 245;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==COMMA) {
								{
									{
										State = 239; Match(COMMA);
										State = 240; _localctx.d2 = enumElement(_localctx.typeOf, 0);
										_localctx.defs.Add(_localctx.d2.Ast); 
									}
								}
								State = 247;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
						}
					}

					State = 250; Match(R_CURL);
					_localctx.Ast =  new EnumType(_localctx.curl.GetLine(), _localctx.curl.GetCol(), _localctx.typeOf, _localctx.defs); 
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class EnumElementContext : ParserRuleContext {
			public IType typeOf;
			public int defaultInt;
			public EnumElementDefinition Ast;
			public IToken id;
			public ExpressionContext expr;
			public ITerminalNode ASSIGN() { return GetToken(SeagullParser.ASSIGN, 0); }
			public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
			public ExpressionContext expression() {
				return GetRuleContext<ExpressionContext>(0);
			}
			public EnumElementContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
			public EnumElementContext(ParserRuleContext parent, int invokingState, IType typeOf, int defaultInt)
				: base(parent, invokingState)
			{
				this.typeOf = typeOf;
				this.defaultInt = defaultInt;
			}
			public override int RuleIndex { get { return RULE_enumElement; } }
		}

		[RuleVersion(0)]
		public EnumElementContext enumElement(IType typeOf, int defaultInt) {
			EnumElementContext _localctx = new EnumElementContext(Context, State, typeOf, defaultInt);
			EnterRule(_localctx, 22, RULE_enumElement);
			try {
				State = 260;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
					case 1:
						EnterOuterAlt(_localctx, 1);
					{
						State = 253; _localctx.id = Match(ID);
						State = 254; Match(ASSIGN);
						State = 255; _localctx.expr = expression(0);
						_localctx.Ast =  new EnumElementDefinition(_localctx.id.GetLine(), _localctx.id.GetCol(), (_localctx.id!=null?_localctx.id.Text:null), _localctx.expr.Ast, _localctx.typeOf); 
					}
						break;
					case 2:
						EnterOuterAlt(_localctx, 2);
					{
						State = 258; _localctx.id = Match(ID);

						IExpression def = new IntLiteral(_localctx.id.GetLine(), _localctx.id.GetCol(), defaultInt);
						if (!(_localctx.typeOf is IntType))
							def = new Default(_localctx.id.GetLine(), _localctx.id.GetCol(), _localctx.typeOf);
						_localctx.Ast =  new EnumElementDefinition(_localctx.id.GetLine(), _localctx.id.GetCol(), (_localctx.id!=null?_localctx.id.Text:null), def, _localctx.typeOf); 
				        
					}
						break;
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class PrimitiveContext : ParserRuleContext {
			public IType Ast;
			public IToken ptr;
			public IToken c;
			public IToken b;
			public IToken i;
			public IToken d;
			public IToken l;
			public IToken s;
			public ITerminalNode PTR() { return GetToken(SeagullParser.PTR, 0); }
			public ITerminalNode CHAR() { return GetToken(SeagullParser.CHAR, 0); }
			public ITerminalNode BYTE() { return GetToken(SeagullParser.BYTE, 0); }
			public ITerminalNode INT() { return GetToken(SeagullParser.INT, 0); }
			public ITerminalNode DOUBLE() { return GetToken(SeagullParser.DOUBLE, 0); }
			public ITerminalNode LONG() { return GetToken(SeagullParser.LONG, 0); }
			public ITerminalNode STRING() { return GetToken(SeagullParser.STRING, 0); }
			public PrimitiveContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_primitive; } }
		}

		[RuleVersion(0)]
		public PrimitiveContext primitive() {
			PrimitiveContext _localctx = new PrimitiveContext(Context, State);
			EnterRule(_localctx, 24, RULE_primitive);
			try {
				State = 276;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
					case PTR:
						EnterOuterAlt(_localctx, 1);
					{
						State = 262; _localctx.ptr = Match(PTR);
						_localctx.Ast =  new PointerType(_localctx.ptr.GetLine(), _localctx.ptr.GetCol()); 
					}
						break;
					case CHAR:
						EnterOuterAlt(_localctx, 2);
					{
						State = 264; _localctx.c = Match(CHAR);
						_localctx.Ast =  new CharType(_localctx.c.GetLine(), _localctx.c.GetCol()); 
					}
						break;
					case BYTE:
						EnterOuterAlt(_localctx, 3);
					{
						State = 266; _localctx.b = Match(BYTE);
						_localctx.Ast =  new ByteType(_localctx.b.GetLine(), _localctx.b.GetCol()); 
					}
						break;
					case INT:
						EnterOuterAlt(_localctx, 4);
					{
						State = 268; _localctx.i = Match(INT);
						_localctx.Ast =  new IntType(_localctx.i.GetLine(), _localctx.i.GetCol()); 
					}
						break;
					case DOUBLE:
						EnterOuterAlt(_localctx, 5);
					{
						State = 270; _localctx.d = Match(DOUBLE);
						_localctx.Ast =  new DoubleType(_localctx.d.GetLine(), _localctx.d.GetCol()); 
					}
						break;
					case LONG:
						EnterOuterAlt(_localctx, 6);
					{
						State = 272; _localctx.l = Match(LONG);
						_localctx.Ast =  new LongType(_localctx.l.GetLine(), _localctx.l.GetCol()); 
					}
						break;
					case STRING:
						EnterOuterAlt(_localctx, 7);
					{
						State = 274; _localctx.s = Match(STRING);
						_localctx.Ast =  new StringType(_localctx.s.GetLine(), _localctx.s.GetCol()); 
					}
						break;
					default:
						throw new NoViableAltException(this);
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class VoidTypeContext : ParserRuleContext {
			public IType Ast;
			public IToken v;
			public ITerminalNode VOID() { return GetToken(SeagullParser.VOID, 0); }
			public VoidTypeContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_voidType; } }
		}

		[RuleVersion(0)]
		public VoidTypeContext voidType() {
			VoidTypeContext _localctx = new VoidTypeContext(Context, State);
			EnterRule(_localctx, 26, RULE_voidType);
			try {
				EnterOuterAlt(_localctx, 1);
				{
					State = 278; _localctx.v = Match(VOID);
					_localctx.Ast =  new VoidType(_localctx.v.GetLine(), _localctx.v.GetCol()); 
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class AccessModifierContext : ParserRuleContext {
			public IAccessModifier Ast;
			public IToken _PUBLIC;
			public IToken _PROTECTED;
			public IToken _PRIVATE;
			public ITerminalNode PUBLIC() { return GetToken(SeagullParser.PUBLIC, 0); }
			public ITerminalNode PROTECTED() { return GetToken(SeagullParser.PROTECTED, 0); }
			public ITerminalNode PRIVATE() { return GetToken(SeagullParser.PRIVATE, 0); }
			public AccessModifierContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_accessModifier; } }
		}

		[RuleVersion(0)]
		public AccessModifierContext accessModifier() {
			AccessModifierContext _localctx = new AccessModifierContext(Context, State);
			EnterRule(_localctx, 28, RULE_accessModifier);
			try {
				State = 287;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
					case PUBLIC:
						EnterOuterAlt(_localctx, 1);
					{
						State = 281; _localctx._PUBLIC = Match(PUBLIC);
						_localctx.Ast =  new PublicAccessModifier(_localctx._PUBLIC.GetLine(), _localctx._PUBLIC.GetCol()); 
					}
						break;
					case PROTECTED:
						EnterOuterAlt(_localctx, 2);
					{
						State = 283; _localctx._PROTECTED = Match(PROTECTED);
						_localctx.Ast =  new ProtectedAccessModifier(_localctx._PROTECTED.GetLine(), _localctx._PROTECTED.GetCol()); 
					}
						break;
					case PRIVATE:
						EnterOuterAlt(_localctx, 3);
					{
						State = 285; _localctx._PRIVATE = Match(PRIVATE);
						_localctx.Ast =  new PrivateAccessModifier(_localctx._PRIVATE.GetLine(), _localctx._PRIVATE.GetCol()); 
					}
						break;
					default:
						throw new NoViableAltException(this);
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class DefinitionContext : ParserRuleContext {
			public List<IDefinition> Ast = new List<IDefinition>();
			public VariableDefContext _variableDef;
			public FunctionDefContext _functionDef;
			public StructDefContext _structDef;
			public EnumDefContext _enumDef;
			public VariableDefContext variableDef() {
				return GetRuleContext<VariableDefContext>(0);
			}
			public FunctionDefContext functionDef() {
				return GetRuleContext<FunctionDefContext>(0);
			}
			public StructDefContext structDef() {
				return GetRuleContext<StructDefContext>(0);
			}
			public EnumDefContext enumDef() {
				return GetRuleContext<EnumDefContext>(0);
			}
			public DefinitionContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_definition; } }
		}

		[RuleVersion(0)]
		public DefinitionContext definition() {
			DefinitionContext _localctx = new DefinitionContext(Context, State);
			EnterRule(_localctx, 30, RULE_definition);
			try {
				State = 301;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
					case 1:
						EnterOuterAlt(_localctx, 1);
					{
						State = 289; _localctx._variableDef = variableDef();
						_localctx.Ast.AddRange(_localctx._variableDef.Ast); 
					}
						break;
					case 2:
						EnterOuterAlt(_localctx, 2);
					{
						State = 292; _localctx._functionDef = functionDef();
						_localctx.Ast.Add(_localctx._functionDef.Ast); 
					}
						break;
					case 3:
						EnterOuterAlt(_localctx, 3);
					{
						State = 295; _localctx._structDef = structDef();
						_localctx.Ast.Add(_localctx._structDef.Ast); 
					}
						break;
					case 4:
						EnterOuterAlt(_localctx, 4);
					{
						State = 298; _localctx._enumDef = enumDef();
						_localctx.Ast.Add(_localctx._enumDef.Ast); 
					}
						break;
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class NamespaceDefContext : ParserRuleContext {
			public NamespaceDefinition Ast;
			public IAccessModifier access;
			public IToken n;
			public NamespaceTypeContext t;
			public AccessModifierContext am;
			public DefinitionContext d;
			public ITerminalNode L_CURL() { return GetToken(SeagullParser.L_CURL, 0); }
			public ITerminalNode R_CURL() { return GetToken(SeagullParser.R_CURL, 0); }
			public ITerminalNode NAMESPACE() { return GetToken(SeagullParser.NAMESPACE, 0); }
			public NamespaceTypeContext namespaceType() {
				return GetRuleContext<NamespaceTypeContext>(0);
			}
			public DefinitionContext[] definition() {
				return GetRuleContexts<DefinitionContext>();
			}
			public DefinitionContext definition(int i) {
				return GetRuleContext<DefinitionContext>(i);
			}
			public AccessModifierContext[] accessModifier() {
				return GetRuleContexts<AccessModifierContext>();
			}
			public AccessModifierContext accessModifier(int i) {
				return GetRuleContext<AccessModifierContext>(i);
			}
			public NamespaceDefContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_namespaceDef; } }
		}

		[RuleVersion(0)]
		public NamespaceDefContext namespaceDef() {
			NamespaceDefContext _localctx = new NamespaceDefContext(Context, State);
			EnterRule(_localctx, 32, RULE_namespaceDef);
			int _la;
			try {
				EnterOuterAlt(_localctx, 1);
				{
					State = 303; _localctx.n = Match(NAMESPACE);
					State = 304; _localctx.t = namespaceType(0);
					State = 305; Match(L_CURL);
					State = 316;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VOID) | (1L << INT) | (1L << CHAR) | (1L << DOUBLE) | (1L << STRING) | (1L << STRUCT) | (1L << LONG) | (1L << BYTE) | (1L << ENUM) | (1L << PTR) | (1L << PUBLIC) | (1L << PROTECTED) | (1L << PRIVATE))) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (L_PAR - 75)) | (1L << (L_CURL - 75)) | (1L << (ID - 75)))) != 0)) {
						{
							{
								State = 309;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PUBLIC) | (1L << PROTECTED) | (1L << PRIVATE))) != 0)) {
									{
										State = 306; _localctx.am = accessModifier();
										_localctx.access =  _localctx.am.Ast; 
									}
								}

								State = 311; _localctx.d = definition();
				   
								IDefinition[] defs = _localctx.d.Ast.ToArray();
								foreach (var definition in defs)
								{
									if (_localctx.access != null)
										definition.AccessModifier = _localctx.access;
									_localctx.t.Ast.AddDefinition(definition);
								}
								_localctx.access =  null;
				            
							}
						}
						State = 318;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 319; Match(R_CURL);
					_localctx.Ast =  NamespaceManager.Instance.Define(_localctx.n.GetLine(), _localctx.n.GetCol(), _localctx.t.Ast); 
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class VariableDefContext : ParserRuleContext {
			public List<VariableDefinition> Ast = new List<VariableDefinition>();
			public TypeContext t;
			public VariableDefIdsContext ids;
			public ExpressionContext e;
			public ITerminalNode SEMI_COL() { return GetToken(SeagullParser.SEMI_COL, 0); }
			public TypeContext type() {
				return GetRuleContext<TypeContext>(0);
			}
			public VariableDefIdsContext variableDefIds() {
				return GetRuleContext<VariableDefIdsContext>(0);
			}
			public ITerminalNode ASSIGN() { return GetToken(SeagullParser.ASSIGN, 0); }
			public ExpressionContext expression() {
				return GetRuleContext<ExpressionContext>(0);
			}
			public VariableDefContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_variableDef; } }
		}

		[RuleVersion(0)]
		public VariableDefContext variableDef() {
			VariableDefContext _localctx = new VariableDefContext(Context, State);
			EnterRule(_localctx, 34, RULE_variableDef);
			try {
				State = 334;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
					case 1:
						EnterOuterAlt(_localctx, 1);
					{
						State = 322; _localctx.t = type(0);
						State = 323; _localctx.ids = variableDefIds();
						State = 324; Match(SEMI_COL);

						foreach (string id in _localctx.ids.Ids)
							_localctx.Ast.Add(new VariableDefinition(_localctx.t.Ast.Line, _localctx.t.Ast.Column, id, _localctx.t.Ast, null)); 
				        
					}
						break;
					case 2:
						EnterOuterAlt(_localctx, 2);
					{
						State = 327; _localctx.t = type(0);
						State = 328; _localctx.ids = variableDefIds();
						State = 329; Match(ASSIGN);
						State = 330; _localctx.e = expression(0);
						State = 331; Match(SEMI_COL);

						foreach (string id in _localctx.ids.Ids)
							_localctx.Ast.Add(new VariableDefinition(_localctx.t.Ast.Line, _localctx.t.Ast.Column, id, _localctx.t.Ast, _localctx.e.Ast));
				        
					}
						break;
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class VariableDefIdsContext : ParserRuleContext {
			public List<string> Ids = new List<string>();
			public IToken n1;
			public IToken n2;
			public ITerminalNode[] ID() { return GetTokens(SeagullParser.ID); }
			public ITerminalNode ID(int i) {
				return GetToken(SeagullParser.ID, i);
			}
			public ITerminalNode[] COMMA() { return GetTokens(SeagullParser.COMMA); }
			public ITerminalNode COMMA(int i) {
				return GetToken(SeagullParser.COMMA, i);
			}
			public VariableDefIdsContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_variableDefIds; } }
		}

		[RuleVersion(0)]
		public VariableDefIdsContext variableDefIds() {
			VariableDefIdsContext _localctx = new VariableDefIdsContext(Context, State);
			EnterRule(_localctx, 36, RULE_variableDefIds);
			int _la;
			try {
				EnterOuterAlt(_localctx, 1);
				{
					State = 336; _localctx.n1 = Match(ID);
					_localctx.Ids.Add(_localctx.n1.GetText()); 
					State = 343;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
							{
								State = 338; Match(COMMA);
								State = 339; _localctx.n2 = Match(ID);
								_localctx.Ids.Add(_localctx.n2.GetText()); 
							}
						}
						State = 345;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class FunctionDefContext : ParserRuleContext {
			public FunctionDefinition Ast;
			public List<VariableDefinition> _params = new List<VariableDefinition>();
			public TypeOrVoidContext rt;
			public IToken n;
			public ParametersContext p;
			public FnBlockContext _fnBlock;
			public ITerminalNode L_PAR() { return GetToken(SeagullParser.L_PAR, 0); }
			public ITerminalNode R_PAR() { return GetToken(SeagullParser.R_PAR, 0); }
			public FnBlockContext fnBlock() {
				return GetRuleContext<FnBlockContext>(0);
			}
			public TypeOrVoidContext typeOrVoid() {
				return GetRuleContext<TypeOrVoidContext>(0);
			}
			public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
			public ParametersContext parameters() {
				return GetRuleContext<ParametersContext>(0);
			}
			public FunctionDefContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_functionDef; } }
		}

		[RuleVersion(0)]
		public FunctionDefContext functionDef() {
			FunctionDefContext _localctx = new FunctionDefContext(Context, State);
			EnterRule(_localctx, 38, RULE_functionDef);
			int _la;
			try {
				EnterOuterAlt(_localctx, 1);
				{
					State = 346; _localctx.rt = typeOrVoid();
					State = 347; _localctx.n = Match(ID);
					State = 348; Match(L_PAR);
					State = 352;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << CHAR) | (1L << DOUBLE) | (1L << STRING) | (1L << LONG) | (1L << BYTE) | (1L << PTR))) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (L_PAR - 75)) | (1L << (L_CURL - 75)) | (1L << (ID - 75)))) != 0)) {
						{
							State = 349; _localctx.p = parameters();
							_localctx._params =  _localctx.p.Ast; 
						}
					}

					State = 354; Match(R_PAR);
					State = 355; _localctx._fnBlock = fnBlock();

					string name = _localctx.n.GetText();
					IType fType = new FunctionType(_localctx.rt.Ast, _localctx._params);
			            
					if (name.Equals("main") && _localctx.rt.Ast is VoidType)
						_localctx.Ast =  new MainFunctionDefinition(_localctx.n.GetLine(), _localctx.n.GetCol(), fType, _localctx._fnBlock.Ast); 
					else _localctx.Ast =  new FunctionDefinition(_localctx.n.GetLine(), _localctx.n.GetCol(), name, fType, _localctx._fnBlock.Ast); 
			        
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class StructDefContext : ParserRuleContext {
			public StructDefinition Ast;
			public IToken s;
			public IToken n;
			public StructTypeContext t;
			public ITerminalNode STRUCT() { return GetToken(SeagullParser.STRUCT, 0); }
			public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
			public StructTypeContext structType() {
				return GetRuleContext<StructTypeContext>(0);
			}
			public StructDefContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_structDef; } }
		}

		[RuleVersion(0)]
		public StructDefContext structDef() {
			StructDefContext _localctx = new StructDefContext(Context, State);
			EnterRule(_localctx, 40, RULE_structDef);
			try {
				EnterOuterAlt(_localctx, 1);
				{
					State = 358; _localctx.s = Match(STRUCT);
					State = 359; _localctx.n = Match(ID);
					State = 360; _localctx.t = structType();
					_localctx.Ast =  new StructDefinition(_localctx.s.GetLine(), _localctx.s.GetCol(), _localctx.n.GetText(), _localctx.t.Ast); 
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class EnumDefContext : ParserRuleContext {
			public EnumDefinition Ast;
			public IType typeOf;
			public IToken e;
			public IToken n;
			public TypeContext t;
			public EnumTypeContext _enumType;
			public EnumTypeContext enumType() {
				return GetRuleContext<EnumTypeContext>(0);
			}
			public ITerminalNode ENUM() { return GetToken(SeagullParser.ENUM, 0); }
			public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
			public ITerminalNode COL() { return GetToken(SeagullParser.COL, 0); }
			public TypeContext type() {
				return GetRuleContext<TypeContext>(0);
			}
			public EnumDefContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_enumDef; } }
		}

		[RuleVersion(0)]
		public EnumDefContext enumDef() {
			EnumDefContext _localctx = new EnumDefContext(Context, State);
			EnterRule(_localctx, 42, RULE_enumDef);
			int _la;
			try {
				EnterOuterAlt(_localctx, 1);
				{
					State = 363; _localctx.e = Match(ENUM);
					State = 364; _localctx.n = Match(ID);
					_localctx.typeOf =  new IntType(_localctx.n.GetLine(), _localctx.n.GetCol()); 
					State = 370;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COL) {
						{
							State = 366; Match(COL);
							State = 367; _localctx.t = type(0);
							_localctx.typeOf =  _localctx.t.Ast; 
						}
					}

					State = 372; _localctx._enumType = enumType(_localctx.typeOf);
					_localctx.Ast =  new EnumDefinition(_localctx.e.GetLine(), _localctx.e.GetCol(), _localctx.n.GetText(), _localctx._enumType.Ast); 
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class LambdaContext : ParserRuleContext {
			public IType Ast;
			public IToken n;
			public FunctionTypeContext _functionType;
			public ITerminalNode LAMBDA() { return GetToken(SeagullParser.LAMBDA, 0); }
			public FunctionTypeContext functionType() {
				return GetRuleContext<FunctionTypeContext>(0);
			}
			public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
			public LambdaContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_lambda; } }
		}

		[RuleVersion(0)]
		public LambdaContext lambda() {
			LambdaContext _localctx = new LambdaContext(Context, State);
			EnterRule(_localctx, 44, RULE_lambda);
			try {
				EnterOuterAlt(_localctx, 1);
				{
					State = 375; Match(LAMBDA);
					State = 376; _localctx.n = Match(ID);
					State = 377; _localctx._functionType = functionType();
					_localctx.Ast =  _localctx._functionType.Ast; 
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class StatementContext : ParserRuleContext {
			public List<IStatement> Ast = new List<IStatement>();
			public StatementContext st1;
			public StatementContext st2;
			public IToken w;
			public ExpressionContext cond;
			public StatementContext st;
			public IToken f;
			public StatementContext init;
			public StatementContext incr;
			public VariableContext e;
			public ExpressionContext col;
			public IToken c;
			public IToken br;
			public IToken i;
			public ExpressionContext e1;
			public ExpressionContext e2;
			public IToken r;
			public ExpressionContext expr;
			public ReadPrintContext _readPrint;
			public ITerminalNode L_CURL() { return GetToken(SeagullParser.L_CURL, 0); }
			public ITerminalNode R_CURL() { return GetToken(SeagullParser.R_CURL, 0); }
			public ITerminalNode[] DELAY() { return GetTokens(SeagullParser.DELAY); }
			public ITerminalNode DELAY(int i) {
				return GetToken(SeagullParser.DELAY, i);
			}
			public StatementContext[] statement() {
				return GetRuleContexts<StatementContext>();
			}
			public StatementContext statement(int i) {
				return GetRuleContext<StatementContext>(i);
			}
			public ITerminalNode L_PAR() { return GetToken(SeagullParser.L_PAR, 0); }
			public ITerminalNode R_PAR() { return GetToken(SeagullParser.R_PAR, 0); }
			public ITerminalNode WHILE() { return GetToken(SeagullParser.WHILE, 0); }
			public ExpressionContext[] expression() {
				return GetRuleContexts<ExpressionContext>();
			}
			public ExpressionContext expression(int i) {
				return GetRuleContext<ExpressionContext>(i);
			}
			public ITerminalNode SEMI_COL() { return GetToken(SeagullParser.SEMI_COL, 0); }
			public ITerminalNode FOR() { return GetToken(SeagullParser.FOR, 0); }
			public ITerminalNode IN() { return GetToken(SeagullParser.IN, 0); }
			public VariableContext variable() {
				return GetRuleContext<VariableContext>(0);
			}
			public ITerminalNode CONTINUE() { return GetToken(SeagullParser.CONTINUE, 0); }
			public ITerminalNode BREAK() { return GetToken(SeagullParser.BREAK, 0); }
			public ITerminalNode IF() { return GetToken(SeagullParser.IF, 0); }
			public ITerminalNode ELSE() { return GetToken(SeagullParser.ELSE, 0); }
			public ITerminalNode ASSIGN() { return GetToken(SeagullParser.ASSIGN, 0); }
			public ITerminalNode RETURN() { return GetToken(SeagullParser.RETURN, 0); }
			public ReadPrintContext readPrint() {
				return GetRuleContext<ReadPrintContext>(0);
			}
			public StatementContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_statement; } }
		}

		[RuleVersion(0)]
		public StatementContext statement() {
			StatementContext _localctx = new StatementContext(Context, State);
			EnterRule(_localctx, 46, RULE_statement);
			int _la;
			try {
				State = 461;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
					case 1:
						EnterOuterAlt(_localctx, 1);
					{
						State = 380; Match(L_CURL);
						List<IStatement> delayed = new List<IStatement>(); 
						State = 391;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << WHILE) | (1L << FOR) | (1L << BREAK) | (1L << CONTINUE) | (1L << NEW) | (1L << RETURN) | (1L << PRINT) | (1L << READ) | (1L << DELAY) | (1L << DEFAULT) | (1L << MINUS) | (1L << PLUS_PLUS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (MINUS_MINUS - 64)) | (1L << (NOT - 64)) | (1L << (L_PAR - 64)) | (1L << (L_CURL - 64)) | (1L << (ID - 64)) | (1L << (INT_CONSTANT - 64)) | (1L << (REAL_CONSTANT - 64)) | (1L << (CHAR_CONSTANT - 64)) | (1L << (STRING_CONSTANT - 64)) | (1L << (BOOLEAN_CONSTANT - 64)))) != 0)) {
							{
								State = 389;
								ErrorHandler.Sync(this);
								switch (TokenStream.LA(1)) {
									case IF:
									case WHILE:
									case FOR:
									case BREAK:
									case CONTINUE:
									case NEW:
									case RETURN:
									case PRINT:
									case READ:
									case DEFAULT:
									case MINUS:
									case PLUS_PLUS:
									case MINUS_MINUS:
									case NOT:
									case L_PAR:
									case L_CURL:
									case ID:
									case INT_CONSTANT:
									case REAL_CONSTANT:
									case CHAR_CONSTANT:
									case STRING_CONSTANT:
									case BOOLEAN_CONSTANT:
									{
										{
											State = 382; _localctx.st1 = statement();
											_localctx.Ast.AddRange(_localctx.st1.Ast); 
										}
									}
										break;
									case DELAY:
									{
										{
											State = 385; Match(DELAY);
											State = 386; _localctx.st2 = statement();
											delayed.AddRange(_localctx.st2.Ast); 
										}
									}
										break;
									default:
										throw new NoViableAltException(this);
								}
							}
							State = 393;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						_localctx.Ast.AddRange(delayed); 
						State = 395; Match(R_CURL);
					}
						break;
					case 2:
						EnterOuterAlt(_localctx, 2);
					{
						State = 396; _localctx.w = Match(WHILE);
						State = 397; Match(L_PAR);
						State = 398; _localctx.cond = expression(0);
						State = 399; Match(R_PAR);
						State = 400; _localctx.st = statement();
						_localctx.Ast.Add(new WhileLoop(_localctx.w.GetLine(), _localctx.w.GetCol(), _localctx.cond.Ast, _localctx.st.Ast)); 
					}
						break;
					case 3:
						EnterOuterAlt(_localctx, 3);
					{
						State = 403; _localctx.f = Match(FOR);
						State = 404; Match(L_PAR);
						State = 405; _localctx.init = statement();
						State = 406; _localctx.cond = expression(0);
						State = 407; Match(SEMI_COL);
						State = 408; _localctx.incr = statement();
						State = 409; Match(R_PAR);
						State = 410; _localctx.st = statement();
						_localctx.Ast.Add(new ForLoop(_localctx.f.GetLine(), _localctx.f.GetCol(), _localctx.init.Ast[0], _localctx.cond.Ast, _localctx.incr.Ast[0], _localctx.st.Ast)); 
					}
						break;
					case 4:
						EnterOuterAlt(_localctx, 4);
					{
						State = 413; _localctx.f = Match(FOR);
						State = 414; Match(L_PAR);
						State = 415; _localctx.e = variable();
						State = 416; Match(IN);
						State = 417; _localctx.col = expression(0);
						State = 418; Match(R_PAR);
						State = 419; _localctx.st = statement();
						_localctx.Ast.Add(new ForeachLoop(_localctx.f.GetLine(), _localctx.f.GetCol(), _localctx.e.Ast, _localctx.col.Ast, _localctx.st.Ast)); 
					}
						break;
					case 5:
						EnterOuterAlt(_localctx, 5);
					{
						State = 422; _localctx.c = Match(CONTINUE);
						State = 423; Match(SEMI_COL);
						_localctx.Ast.Add(new Continue(_localctx.c.GetLine(), _localctx.c.GetCol())); 
					}
						break;
					case 6:
						EnterOuterAlt(_localctx, 6);
					{
						State = 425; _localctx.br = Match(BREAK);
						State = 426; Match(SEMI_COL);
						_localctx.Ast.Add(new Break(_localctx.br.GetLine(), _localctx.br.GetCol())); 
					}
						break;
					case 7:
						EnterOuterAlt(_localctx, 7);
					{
						State = 428; _localctx.i = Match(IF);
						State = 429; Match(L_PAR);
						State = 430; _localctx.cond = expression(0);
						State = 431; Match(R_PAR);
						State = 432; _localctx.st1 = statement();
						_localctx.Ast.Add(new IfStatement(_localctx.i.GetLine(), _localctx.i.GetCol(), _localctx.cond.Ast, _localctx.st1.Ast)); 
						State = 438;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
							case 1:
							{
								State = 434; Match(ELSE);
								State = 435; _localctx.st2 = statement();
								((IfStatement)_localctx.Ast[0]).Else = _localctx.st2.Ast; 
							}
								break;
						}
					}
						break;
					case 8:
						EnterOuterAlt(_localctx, 8);
					{
						State = 440; _localctx.e1 = expression(0);
						State = 441; Match(ASSIGN);
						State = 442; _localctx.e2 = expression(0);
						State = 443; Match(SEMI_COL);
						_localctx.Ast.Add(new Assignment(_localctx.e1.Ast, _localctx.e2.Ast)); 
					}
						break;
					case 9:
						EnterOuterAlt(_localctx, 9);
					{
						State = 446; _localctx.r = Match(RETURN);
						State = 447; _localctx.expr = expression(0);
						State = 448; Match(SEMI_COL);
						_localctx.Ast.Add(new Return(_localctx.r.GetLine(), _localctx.r.GetCol(), _localctx.expr.Ast)); 
					}
						break;
					case 10:
						EnterOuterAlt(_localctx, 10);
					{
						State = 451; _localctx.r = Match(RETURN);
						State = 452; Match(SEMI_COL);
						_localctx.Ast.Add(new Return(_localctx.r.GetLine(), _localctx.r.GetCol(), null)); 
					}
						break;
					case 11:
						EnterOuterAlt(_localctx, 11);
					{
						State = 454; _localctx._readPrint = readPrint();
						_localctx.Ast.Add(_localctx._readPrint.Ast); 
					}
						break;
					case 12:
						EnterOuterAlt(_localctx, 12);
					{
						State = 457; _localctx.e1 = expression(0);
						State = 458; Match(SEMI_COL);
				 
						IExpression expr = _localctx.e1.Ast;
						if (expr is IStatement)
							_localctx.Ast.Add((IStatement) expr);
						else {
							Errors.ErrorHandler
								.Instance
								.RaiseError(expr.Line, expr.Column, string.Format(
									"The expression {0} cannot be used as a statement", expr.ToString())
								);
						}
				        
					}
						break;
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class ReadPrintContext : ParserRuleContext {
			public IStatement Ast;
			public IToken p;
			public ExpressionContext e;
			public IToken r;
			public ITerminalNode L_PAR() { return GetToken(SeagullParser.L_PAR, 0); }
			public ITerminalNode R_PAR() { return GetToken(SeagullParser.R_PAR, 0); }
			public ITerminalNode SEMI_COL() { return GetToken(SeagullParser.SEMI_COL, 0); }
			public ITerminalNode PRINT() { return GetToken(SeagullParser.PRINT, 0); }
			public ExpressionContext expression() {
				return GetRuleContext<ExpressionContext>(0);
			}
			public ITerminalNode READ() { return GetToken(SeagullParser.READ, 0); }
			public ReadPrintContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_readPrint; } }
		}

		[RuleVersion(0)]
		public ReadPrintContext readPrint() {
			ReadPrintContext _localctx = new ReadPrintContext(Context, State);
			EnterRule(_localctx, 48, RULE_readPrint);
			try {
				State = 477;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
					case PRINT:
						EnterOuterAlt(_localctx, 1);
					{
						State = 463; _localctx.p = Match(PRINT);
						State = 464; Match(L_PAR);
						State = 465; _localctx.e = expression(0);
						State = 466; Match(R_PAR);
						State = 467; Match(SEMI_COL);
						_localctx.Ast =  new Print(_localctx.p.GetLine(), _localctx.p.GetCol(), _localctx.e.Ast); 
					}
						break;
					case READ:
						EnterOuterAlt(_localctx, 2);
					{
						State = 470; _localctx.r = Match(READ);
						State = 471; Match(L_PAR);
						State = 472; _localctx.e = expression(0);
						State = 473; Match(R_PAR);
						State = 474; Match(SEMI_COL);
						_localctx.Ast =  new Read(_localctx.r.GetLine(), _localctx.r.GetCol(), _localctx.e.Ast); 
					}
						break;
					default:
						throw new NoViableAltException(this);
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class FuncInvocationContext : ParserRuleContext {
			public FunctionInvocation Ast;
			public List<IExpression> arguments = new List<IExpression>();
			public VariableContext func;
			public ExpressionContext e1;
			public ExpressionContext e2;
			public ITerminalNode L_PAR() { return GetToken(SeagullParser.L_PAR, 0); }
			public ITerminalNode R_PAR() { return GetToken(SeagullParser.R_PAR, 0); }
			public VariableContext variable() {
				return GetRuleContext<VariableContext>(0);
			}
			public ExpressionContext[] expression() {
				return GetRuleContexts<ExpressionContext>();
			}
			public ExpressionContext expression(int i) {
				return GetRuleContext<ExpressionContext>(i);
			}
			public ITerminalNode[] COMMA() { return GetTokens(SeagullParser.COMMA); }
			public ITerminalNode COMMA(int i) {
				return GetToken(SeagullParser.COMMA, i);
			}
			public FuncInvocationContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_funcInvocation; } }
		}

		[RuleVersion(0)]
		public FuncInvocationContext funcInvocation() {
			FuncInvocationContext _localctx = new FuncInvocationContext(Context, State);
			EnterRule(_localctx, 50, RULE_funcInvocation);
			int _la;
			try {
				EnterOuterAlt(_localctx, 1);
				{
					State = 479; _localctx.func = variable();
					State = 480; Match(L_PAR);
					State = 492;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << DEFAULT) | (1L << MINUS) | (1L << PLUS_PLUS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (MINUS_MINUS - 64)) | (1L << (NOT - 64)) | (1L << (L_PAR - 64)) | (1L << (ID - 64)) | (1L << (INT_CONSTANT - 64)) | (1L << (REAL_CONSTANT - 64)) | (1L << (CHAR_CONSTANT - 64)) | (1L << (STRING_CONSTANT - 64)) | (1L << (BOOLEAN_CONSTANT - 64)))) != 0)) {
						{
							State = 481; _localctx.e1 = expression(0);
							_localctx.arguments.Add(_localctx.e1.Ast); 
							State = 489;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==COMMA) {
								{
									{
										State = 483; Match(COMMA);
										State = 484; _localctx.e2 = expression(0);
										_localctx.arguments.Add(_localctx.e2.Ast); 
									}
								}
								State = 491;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
						}
					}

					State = 494; Match(R_PAR);
					_localctx.Ast =  new FunctionInvocation(_localctx.func.Ast, _localctx.arguments); 
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class FnBlockContext : ParserRuleContext {
			public List<IStatement> Ast = new List<IStatement>();
			public FnBlockContentContext c1;
			public FnBlockContentContext c2;
			public ITerminalNode L_CURL() { return GetToken(SeagullParser.L_CURL, 0); }
			public ITerminalNode R_CURL() { return GetToken(SeagullParser.R_CURL, 0); }
			public ITerminalNode[] DELAY() { return GetTokens(SeagullParser.DELAY); }
			public ITerminalNode DELAY(int i) {
				return GetToken(SeagullParser.DELAY, i);
			}
			public FnBlockContentContext[] fnBlockContent() {
				return GetRuleContexts<FnBlockContentContext>();
			}
			public FnBlockContentContext fnBlockContent(int i) {
				return GetRuleContext<FnBlockContentContext>(i);
			}
			public FnBlockContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_fnBlock; } }
		}

		[RuleVersion(0)]
		public FnBlockContext fnBlock() {
			FnBlockContext _localctx = new FnBlockContext(Context, State);
			EnterRule(_localctx, 52, RULE_fnBlock);
			int _la;
			try {
				EnterOuterAlt(_localctx, 1);
				{
					State = 497; Match(L_CURL);
					List<IStatement> delayed = new List<IStatement>(); 
					State = 508;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << CHAR) | (1L << DOUBLE) | (1L << STRING) | (1L << LONG) | (1L << BYTE) | (1L << PTR) | (1L << IF) | (1L << WHILE) | (1L << FOR) | (1L << BREAK) | (1L << CONTINUE) | (1L << NEW) | (1L << RETURN) | (1L << PRINT) | (1L << READ) | (1L << DELAY) | (1L << DEFAULT) | (1L << MINUS) | (1L << PLUS_PLUS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (MINUS_MINUS - 64)) | (1L << (NOT - 64)) | (1L << (L_PAR - 64)) | (1L << (L_CURL - 64)) | (1L << (ID - 64)) | (1L << (INT_CONSTANT - 64)) | (1L << (REAL_CONSTANT - 64)) | (1L << (CHAR_CONSTANT - 64)) | (1L << (STRING_CONSTANT - 64)) | (1L << (BOOLEAN_CONSTANT - 64)))) != 0)) {
						{
							State = 506;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
								case INT:
								case CHAR:
								case DOUBLE:
								case STRING:
								case LONG:
								case BYTE:
								case PTR:
								case IF:
								case WHILE:
								case FOR:
								case BREAK:
								case CONTINUE:
								case NEW:
								case RETURN:
								case PRINT:
								case READ:
								case DEFAULT:
								case MINUS:
								case PLUS_PLUS:
								case MINUS_MINUS:
								case NOT:
								case L_PAR:
								case L_CURL:
								case ID:
								case INT_CONSTANT:
								case REAL_CONSTANT:
								case CHAR_CONSTANT:
								case STRING_CONSTANT:
								case BOOLEAN_CONSTANT:
								{
									{
										State = 499; _localctx.c1 = fnBlockContent();
										_localctx.Ast.AddRange(_localctx.c1.Ast); 
									}
								}
									break;
								case DELAY:
								{
									{
										State = 502; Match(DELAY);
										State = 503; _localctx.c2 = fnBlockContent();
										delayed.AddRange(_localctx.c2.Ast); 
									}
								}
									break;
								default:
									throw new NoViableAltException(this);
							}
						}
						State = 510;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					_localctx.Ast.AddRange(delayed); 
					State = 512; Match(R_CURL);
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class FnBlockContentContext : ParserRuleContext {
			public List<IStatement> Ast = new List<IStatement>();
			public VariableDefContext _variableDef;
			public StatementContext block;
			public VariableDefContext variableDef() {
				return GetRuleContext<VariableDefContext>(0);
			}
			public StatementContext statement() {
				return GetRuleContext<StatementContext>(0);
			}
			public FnBlockContentContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_fnBlockContent; } }
		}

		[RuleVersion(0)]
		public FnBlockContentContext fnBlockContent() {
			FnBlockContentContext _localctx = new FnBlockContentContext(Context, State);
			EnterRule(_localctx, 54, RULE_fnBlockContent);
			try {
				State = 520;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
					case 1:
						EnterOuterAlt(_localctx, 1);
					{
						State = 514; _localctx._variableDef = variableDef();
						_localctx.Ast.AddRange(_localctx._variableDef.Ast); 
					}
						break;
					case 2:
						EnterOuterAlt(_localctx, 2);
					{
						State = 517; _localctx.block = statement();
						_localctx.Ast.AddRange(_localctx.block.Ast); 
					}
						break;
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class ExpressionContext : ParserRuleContext {
			public IExpression Ast;
			public ExpressionContext e1;
			public ExpressionContext e;
			public VariableContext _variable;
			public LiteralContext _literal;
			public FuncInvocationContext _funcInvocation;
			public ExpressionContext _expression;
			public IToken n;
			public IToken id;
			public IToken def;
			public TypeContext _type;
			public IToken um;
			public IToken not;
			public IToken p;
			public IToken m;
			public PrimitiveContext t;
			public IToken op;
			public ExpressionContext e2;
			public ExpressionContext e3;
			public IToken att;
			public VariableContext variable() {
				return GetRuleContext<VariableContext>(0);
			}
			public LiteralContext literal() {
				return GetRuleContext<LiteralContext>(0);
			}
			public FuncInvocationContext funcInvocation() {
				return GetRuleContext<FuncInvocationContext>(0);
			}
			public ITerminalNode L_PAR() { return GetToken(SeagullParser.L_PAR, 0); }
			public ITerminalNode R_PAR() { return GetToken(SeagullParser.R_PAR, 0); }
			public ExpressionContext[] expression() {
				return GetRuleContexts<ExpressionContext>();
			}
			public ExpressionContext expression(int i) {
				return GetRuleContext<ExpressionContext>(i);
			}
			public ITerminalNode NEW() { return GetToken(SeagullParser.NEW, 0); }
			public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
			public TypeContext type() {
				return GetRuleContext<TypeContext>(0);
			}
			public ITerminalNode DEFAULT() { return GetToken(SeagullParser.DEFAULT, 0); }
			public ITerminalNode MINUS() { return GetToken(SeagullParser.MINUS, 0); }
			public ITerminalNode NOT() { return GetToken(SeagullParser.NOT, 0); }
			public ITerminalNode PLUS_PLUS() { return GetToken(SeagullParser.PLUS_PLUS, 0); }
			public ITerminalNode MINUS_MINUS() { return GetToken(SeagullParser.MINUS_MINUS, 0); }
			public PrimitiveContext primitive() {
				return GetRuleContext<PrimitiveContext>(0);
			}
			public ITerminalNode STAR() { return GetToken(SeagullParser.STAR, 0); }
			public ITerminalNode SLASH() { return GetToken(SeagullParser.SLASH, 0); }
			public ITerminalNode PERCENT() { return GetToken(SeagullParser.PERCENT, 0); }
			public ITerminalNode PLUS() { return GetToken(SeagullParser.PLUS, 0); }
			public ITerminalNode GREATER_THAN() { return GetToken(SeagullParser.GREATER_THAN, 0); }
			public ITerminalNode LESS_THAN() { return GetToken(SeagullParser.LESS_THAN, 0); }
			public ITerminalNode GREATER_EQ_THAN() { return GetToken(SeagullParser.GREATER_EQ_THAN, 0); }
			public ITerminalNode LESS_EQ_THAN() { return GetToken(SeagullParser.LESS_EQ_THAN, 0); }
			public ITerminalNode EQUAL() { return GetToken(SeagullParser.EQUAL, 0); }
			public ITerminalNode NOT_EQUAL() { return GetToken(SeagullParser.NOT_EQUAL, 0); }
			public ITerminalNode AND() { return GetToken(SeagullParser.AND, 0); }
			public ITerminalNode OR() { return GetToken(SeagullParser.OR, 0); }
			public ITerminalNode QUESTION() { return GetToken(SeagullParser.QUESTION, 0); }
			public ITerminalNode COL() { return GetToken(SeagullParser.COL, 0); }
			public ITerminalNode L_BRACKET() { return GetToken(SeagullParser.L_BRACKET, 0); }
			public ITerminalNode R_BRACKET() { return GetToken(SeagullParser.R_BRACKET, 0); }
			public ITerminalNode DOT() { return GetToken(SeagullParser.DOT, 0); }
			public ExpressionContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_expression; } }
		}

		[RuleVersion(0)]
		public ExpressionContext expression() {
			return expression(0);
		}

		private ExpressionContext expression(int _p) {
			ParserRuleContext _parentctx = Context;
			int _parentState = State;
			ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
			ExpressionContext _prevctx = _localctx;
			int _startState = 56;
			EnterRecursionRule(_localctx, 56, RULE_expression, _p);
			int _la;
			try {
				int _alt;
				EnterOuterAlt(_localctx, 1);
				{
					State = 568;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
						case 1:
						{
							State = 523; _localctx._variable = variable();
							_localctx.Ast =  _localctx._variable.Ast; 
						}
							break;
						case 2:
						{
							State = 526; _localctx._literal = literal();
							_localctx.Ast =  _localctx._literal.Ast; 
						}
							break;
						case 3:
						{
							State = 529; _localctx._funcInvocation = funcInvocation();
							_localctx.Ast =  _localctx._funcInvocation.Ast; 
						}
							break;
						case 4:
						{
							State = 532; Match(L_PAR);
							State = 533; _localctx.e = _localctx._expression = expression(0);
							State = 534; Match(R_PAR);
							_localctx.Ast =  _localctx.e.Ast; 
						}
							break;
						case 5:
						{
							State = 537; _localctx.n = Match(NEW);
							State = 538; _localctx.id = Match(ID);
							_localctx.Ast =  new New(_localctx.n.GetLine(), _localctx.n.GetCol(), _localctx.id.GetText()); 
						}
							break;
						case 6:
						{
							State = 540; _localctx.def = Match(DEFAULT);
							State = 541; Match(L_PAR);
							State = 542; _localctx._type = type(0);
							State = 543; Match(R_PAR);
							_localctx.Ast =  new Default(_localctx.def.GetLine(), _localctx.def.GetCol(), _localctx._type.Ast); 
						}
							break;
						case 7:
						{
							State = 546; _localctx.um = Match(MINUS);
							State = 547; _localctx._expression = expression(12);
							_localctx.Ast =  new UnaryMinus(_localctx.um.GetLine(), _localctx.um.GetCol(), _localctx._expression.Ast); 
						}
							break;
						case 8:
						{
							State = 550; _localctx.not = Match(NOT);
							State = 551; _localctx._expression = expression(11);
							_localctx.Ast =  new Negation(_localctx.not.GetLine(), _localctx.not.GetCol(), _localctx._expression.Ast); 
						}
							break;
						case 9:
						{
							State = 554; _localctx.p = Match(PLUS_PLUS);
							State = 555; _localctx.e = _localctx._expression = expression(8);
							_localctx.Ast =  new Increment(_localctx.p.GetLine(), _localctx.p.GetCol(), true, _localctx.e.Ast); 
						}
							break;
						case 10:
						{
							State = 558; _localctx.m = Match(MINUS_MINUS);
							State = 559; _localctx.e = _localctx._expression = expression(7);
							_localctx.Ast =  new Decrement(_localctx.m.GetLine(), _localctx.m.GetCol(), true, _localctx.e.Ast); 
						}
							break;
						case 11:
						{
							State = 562; _localctx.p = Match(L_PAR);
							State = 563; _localctx.t = primitive();
							State = 564; Match(R_PAR);
							State = 565; _localctx.e = _localctx._expression = expression(4);
							_localctx.Ast =  new Cast(_localctx.p.GetLine(), _localctx.p.GetCol(), _localctx.t.Ast, _localctx.e.Ast); 
						}
							break;
					}
					Context.Stop = TokenStream.LT(-1);
					State = 615;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							if ( ParseListeners!=null )
								TriggerExitRuleEvent();
							_prevctx = _localctx;
							{
								State = 613;
								ErrorHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
									case 1:
									{
										_localctx = new ExpressionContext(_parentctx, _parentState);
										_localctx.e1 = _prevctx;
										PushNewRecursionContext(_localctx, _startState, RULE_expression);
										State = 570;
										if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
										State = 571;
										_localctx.op = TokenStream.LT(1);
										_la = TokenStream.LA(1);
										if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << SLASH) | (1L << PERCENT))) != 0)) ) {
											_localctx.op = ErrorHandler.RecoverInline(this);
										}
										else {
											ErrorHandler.ReportMatch(this);
											Consume();
										}
										State = 572; _localctx.e2 = _localctx._expression = expression(7);
										_localctx.Ast =  new Arithmetic((_localctx.op!=null?_localctx.op.Text:null), _localctx.e1.Ast, _localctx.e2.Ast); 
									}
										break;
									case 2:
									{
										_localctx = new ExpressionContext(_parentctx, _parentState);
										_localctx.e1 = _prevctx;
										PushNewRecursionContext(_localctx, _startState, RULE_expression);
										State = 575;
										if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
										State = 576;
										_localctx.op = TokenStream.LT(1);
										_la = TokenStream.LA(1);
										if ( !(_la==PLUS || _la==MINUS) ) {
											_localctx.op = ErrorHandler.RecoverInline(this);
										}
										else {
											ErrorHandler.ReportMatch(this);
											Consume();
										}
										State = 577; _localctx.e2 = _localctx._expression = expression(6);
										_localctx.Ast =  new Arithmetic((_localctx.op!=null?_localctx.op.Text:null), _localctx.e1.Ast, _localctx.e2.Ast); 
									}
										break;
									case 3:
									{
										_localctx = new ExpressionContext(_parentctx, _parentState);
										_localctx.e1 = _prevctx;
										PushNewRecursionContext(_localctx, _startState, RULE_expression);
										State = 580;
										if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
										State = 581;
										_localctx.op = TokenStream.LT(1);
										_la = TokenStream.LA(1);
										if ( !(((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (EQUAL - 85)) | (1L << (NOT_EQUAL - 85)) | (1L << (LESS_THAN - 85)) | (1L << (GREATER_THAN - 85)) | (1L << (LESS_EQ_THAN - 85)) | (1L << (GREATER_EQ_THAN - 85)))) != 0)) ) {
											_localctx.op = ErrorHandler.RecoverInline(this);
										}
										else {
											ErrorHandler.ReportMatch(this);
											Consume();
										}
										State = 582; _localctx.e2 = _localctx._expression = expression(4);
										_localctx.Ast =  new Comparison((_localctx.op!=null?_localctx.op.Text:null), _localctx.e1.Ast, _localctx.e2.Ast); 
									}
										break;
									case 4:
									{
										_localctx = new ExpressionContext(_parentctx, _parentState);
										_localctx.e1 = _prevctx;
										PushNewRecursionContext(_localctx, _startState, RULE_expression);
										State = 585;
										if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
										State = 586;
										_localctx.op = TokenStream.LT(1);
										_la = TokenStream.LA(1);
										if ( !(_la==AND || _la==OR) ) {
											_localctx.op = ErrorHandler.RecoverInline(this);
										}
										else {
											ErrorHandler.ReportMatch(this);
											Consume();
										}
										State = 587; _localctx.e2 = _localctx._expression = expression(3);
										_localctx.Ast =  new LogicalOperation((_localctx.op!=null?_localctx.op.Text:null), _localctx.e1.Ast, _localctx.e2.Ast); 
									}
										break;
									case 5:
									{
										_localctx = new ExpressionContext(_parentctx, _parentState);
										_localctx.e1 = _prevctx;
										PushNewRecursionContext(_localctx, _startState, RULE_expression);
										State = 590;
										if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
										State = 591; Match(QUESTION);
										State = 592; _localctx.e2 = _localctx._expression = expression(0);
										State = 593; Match(COL);
										State = 594; _localctx.e3 = _localctx._expression = expression(2);
										_localctx.Ast =  new TernaryOperator(_localctx.e1.Ast, _localctx.e2.Ast, _localctx.e3.Ast); 
									}
										break;
									case 6:
									{
										_localctx = new ExpressionContext(_parentctx, _parentState);
										_localctx.e1 = _prevctx;
										PushNewRecursionContext(_localctx, _startState, RULE_expression);
										State = 597;
										if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
										State = 598; Match(L_BRACKET);
										State = 599; _localctx.e2 = _localctx._expression = expression(0);
										State = 600; Match(R_BRACKET);
										_localctx.Ast =  new Indexing(_localctx.e1.Ast, _localctx.e2.Ast); 
									}
										break;
									case 7:
									{
										_localctx = new ExpressionContext(_parentctx, _parentState);
										_localctx.e = _prevctx;
										PushNewRecursionContext(_localctx, _startState, RULE_expression);
										State = 603;
										if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
										State = 604; Match(DOT);
										State = 605; _localctx.att = Match(ID);
										_localctx.Ast =  new AttributeAccess(_localctx.e.Ast, (_localctx.att!=null?_localctx.att.Text:null)); 
									}
										break;
									case 8:
									{
										_localctx = new ExpressionContext(_parentctx, _parentState);
										_localctx.e = _prevctx;
										PushNewRecursionContext(_localctx, _startState, RULE_expression);
										State = 607;
										if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
										State = 608; Match(PLUS_PLUS);
										_localctx.Ast =  new Increment(_localctx.e.Ast.Line, _localctx.e.Ast.Column, false, _localctx.e.Ast); 
									}
										break;
									case 9:
									{
										_localctx = new ExpressionContext(_parentctx, _parentState);
										_localctx.e = _prevctx;
										PushNewRecursionContext(_localctx, _startState, RULE_expression);
										State = 610;
										if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
										State = 611; Match(MINUS_MINUS);
										_localctx.Ast =  new Decrement(_localctx.e.Ast.Line, _localctx.e.Ast.Column, false, _localctx.e.Ast); 
									}
										break;
								}
							} 
						}
						State = 617;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
					}
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				UnrollRecursionContexts(_parentctx);
			}
			return _localctx;
		}

		public partial class VariableContext : ParserRuleContext {
			public Variable Ast;
			public IToken _ID;
			public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
			public VariableContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_variable; } }
		}

		[RuleVersion(0)]
		public VariableContext variable() {
			VariableContext _localctx = new VariableContext(Context, State);
			EnterRule(_localctx, 58, RULE_variable);
			try {
				EnterOuterAlt(_localctx, 1);
				{
					State = 618; _localctx._ID = Match(ID);
					_localctx.Ast =  new Variable(_localctx._ID.GetLine(), _localctx._ID.GetCol(), (_localctx._ID!=null?_localctx._ID.Text:null)); 
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class LiteralContext : ParserRuleContext {
			public IExpression Ast;
			public IToken i;
			public IToken r;
			public IToken c;
			public IToken s;
			public IToken b;
			public ITerminalNode INT_CONSTANT() { return GetToken(SeagullParser.INT_CONSTANT, 0); }
			public ITerminalNode REAL_CONSTANT() { return GetToken(SeagullParser.REAL_CONSTANT, 0); }
			public ITerminalNode CHAR_CONSTANT() { return GetToken(SeagullParser.CHAR_CONSTANT, 0); }
			public ITerminalNode STRING_CONSTANT() { return GetToken(SeagullParser.STRING_CONSTANT, 0); }
			public ITerminalNode BOOLEAN_CONSTANT() { return GetToken(SeagullParser.BOOLEAN_CONSTANT, 0); }
			public LiteralContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_literal; } }
		}

		[RuleVersion(0)]
		public LiteralContext literal() {
			LiteralContext _localctx = new LiteralContext(Context, State);
			EnterRule(_localctx, 60, RULE_literal);
			try {
				State = 631;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
					case INT_CONSTANT:
						EnterOuterAlt(_localctx, 1);
					{
						State = 621; _localctx.i = Match(INT_CONSTANT);
						_localctx.Ast =  new IntLiteral(_localctx.i.GetLine(), _localctx.i.GetCol(), LexerHelper.LexemeToInt((_localctx.i!=null?_localctx.i.Text:null))); 
					}
						break;
					case REAL_CONSTANT:
						EnterOuterAlt(_localctx, 2);
					{
						State = 623; _localctx.r = Match(REAL_CONSTANT);
						_localctx.Ast =  new DoubleLiteral(_localctx.r.GetLine(), _localctx.r.GetCol(), LexerHelper.LexemeToReal((_localctx.r!=null?_localctx.r.Text:null))); 
					}
						break;
					case CHAR_CONSTANT:
						EnterOuterAlt(_localctx, 3);
					{
						State = 625; _localctx.c = Match(CHAR_CONSTANT);
						_localctx.Ast =  new CharLiteral(_localctx.c.GetLine(), _localctx.c.GetCol(), LexerHelper.LexemeToChar((_localctx.c!=null?_localctx.c.Text:null))); 
					}
						break;
					case STRING_CONSTANT:
						EnterOuterAlt(_localctx, 4);
					{
						State = 627; _localctx.s = Match(STRING_CONSTANT);
						_localctx.Ast =  new StringLiteral(_localctx.s.GetLine(), _localctx.s.GetCol(), (_localctx.s!=null?_localctx.s.Text:null)); 
					}
						break;
					case BOOLEAN_CONSTANT:
						EnterOuterAlt(_localctx, 5);
					{
						State = 629; _localctx.b = Match(BOOLEAN_CONSTANT);
						_localctx.Ast =  new BooleanLiteral(_localctx.b.GetLine(), _localctx.b.GetCol(), LexerHelper.LexemeToBoolean((_localctx.b!=null?_localctx.b.Text:null))); 
					}
						break;
					default:
						throw new NoViableAltException(this);
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
			switch (ruleIndex) {
				case 4: return type_sempred((TypeContext)_localctx, predIndex);
				case 6: return namespaceType_sempred((NamespaceTypeContext)_localctx, predIndex);
				case 28: return expression_sempred((ExpressionContext)_localctx, predIndex);
			}
			return true;
		}
		private bool type_sempred(TypeContext _localctx, int predIndex) {
			switch (predIndex) {
				case 0: return Precpred(Context, 1);
			}
			return true;
		}
		private bool namespaceType_sempred(NamespaceTypeContext _localctx, int predIndex) {
			switch (predIndex) {
				case 1: return Precpred(Context, 1);
			}
			return true;
		}
		private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
			switch (predIndex) {
				case 2: return Precpred(Context, 6);
				case 3: return Precpred(Context, 5);
				case 4: return Precpred(Context, 3);
				case 5: return Precpred(Context, 2);
				case 6: return Precpred(Context, 1);
				case 7: return Precpred(Context, 16);
				case 8: return Precpred(Context, 15);
				case 9: return Precpred(Context, 10);
				case 10: return Precpred(Context, 9);
			}
			return true;
		}

		private static char[] _serializedATN = {
			'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
			'\x5964', '\x3', 'l', '\x27C', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
			'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
			'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
			'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
			'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
			'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
			'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
			'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
			'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
			'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
			'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
			'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
			' ', '\t', ' ', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', 
			'\x44', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 'G', '\v', '\x2', '\x3', 
			'\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', 'L', '\n', '\x2', '\f', 
			'\x2', '\xE', '\x2', 'O', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
			'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', 'W', '\n', 
			'\x2', '\f', '\x2', '\xE', '\x2', 'Z', '\v', '\x2', '\x3', '\x2', '\x3', 
			'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
			'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
			'\x4', '\x3', '\x4', '\a', '\x4', 'i', '\n', '\x4', '\f', '\x4', '\xE', 
			'\x4', 'l', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', 
			'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
			'\x5', 'v', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
			'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
			'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', 
			'\x6', '\x85', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
			'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
			'\x3', '\x6', '\a', '\x6', '\x90', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 
			'\x93', '\v', '\x6', '\a', '\x6', '\x95', '\n', '\x6', '\f', '\x6', '\xE', 
			'\x6', '\x98', '\v', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
			'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\xA1', '\n', 
			'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
			'\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '\xAB', '\n', '\b', 
			'\f', '\b', '\xE', '\b', '\xAE', '\v', '\b', '\x3', '\t', '\x3', '\t', 
			'\x3', '\t', '\x3', '\t', '\x5', '\t', '\xB4', '\n', '\t', '\x3', '\t', 
			'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
			'\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xBF', '\n', '\t', '\x5', 
			'\t', '\xC1', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', 
			'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
			'\x3', '\n', '\a', '\n', '\xCD', '\n', '\n', '\f', '\n', '\xE', '\n', 
			'\xD0', '\v', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
			'\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\xD9', '\n', '\n', 
			'\f', '\n', '\xE', '\n', '\xDC', '\v', '\n', '\x3', '\v', '\x3', '\v', 
			'\x3', '\v', '\x3', '\v', '\x5', '\v', '\xE2', '\n', '\v', '\x3', '\v', 
			'\x3', '\v', '\x3', '\v', '\a', '\v', '\xE7', '\n', '\v', '\f', '\v', 
			'\xE', '\v', '\xEA', '\v', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
			'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
			'\f', '\x3', '\f', '\a', '\f', '\xF6', '\n', '\f', '\f', '\f', '\xE', 
			'\f', '\xF9', '\v', '\f', '\x5', '\f', '\xFB', '\n', '\f', '\x3', '\f', 
			'\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
			'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x107', '\n', 
			'\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
			'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
			'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 
			'\x117', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
			'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
			'\x10', '\x5', '\x10', '\x122', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', 
			'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
			'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
			'\x5', '\x11', '\x130', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', 
			'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x138', 
			'\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\a', '\x12', 
			'\x13D', '\n', '\x12', '\f', '\x12', '\xE', '\x12', '\x140', '\v', '\x12', 
			'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', 
			'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
			'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
			'\x5', '\x13', '\x151', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', 
			'\x14', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', '\x158', '\n', '\x14', 
			'\f', '\x14', '\xE', '\x14', '\x15B', '\v', '\x14', '\x3', '\x15', '\x3', 
			'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', 
			'\x15', '\x163', '\n', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
			'\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
			'\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
			'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x175', '\n', 
			'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', 
			'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', 
			'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
			'\x19', '\x3', '\x19', '\x3', '\x19', '\a', '\x19', '\x188', '\n', '\x19', 
			'\f', '\x19', '\xE', '\x19', '\x18B', '\v', '\x19', '\x3', '\x19', '\x3', 
			'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
			'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
			'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
			'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
			'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
			'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
			'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
			'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
			'\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x1B9', '\n', '\x19', 
			'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
			'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
			'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
			'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
			'\x3', '\x19', '\x5', '\x19', '\x1D0', '\n', '\x19', '\x3', '\x1A', '\x3', 
			'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
			'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
			'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x1E0', '\n', '\x1A', 
			'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
			'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\a', '\x1B', '\x1EA', '\n', 
			'\x1B', '\f', '\x1B', '\xE', '\x1B', '\x1ED', '\v', '\x1B', '\x5', '\x1B', 
			'\x1EF', '\n', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
			'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
			'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\a', '\x1C', '\x1FD', 
			'\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', '\x200', '\v', '\x1C', '\x3', 
			'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
			'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x20B', 
			'\n', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
			'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
			'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
			'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
			'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
			'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
			'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
			'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
			'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
			'\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x23B', '\n', '\x1E', '\x3', 
			'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
			'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
			'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
			'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
			'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
			'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
			'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
			'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
			'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\a', '\x1E', '\x268', '\n', '\x1E', 
			'\f', '\x1E', '\xE', '\x1E', '\x26B', '\v', '\x1E', '\x3', '\x1F', '\x3', 
			'\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
			'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
			'\x5', ' ', '\x27A', '\n', ' ', '\x3', ' ', '\x2', '\x5', '\n', '\xE', 
			':', '!', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
			'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
			'*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', 
			'\x2', '\x6', '\x3', '\x2', '\x39', ';', '\x3', '\x2', '>', '?', '\x3', 
			'\x2', 'W', '\\', '\x3', '\x2', 'I', 'J', '\x2', '\x2AF', '\x2', '\x45', 
			'\x3', '\x2', '\x2', '\x2', '\x4', '^', '\x3', '\x2', '\x2', '\x2', '\x6', 
			'\x62', '\x3', '\x2', '\x2', '\x2', '\b', 'u', '\x3', '\x2', '\x2', '\x2', 
			'\n', '\x84', '\x3', '\x2', '\x2', '\x2', '\f', '\xA0', '\x3', '\x2', 
			'\x2', '\x2', '\xE', '\xA2', '\x3', '\x2', '\x2', '\x2', '\x10', '\xAF', 
			'\x3', '\x2', '\x2', '\x2', '\x12', '\xC4', '\x3', '\x2', '\x2', '\x2', 
			'\x14', '\xDD', '\x3', '\x2', '\x2', '\x2', '\x16', '\xEE', '\x3', '\x2', 
			'\x2', '\x2', '\x18', '\x106', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x116', 
			'\x3', '\x2', '\x2', '\x2', '\x1C', '\x118', '\x3', '\x2', '\x2', '\x2', 
			'\x1E', '\x121', '\x3', '\x2', '\x2', '\x2', ' ', '\x12F', '\x3', '\x2', 
			'\x2', '\x2', '\"', '\x131', '\x3', '\x2', '\x2', '\x2', '$', '\x150', 
			'\x3', '\x2', '\x2', '\x2', '&', '\x152', '\x3', '\x2', '\x2', '\x2', 
			'(', '\x15C', '\x3', '\x2', '\x2', '\x2', '*', '\x168', '\x3', '\x2', 
			'\x2', '\x2', ',', '\x16D', '\x3', '\x2', '\x2', '\x2', '.', '\x179', 
			'\x3', '\x2', '\x2', '\x2', '\x30', '\x1CF', '\x3', '\x2', '\x2', '\x2', 
			'\x32', '\x1DF', '\x3', '\x2', '\x2', '\x2', '\x34', '\x1E1', '\x3', '\x2', 
			'\x2', '\x2', '\x36', '\x1F3', '\x3', '\x2', '\x2', '\x2', '\x38', '\x20A', 
			'\x3', '\x2', '\x2', '\x2', ':', '\x23A', '\x3', '\x2', '\x2', '\x2', 
			'<', '\x26C', '\x3', '\x2', '\x2', '\x2', '>', '\x279', '\x3', '\x2', 
			'\x2', '\x2', '@', '\x41', '\x5', '\x4', '\x3', '\x2', '\x41', '\x42', 
			'\b', '\x2', '\x1', '\x2', '\x42', '\x44', '\x3', '\x2', '\x2', '\x2', 
			'\x43', '@', '\x3', '\x2', '\x2', '\x2', '\x44', 'G', '\x3', '\x2', '\x2', 
			'\x2', '\x45', '\x43', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\x3', 
			'\x2', '\x2', '\x2', '\x46', 'M', '\x3', '\x2', '\x2', '\x2', 'G', '\x45', 
			'\x3', '\x2', '\x2', '\x2', 'H', 'I', '\x5', '\x6', '\x4', '\x2', 'I', 
			'J', '\b', '\x2', '\x1', '\x2', 'J', 'L', '\x3', '\x2', '\x2', '\x2', 
			'K', 'H', '\x3', '\x2', '\x2', '\x2', 'L', 'O', '\x3', '\x2', '\x2', '\x2', 
			'M', 'K', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\x3', '\x2', '\x2', '\x2', 
			'N', 'X', '\x3', '\x2', '\x2', '\x2', 'O', 'M', '\x3', '\x2', '\x2', '\x2', 
			'P', 'Q', '\x5', '\"', '\x12', '\x2', 'Q', 'R', '\b', '\x2', '\x1', '\x2', 
			'R', 'W', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\x5', ' ', '\x11', '\x2', 
			'T', 'U', '\b', '\x2', '\x1', '\x2', 'U', 'W', '\x3', '\x2', '\x2', '\x2', 
			'V', 'P', '\x3', '\x2', '\x2', '\x2', 'V', 'S', '\x3', '\x2', '\x2', '\x2', 
			'W', 'Z', '\x3', '\x2', '\x2', '\x2', 'X', 'V', '\x3', '\x2', '\x2', '\x2', 
			'X', 'Y', '\x3', '\x2', '\x2', '\x2', 'Y', '[', '\x3', '\x2', '\x2', '\x2', 
			'Z', 'X', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\a', '\x2', '\x2', '\x3', 
			'\\', ']', '\b', '\x2', '\x1', '\x2', ']', '\x3', '\x3', '\x2', '\x2', 
			'\x2', '^', '_', '\a', '.', '\x2', '\x2', '_', '`', '\a', '\x61', '\x2', 
			'\x2', '`', '\x61', '\b', '\x3', '\x1', '\x2', '\x61', '\x5', '\x3', '\x2', 
			'\x2', '\x2', '\x62', '\x63', '\a', '/', '\x2', '\x2', '\x63', '\x64', 
			'\a', ']', '\x2', '\x2', '\x64', 'j', '\b', '\x4', '\x1', '\x2', '\x65', 
			'\x66', '\a', '\x34', '\x2', '\x2', '\x66', 'g', '\a', ']', '\x2', '\x2', 
			'g', 'i', '\b', '\x4', '\x1', '\x2', 'h', '\x65', '\x3', '\x2', '\x2', 
			'\x2', 'i', 'l', '\x3', '\x2', '\x2', '\x2', 'j', 'h', '\x3', '\x2', '\x2', 
			'\x2', 'j', 'k', '\x3', '\x2', '\x2', '\x2', 'k', 'm', '\x3', '\x2', '\x2', 
			'\x2', 'l', 'j', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\a', '\x37', '\x2', 
			'\x2', 'n', '\a', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\x5', '\n', '\x6', 
			'\x2', 'p', 'q', '\b', '\x5', '\x1', '\x2', 'q', 'v', '\x3', '\x2', '\x2', 
			'\x2', 'r', 's', '\x5', '\x1C', '\xF', '\x2', 's', 't', '\b', '\x5', '\x1', 
			'\x2', 't', 'v', '\x3', '\x2', '\x2', '\x2', 'u', 'o', '\x3', '\x2', '\x2', 
			'\x2', 'u', 'r', '\x3', '\x2', '\x2', '\x2', 'v', '\t', '\x3', '\x2', 
			'\x2', '\x2', 'w', 'x', '\b', '\x6', '\x1', '\x2', 'x', 'y', '\x5', '\x1A', 
			'\xE', '\x2', 'y', 'z', '\b', '\x6', '\x1', '\x2', 'z', '\x85', '\x3', 
			'\x2', '\x2', '\x2', '{', '|', '\x5', '\x10', '\t', '\x2', '|', '}', '\b', 
			'\x6', '\x1', '\x2', '}', '\x85', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', 
			'\x5', '\x14', '\v', '\x2', '\x7F', '\x80', '\b', '\x6', '\x1', '\x2', 
			'\x80', '\x85', '\x3', '\x2', '\x2', '\x2', '\x81', '\x82', '\x5', '\f', 
			'\a', '\x2', '\x82', '\x83', '\b', '\x6', '\x1', '\x2', '\x83', '\x85', 
			'\x3', '\x2', '\x2', '\x2', '\x84', 'w', '\x3', '\x2', '\x2', '\x2', '\x84', 
			'{', '\x3', '\x2', '\x2', '\x2', '\x84', '~', '\x3', '\x2', '\x2', '\x2', 
			'\x84', '\x81', '\x3', '\x2', '\x2', '\x2', '\x85', '\x96', '\x3', '\x2', 
			'\x2', '\x2', '\x86', '\x87', '\f', '\x3', '\x2', '\x2', '\x87', '\x88', 
			'\a', 'K', '\x2', '\x2', '\x88', '\x89', '\a', '^', '\x2', '\x2', '\x89', 
			'\x8A', '\a', 'L', '\x2', '\x2', '\x8A', '\x91', '\b', '\x6', '\x1', '\x2', 
			'\x8B', '\x8C', '\a', 'K', '\x2', '\x2', '\x8C', '\x8D', '\a', '^', '\x2', 
			'\x2', '\x8D', '\x8E', '\a', 'L', '\x2', '\x2', '\x8E', '\x90', '\b', 
			'\x6', '\x1', '\x2', '\x8F', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x90', 
			'\x93', '\x3', '\x2', '\x2', '\x2', '\x91', '\x8F', '\x3', '\x2', '\x2', 
			'\x2', '\x91', '\x92', '\x3', '\x2', '\x2', '\x2', '\x92', '\x95', '\x3', 
			'\x2', '\x2', '\x2', '\x93', '\x91', '\x3', '\x2', '\x2', '\x2', '\x94', 
			'\x86', '\x3', '\x2', '\x2', '\x2', '\x95', '\x98', '\x3', '\x2', '\x2', 
			'\x2', '\x96', '\x94', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97', '\x3', 
			'\x2', '\x2', '\x2', '\x97', '\v', '\x3', '\x2', '\x2', '\x2', '\x98', 
			'\x96', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', '\a', ']', '\x2', 
			'\x2', '\x9A', '\xA1', '\b', '\a', '\x1', '\x2', '\x9B', '\x9C', '\x5', 
			'\xE', '\b', '\x2', '\x9C', '\x9D', '\a', '\x34', '\x2', '\x2', '\x9D', 
			'\x9E', '\a', ']', '\x2', '\x2', '\x9E', '\x9F', '\b', '\a', '\x1', '\x2', 
			'\x9F', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x99', '\x3', '\x2', 
			'\x2', '\x2', '\xA0', '\x9B', '\x3', '\x2', '\x2', '\x2', '\xA1', '\r', 
			'\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\b', '\b', '\x1', '\x2', 
			'\xA3', '\xA4', '\a', ']', '\x2', '\x2', '\xA4', '\xA5', '\b', '\b', '\x1', 
			'\x2', '\xA5', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', '\f', 
			'\x3', '\x2', '\x2', '\xA7', '\xA8', '\a', '\x34', '\x2', '\x2', '\xA8', 
			'\xA9', '\a', ']', '\x2', '\x2', '\xA9', '\xAB', '\b', '\b', '\x1', '\x2', 
			'\xAA', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAE', '\x3', '\x2', 
			'\x2', '\x2', '\xAC', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', 
			'\x3', '\x2', '\x2', '\x2', '\xAD', '\xF', '\x3', '\x2', '\x2', '\x2', 
			'\xAE', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB3', '\a', 'M', 
			'\x2', '\x2', '\xB0', '\xB1', '\x5', '\x12', '\n', '\x2', '\xB1', '\xB2', 
			'\b', '\t', '\x1', '\x2', '\xB2', '\xB4', '\x3', '\x2', '\x2', '\x2', 
			'\xB3', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', '\x3', '\x2', 
			'\x2', '\x2', '\xB4', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB6', 
			'\a', 'N', '\x2', '\x2', '\xB6', '\xC0', '\b', '\t', '\x1', '\x2', '\xB7', 
			'\xBE', '\a', '<', '\x2', '\x2', '\xB8', '\xB9', '\x5', '\n', '\x6', '\x2', 
			'\xB9', '\xBA', '\b', '\t', '\x1', '\x2', '\xBA', '\xBF', '\x3', '\x2', 
			'\x2', '\x2', '\xBB', '\xBC', '\x5', '\x1C', '\xF', '\x2', '\xBC', '\xBD', 
			'\b', '\t', '\x1', '\x2', '\xBD', '\xBF', '\x3', '\x2', '\x2', '\x2', 
			'\xBE', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBB', '\x3', '\x2', 
			'\x2', '\x2', '\xBF', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xB7', 
			'\x3', '\x2', '\x2', '\x2', '\xC0', '\xC1', '\x3', '\x2', '\x2', '\x2', 
			'\xC1', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', '\b', '\t', 
			'\x1', '\x2', '\xC3', '\x11', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC5', 
			'\x5', '\n', '\x6', '\x2', '\xC5', '\xC6', '\a', ']', '\x2', '\x2', '\xC6', 
			'\xCE', '\b', '\n', '\x1', '\x2', '\xC7', '\xC8', '\a', '\x35', '\x2', 
			'\x2', '\xC8', '\xC9', '\x5', '\n', '\x6', '\x2', '\xC9', '\xCA', '\a', 
			']', '\x2', '\x2', '\xCA', '\xCB', '\b', '\n', '\x1', '\x2', '\xCB', '\xCD', 
			'\x3', '\x2', '\x2', '\x2', '\xCC', '\xC7', '\x3', '\x2', '\x2', '\x2', 
			'\xCD', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCC', '\x3', '\x2', 
			'\x2', '\x2', '\xCE', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xDA', 
			'\x3', '\x2', '\x2', '\x2', '\xD0', '\xCE', '\x3', '\x2', '\x2', '\x2', 
			'\xD1', '\xD2', '\a', '\x35', '\x2', '\x2', '\xD2', '\xD3', '\x5', '\n', 
			'\x6', '\x2', '\xD3', '\xD4', '\a', ']', '\x2', '\x2', '\xD4', '\xD5', 
			'\a', '\x38', '\x2', '\x2', '\xD5', '\xD6', '\x5', '>', ' ', '\x2', '\xD6', 
			'\xD7', '\b', '\n', '\x1', '\x2', '\xD7', '\xD9', '\x3', '\x2', '\x2', 
			'\x2', '\xD8', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xDC', '\x3', 
			'\x2', '\x2', '\x2', '\xDA', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xDA', 
			'\xDB', '\x3', '\x2', '\x2', '\x2', '\xDB', '\x13', '\x3', '\x2', '\x2', 
			'\x2', '\xDC', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xE8', '\a', 
			'O', '\x2', '\x2', '\xDE', '\xDF', '\x5', '\x1E', '\x10', '\x2', '\xDF', 
			'\xE0', '\b', '\v', '\x1', '\x2', '\xE0', '\xE2', '\x3', '\x2', '\x2', 
			'\x2', '\xE1', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE2', '\x3', 
			'\x2', '\x2', '\x2', '\xE2', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE3', 
			'\xE4', '\x5', '$', '\x13', '\x2', '\xE4', '\xE5', '\b', '\v', '\x1', 
			'\x2', '\xE5', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE1', '\x3', 
			'\x2', '\x2', '\x2', '\xE7', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xE8', 
			'\xE6', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE9', '\x3', '\x2', '\x2', 
			'\x2', '\xE9', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xE8', '\x3', 
			'\x2', '\x2', '\x2', '\xEB', '\xEC', '\a', 'P', '\x2', '\x2', '\xEC', 
			'\xED', '\b', '\v', '\x1', '\x2', '\xED', '\x15', '\x3', '\x2', '\x2', 
			'\x2', '\xEE', '\xFA', '\a', 'O', '\x2', '\x2', '\xEF', '\xF0', '\x5', 
			'\x18', '\r', '\x2', '\xF0', '\xF7', '\b', '\f', '\x1', '\x2', '\xF1', 
			'\xF2', '\a', '\x35', '\x2', '\x2', '\xF2', '\xF3', '\x5', '\x18', '\r', 
			'\x2', '\xF3', '\xF4', '\b', '\f', '\x1', '\x2', '\xF4', '\xF6', '\x3', 
			'\x2', '\x2', '\x2', '\xF5', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF6', 
			'\xF9', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF5', '\x3', '\x2', '\x2', 
			'\x2', '\xF7', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xFB', '\x3', 
			'\x2', '\x2', '\x2', '\xF9', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xFA', 
			'\xEF', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xFB', '\x3', '\x2', '\x2', 
			'\x2', '\xFB', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFD', '\a', 
			'P', '\x2', '\x2', '\xFD', '\xFE', '\b', '\f', '\x1', '\x2', '\xFE', '\x17', 
			'\x3', '\x2', '\x2', '\x2', '\xFF', '\x100', '\a', ']', '\x2', '\x2', 
			'\x100', '\x101', '\a', '\x38', '\x2', '\x2', '\x101', '\x102', '\x5', 
			':', '\x1E', '\x2', '\x102', '\x103', '\b', '\r', '\x1', '\x2', '\x103', 
			'\x107', '\x3', '\x2', '\x2', '\x2', '\x104', '\x105', '\a', ']', '\x2', 
			'\x2', '\x105', '\x107', '\b', '\r', '\x1', '\x2', '\x106', '\xFF', '\x3', 
			'\x2', '\x2', '\x2', '\x106', '\x104', '\x3', '\x2', '\x2', '\x2', '\x107', 
			'\x19', '\x3', '\x2', '\x2', '\x2', '\x108', '\x109', '\a', '\x11', '\x2', 
			'\x2', '\x109', '\x117', '\b', '\xE', '\x1', '\x2', '\x10A', '\x10B', 
			'\a', '\x6', '\x2', '\x2', '\x10B', '\x117', '\b', '\xE', '\x1', '\x2', 
			'\x10C', '\x10D', '\a', '\v', '\x2', '\x2', '\x10D', '\x117', '\b', '\xE', 
			'\x1', '\x2', '\x10E', '\x10F', '\a', '\x5', '\x2', '\x2', '\x10F', '\x117', 
			'\b', '\xE', '\x1', '\x2', '\x110', '\x111', '\a', '\a', '\x2', '\x2', 
			'\x111', '\x117', '\b', '\xE', '\x1', '\x2', '\x112', '\x113', '\a', '\n', 
			'\x2', '\x2', '\x113', '\x117', '\b', '\xE', '\x1', '\x2', '\x114', '\x115', 
			'\a', '\b', '\x2', '\x2', '\x115', '\x117', '\b', '\xE', '\x1', '\x2', 
			'\x116', '\x108', '\x3', '\x2', '\x2', '\x2', '\x116', '\x10A', '\x3', 
			'\x2', '\x2', '\x2', '\x116', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x116', 
			'\x10E', '\x3', '\x2', '\x2', '\x2', '\x116', '\x110', '\x3', '\x2', '\x2', 
			'\x2', '\x116', '\x112', '\x3', '\x2', '\x2', '\x2', '\x116', '\x114', 
			'\x3', '\x2', '\x2', '\x2', '\x117', '\x1B', '\x3', '\x2', '\x2', '\x2', 
			'\x118', '\x119', '\a', '\x4', '\x2', '\x2', '\x119', '\x11A', '\b', '\xF', 
			'\x1', '\x2', '\x11A', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x11C', 
			'\a', '%', '\x2', '\x2', '\x11C', '\x122', '\b', '\x10', '\x1', '\x2', 
			'\x11D', '\x11E', '\a', '&', '\x2', '\x2', '\x11E', '\x122', '\b', '\x10', 
			'\x1', '\x2', '\x11F', '\x120', '\a', '\'', '\x2', '\x2', '\x120', '\x122', 
			'\b', '\x10', '\x1', '\x2', '\x121', '\x11B', '\x3', '\x2', '\x2', '\x2', 
			'\x121', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x121', '\x11F', '\x3', 
			'\x2', '\x2', '\x2', '\x122', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x123', 
			'\x124', '\x5', '$', '\x13', '\x2', '\x124', '\x125', '\b', '\x11', '\x1', 
			'\x2', '\x125', '\x130', '\x3', '\x2', '\x2', '\x2', '\x126', '\x127', 
			'\x5', '(', '\x15', '\x2', '\x127', '\x128', '\b', '\x11', '\x1', '\x2', 
			'\x128', '\x130', '\x3', '\x2', '\x2', '\x2', '\x129', '\x12A', '\x5', 
			'*', '\x16', '\x2', '\x12A', '\x12B', '\b', '\x11', '\x1', '\x2', '\x12B', 
			'\x130', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x12D', '\x5', ',', '\x17', 
			'\x2', '\x12D', '\x12E', '\b', '\x11', '\x1', '\x2', '\x12E', '\x130', 
			'\x3', '\x2', '\x2', '\x2', '\x12F', '\x123', '\x3', '\x2', '\x2', '\x2', 
			'\x12F', '\x126', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x129', '\x3', 
			'\x2', '\x2', '\x2', '\x12F', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x130', 
			'!', '\x3', '\x2', '\x2', '\x2', '\x131', '\x132', '\a', '\x30', '\x2', 
			'\x2', '\x132', '\x133', '\x5', '\xE', '\b', '\x2', '\x133', '\x13E', 
			'\a', 'O', '\x2', '\x2', '\x134', '\x135', '\x5', '\x1E', '\x10', '\x2', 
			'\x135', '\x136', '\b', '\x12', '\x1', '\x2', '\x136', '\x138', '\x3', 
			'\x2', '\x2', '\x2', '\x137', '\x134', '\x3', '\x2', '\x2', '\x2', '\x137', 
			'\x138', '\x3', '\x2', '\x2', '\x2', '\x138', '\x139', '\x3', '\x2', '\x2', 
			'\x2', '\x139', '\x13A', '\x5', ' ', '\x11', '\x2', '\x13A', '\x13B', 
			'\b', '\x12', '\x1', '\x2', '\x13B', '\x13D', '\x3', '\x2', '\x2', '\x2', 
			'\x13C', '\x137', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x140', '\x3', 
			'\x2', '\x2', '\x2', '\x13E', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x13E', 
			'\x13F', '\x3', '\x2', '\x2', '\x2', '\x13F', '\x141', '\x3', '\x2', '\x2', 
			'\x2', '\x140', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x141', '\x142', 
			'\a', 'P', '\x2', '\x2', '\x142', '\x143', '\b', '\x12', '\x1', '\x2', 
			'\x143', '#', '\x3', '\x2', '\x2', '\x2', '\x144', '\x145', '\x5', '\n', 
			'\x6', '\x2', '\x145', '\x146', '\x5', '&', '\x14', '\x2', '\x146', '\x147', 
			'\a', '\x37', '\x2', '\x2', '\x147', '\x148', '\b', '\x13', '\x1', '\x2', 
			'\x148', '\x151', '\x3', '\x2', '\x2', '\x2', '\x149', '\x14A', '\x5', 
			'\n', '\x6', '\x2', '\x14A', '\x14B', '\x5', '&', '\x14', '\x2', '\x14B', 
			'\x14C', '\a', '\x38', '\x2', '\x2', '\x14C', '\x14D', '\x5', ':', '\x1E', 
			'\x2', '\x14D', '\x14E', '\a', '\x37', '\x2', '\x2', '\x14E', '\x14F', 
			'\b', '\x13', '\x1', '\x2', '\x14F', '\x151', '\x3', '\x2', '\x2', '\x2', 
			'\x150', '\x144', '\x3', '\x2', '\x2', '\x2', '\x150', '\x149', '\x3', 
			'\x2', '\x2', '\x2', '\x151', '%', '\x3', '\x2', '\x2', '\x2', '\x152', 
			'\x153', '\a', ']', '\x2', '\x2', '\x153', '\x159', '\b', '\x14', '\x1', 
			'\x2', '\x154', '\x155', '\a', '\x35', '\x2', '\x2', '\x155', '\x156', 
			'\a', ']', '\x2', '\x2', '\x156', '\x158', '\b', '\x14', '\x1', '\x2', 
			'\x157', '\x154', '\x3', '\x2', '\x2', '\x2', '\x158', '\x15B', '\x3', 
			'\x2', '\x2', '\x2', '\x159', '\x157', '\x3', '\x2', '\x2', '\x2', '\x159', 
			'\x15A', '\x3', '\x2', '\x2', '\x2', '\x15A', '\'', '\x3', '\x2', '\x2', 
			'\x2', '\x15B', '\x159', '\x3', '\x2', '\x2', '\x2', '\x15C', '\x15D', 
			'\x5', '\b', '\x5', '\x2', '\x15D', '\x15E', '\a', ']', '\x2', '\x2', 
			'\x15E', '\x162', '\a', 'M', '\x2', '\x2', '\x15F', '\x160', '\x5', '\x12', 
			'\n', '\x2', '\x160', '\x161', '\b', '\x15', '\x1', '\x2', '\x161', '\x163', 
			'\x3', '\x2', '\x2', '\x2', '\x162', '\x15F', '\x3', '\x2', '\x2', '\x2', 
			'\x162', '\x163', '\x3', '\x2', '\x2', '\x2', '\x163', '\x164', '\x3', 
			'\x2', '\x2', '\x2', '\x164', '\x165', '\a', 'N', '\x2', '\x2', '\x165', 
			'\x166', '\x5', '\x36', '\x1C', '\x2', '\x166', '\x167', '\b', '\x15', 
			'\x1', '\x2', '\x167', ')', '\x3', '\x2', '\x2', '\x2', '\x168', '\x169', 
			'\a', '\t', '\x2', '\x2', '\x169', '\x16A', '\a', ']', '\x2', '\x2', '\x16A', 
			'\x16B', '\x5', '\x14', '\v', '\x2', '\x16B', '\x16C', '\b', '\x16', '\x1', 
			'\x2', '\x16C', '+', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x16E', '\a', 
			'\f', '\x2', '\x2', '\x16E', '\x16F', '\a', ']', '\x2', '\x2', '\x16F', 
			'\x174', '\b', '\x17', '\x1', '\x2', '\x170', '\x171', '\a', '\x36', '\x2', 
			'\x2', '\x171', '\x172', '\x5', '\n', '\x6', '\x2', '\x172', '\x173', 
			'\b', '\x17', '\x1', '\x2', '\x173', '\x175', '\x3', '\x2', '\x2', '\x2', 
			'\x174', '\x170', '\x3', '\x2', '\x2', '\x2', '\x174', '\x175', '\x3', 
			'\x2', '\x2', '\x2', '\x175', '\x176', '\x3', '\x2', '\x2', '\x2', '\x176', 
			'\x177', '\x5', '\x16', '\f', '\x2', '\x177', '\x178', '\b', '\x17', '\x1', 
			'\x2', '\x178', '-', '\x3', '\x2', '\x2', '\x2', '\x179', '\x17A', '\a', 
			'\r', '\x2', '\x2', '\x17A', '\x17B', '\a', ']', '\x2', '\x2', '\x17B', 
			'\x17C', '\x5', '\x10', '\t', '\x2', '\x17C', '\x17D', '\b', '\x18', '\x1', 
			'\x2', '\x17D', '/', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x17F', '\a', 
			'O', '\x2', '\x2', '\x17F', '\x189', '\b', '\x19', '\x1', '\x2', '\x180', 
			'\x181', '\x5', '\x30', '\x19', '\x2', '\x181', '\x182', '\b', '\x19', 
			'\x1', '\x2', '\x182', '\x188', '\x3', '\x2', '\x2', '\x2', '\x183', '\x184', 
			'\a', '$', '\x2', '\x2', '\x184', '\x185', '\x5', '\x30', '\x19', '\x2', 
			'\x185', '\x186', '\b', '\x19', '\x1', '\x2', '\x186', '\x188', '\x3', 
			'\x2', '\x2', '\x2', '\x187', '\x180', '\x3', '\x2', '\x2', '\x2', '\x187', 
			'\x183', '\x3', '\x2', '\x2', '\x2', '\x188', '\x18B', '\x3', '\x2', '\x2', 
			'\x2', '\x189', '\x187', '\x3', '\x2', '\x2', '\x2', '\x189', '\x18A', 
			'\x3', '\x2', '\x2', '\x2', '\x18A', '\x18C', '\x3', '\x2', '\x2', '\x2', 
			'\x18B', '\x189', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x18D', '\b', 
			'\x19', '\x1', '\x2', '\x18D', '\x1D0', '\a', 'P', '\x2', '\x2', '\x18E', 
			'\x18F', '\a', '\x17', '\x2', '\x2', '\x18F', '\x190', '\a', 'M', '\x2', 
			'\x2', '\x190', '\x191', '\x5', ':', '\x1E', '\x2', '\x191', '\x192', 
			'\a', 'N', '\x2', '\x2', '\x192', '\x193', '\x5', '\x30', '\x19', '\x2', 
			'\x193', '\x194', '\b', '\x19', '\x1', '\x2', '\x194', '\x1D0', '\x3', 
			'\x2', '\x2', '\x2', '\x195', '\x196', '\a', '\x18', '\x2', '\x2', '\x196', 
			'\x197', '\a', 'M', '\x2', '\x2', '\x197', '\x198', '\x5', '\x30', '\x19', 
			'\x2', '\x198', '\x199', '\x5', ':', '\x1E', '\x2', '\x199', '\x19A', 
			'\a', '\x37', '\x2', '\x2', '\x19A', '\x19B', '\x5', '\x30', '\x19', '\x2', 
			'\x19B', '\x19C', '\a', 'N', '\x2', '\x2', '\x19C', '\x19D', '\x5', '\x30', 
			'\x19', '\x2', '\x19D', '\x19E', '\b', '\x19', '\x1', '\x2', '\x19E', 
			'\x1D0', '\x3', '\x2', '\x2', '\x2', '\x19F', '\x1A0', '\a', '\x18', '\x2', 
			'\x2', '\x1A0', '\x1A1', '\a', 'M', '\x2', '\x2', '\x1A1', '\x1A2', '\x5', 
			'<', '\x1F', '\x2', '\x1A2', '\x1A3', '\a', '\x19', '\x2', '\x2', '\x1A3', 
			'\x1A4', '\x5', ':', '\x1E', '\x2', '\x1A4', '\x1A5', '\a', 'N', '\x2', 
			'\x2', '\x1A5', '\x1A6', '\x5', '\x30', '\x19', '\x2', '\x1A6', '\x1A7', 
			'\b', '\x19', '\x1', '\x2', '\x1A7', '\x1D0', '\x3', '\x2', '\x2', '\x2', 
			'\x1A8', '\x1A9', '\a', '\x1D', '\x2', '\x2', '\x1A9', '\x1AA', '\a', 
			'\x37', '\x2', '\x2', '\x1AA', '\x1D0', '\b', '\x19', '\x1', '\x2', '\x1AB', 
			'\x1AC', '\a', '\x1C', '\x2', '\x2', '\x1AC', '\x1AD', '\a', '\x37', '\x2', 
			'\x2', '\x1AD', '\x1D0', '\b', '\x19', '\x1', '\x2', '\x1AE', '\x1AF', 
			'\a', '\x15', '\x2', '\x2', '\x1AF', '\x1B0', '\a', 'M', '\x2', '\x2', 
			'\x1B0', '\x1B1', '\x5', ':', '\x1E', '\x2', '\x1B1', '\x1B2', '\a', 'N', 
			'\x2', '\x2', '\x1B2', '\x1B3', '\x5', '\x30', '\x19', '\x2', '\x1B3', 
			'\x1B8', '\b', '\x19', '\x1', '\x2', '\x1B4', '\x1B5', '\a', '\x16', '\x2', 
			'\x2', '\x1B5', '\x1B6', '\x5', '\x30', '\x19', '\x2', '\x1B6', '\x1B7', 
			'\b', '\x19', '\x1', '\x2', '\x1B7', '\x1B9', '\x3', '\x2', '\x2', '\x2', 
			'\x1B8', '\x1B4', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x1B9', '\x3', 
			'\x2', '\x2', '\x2', '\x1B9', '\x1D0', '\x3', '\x2', '\x2', '\x2', '\x1BA', 
			'\x1BB', '\x5', ':', '\x1E', '\x2', '\x1BB', '\x1BC', '\a', '\x38', '\x2', 
			'\x2', '\x1BC', '\x1BD', '\x5', ':', '\x1E', '\x2', '\x1BD', '\x1BE', 
			'\a', '\x37', '\x2', '\x2', '\x1BE', '\x1BF', '\b', '\x19', '\x1', '\x2', 
			'\x1BF', '\x1D0', '\x3', '\x2', '\x2', '\x2', '\x1C0', '\x1C1', '\a', 
			' ', '\x2', '\x2', '\x1C1', '\x1C2', '\x5', ':', '\x1E', '\x2', '\x1C2', 
			'\x1C3', '\a', '\x37', '\x2', '\x2', '\x1C3', '\x1C4', '\b', '\x19', '\x1', 
			'\x2', '\x1C4', '\x1D0', '\x3', '\x2', '\x2', '\x2', '\x1C5', '\x1C6', 
			'\a', ' ', '\x2', '\x2', '\x1C6', '\x1C7', '\a', '\x37', '\x2', '\x2', 
			'\x1C7', '\x1D0', '\b', '\x19', '\x1', '\x2', '\x1C8', '\x1C9', '\x5', 
			'\x32', '\x1A', '\x2', '\x1C9', '\x1CA', '\b', '\x19', '\x1', '\x2', '\x1CA', 
			'\x1D0', '\x3', '\x2', '\x2', '\x2', '\x1CB', '\x1CC', '\x5', ':', '\x1E', 
			'\x2', '\x1CC', '\x1CD', '\a', '\x37', '\x2', '\x2', '\x1CD', '\x1CE', 
			'\b', '\x19', '\x1', '\x2', '\x1CE', '\x1D0', '\x3', '\x2', '\x2', '\x2', 
			'\x1CF', '\x17E', '\x3', '\x2', '\x2', '\x2', '\x1CF', '\x18E', '\x3', 
			'\x2', '\x2', '\x2', '\x1CF', '\x195', '\x3', '\x2', '\x2', '\x2', '\x1CF', 
			'\x19F', '\x3', '\x2', '\x2', '\x2', '\x1CF', '\x1A8', '\x3', '\x2', '\x2', 
			'\x2', '\x1CF', '\x1AB', '\x3', '\x2', '\x2', '\x2', '\x1CF', '\x1AE', 
			'\x3', '\x2', '\x2', '\x2', '\x1CF', '\x1BA', '\x3', '\x2', '\x2', '\x2', 
			'\x1CF', '\x1C0', '\x3', '\x2', '\x2', '\x2', '\x1CF', '\x1C5', '\x3', 
			'\x2', '\x2', '\x2', '\x1CF', '\x1C8', '\x3', '\x2', '\x2', '\x2', '\x1CF', 
			'\x1CB', '\x3', '\x2', '\x2', '\x2', '\x1D0', '\x31', '\x3', '\x2', '\x2', 
			'\x2', '\x1D1', '\x1D2', '\a', '!', '\x2', '\x2', '\x1D2', '\x1D3', '\a', 
			'M', '\x2', '\x2', '\x1D3', '\x1D4', '\x5', ':', '\x1E', '\x2', '\x1D4', 
			'\x1D5', '\a', 'N', '\x2', '\x2', '\x1D5', '\x1D6', '\a', '\x37', '\x2', 
			'\x2', '\x1D6', '\x1D7', '\b', '\x1A', '\x1', '\x2', '\x1D7', '\x1E0', 
			'\x3', '\x2', '\x2', '\x2', '\x1D8', '\x1D9', '\a', '\"', '\x2', '\x2', 
			'\x1D9', '\x1DA', '\a', 'M', '\x2', '\x2', '\x1DA', '\x1DB', '\x5', ':', 
			'\x1E', '\x2', '\x1DB', '\x1DC', '\a', 'N', '\x2', '\x2', '\x1DC', '\x1DD', 
			'\a', '\x37', '\x2', '\x2', '\x1DD', '\x1DE', '\b', '\x1A', '\x1', '\x2', 
			'\x1DE', '\x1E0', '\x3', '\x2', '\x2', '\x2', '\x1DF', '\x1D1', '\x3', 
			'\x2', '\x2', '\x2', '\x1DF', '\x1D8', '\x3', '\x2', '\x2', '\x2', '\x1E0', 
			'\x33', '\x3', '\x2', '\x2', '\x2', '\x1E1', '\x1E2', '\x5', '<', '\x1F', 
			'\x2', '\x1E2', '\x1EE', '\a', 'M', '\x2', '\x2', '\x1E3', '\x1E4', '\x5', 
			':', '\x1E', '\x2', '\x1E4', '\x1EB', '\b', '\x1B', '\x1', '\x2', '\x1E5', 
			'\x1E6', '\a', '\x35', '\x2', '\x2', '\x1E6', '\x1E7', '\x5', ':', '\x1E', 
			'\x2', '\x1E7', '\x1E8', '\b', '\x1B', '\x1', '\x2', '\x1E8', '\x1EA', 
			'\x3', '\x2', '\x2', '\x2', '\x1E9', '\x1E5', '\x3', '\x2', '\x2', '\x2', 
			'\x1EA', '\x1ED', '\x3', '\x2', '\x2', '\x2', '\x1EB', '\x1E9', '\x3', 
			'\x2', '\x2', '\x2', '\x1EB', '\x1EC', '\x3', '\x2', '\x2', '\x2', '\x1EC', 
			'\x1EF', '\x3', '\x2', '\x2', '\x2', '\x1ED', '\x1EB', '\x3', '\x2', '\x2', 
			'\x2', '\x1EE', '\x1E3', '\x3', '\x2', '\x2', '\x2', '\x1EE', '\x1EF', 
			'\x3', '\x2', '\x2', '\x2', '\x1EF', '\x1F0', '\x3', '\x2', '\x2', '\x2', 
			'\x1F0', '\x1F1', '\a', 'N', '\x2', '\x2', '\x1F1', '\x1F2', '\b', '\x1B', 
			'\x1', '\x2', '\x1F2', '\x35', '\x3', '\x2', '\x2', '\x2', '\x1F3', '\x1F4', 
			'\a', 'O', '\x2', '\x2', '\x1F4', '\x1FE', '\b', '\x1C', '\x1', '\x2', 
			'\x1F5', '\x1F6', '\x5', '\x38', '\x1D', '\x2', '\x1F6', '\x1F7', '\b', 
			'\x1C', '\x1', '\x2', '\x1F7', '\x1FD', '\x3', '\x2', '\x2', '\x2', '\x1F8', 
			'\x1F9', '\a', '$', '\x2', '\x2', '\x1F9', '\x1FA', '\x5', '\x38', '\x1D', 
			'\x2', '\x1FA', '\x1FB', '\b', '\x1C', '\x1', '\x2', '\x1FB', '\x1FD', 
			'\x3', '\x2', '\x2', '\x2', '\x1FC', '\x1F5', '\x3', '\x2', '\x2', '\x2', 
			'\x1FC', '\x1F8', '\x3', '\x2', '\x2', '\x2', '\x1FD', '\x200', '\x3', 
			'\x2', '\x2', '\x2', '\x1FE', '\x1FC', '\x3', '\x2', '\x2', '\x2', '\x1FE', 
			'\x1FF', '\x3', '\x2', '\x2', '\x2', '\x1FF', '\x201', '\x3', '\x2', '\x2', 
			'\x2', '\x200', '\x1FE', '\x3', '\x2', '\x2', '\x2', '\x201', '\x202', 
			'\b', '\x1C', '\x1', '\x2', '\x202', '\x203', '\a', 'P', '\x2', '\x2', 
			'\x203', '\x37', '\x3', '\x2', '\x2', '\x2', '\x204', '\x205', '\x5', 
			'$', '\x13', '\x2', '\x205', '\x206', '\b', '\x1D', '\x1', '\x2', '\x206', 
			'\x20B', '\x3', '\x2', '\x2', '\x2', '\x207', '\x208', '\x5', '\x30', 
			'\x19', '\x2', '\x208', '\x209', '\b', '\x1D', '\x1', '\x2', '\x209', 
			'\x20B', '\x3', '\x2', '\x2', '\x2', '\x20A', '\x204', '\x3', '\x2', '\x2', 
			'\x2', '\x20A', '\x207', '\x3', '\x2', '\x2', '\x2', '\x20B', '\x39', 
			'\x3', '\x2', '\x2', '\x2', '\x20C', '\x20D', '\b', '\x1E', '\x1', '\x2', 
			'\x20D', '\x20E', '\x5', '<', '\x1F', '\x2', '\x20E', '\x20F', '\b', '\x1E', 
			'\x1', '\x2', '\x20F', '\x23B', '\x3', '\x2', '\x2', '\x2', '\x210', '\x211', 
			'\x5', '>', ' ', '\x2', '\x211', '\x212', '\b', '\x1E', '\x1', '\x2', 
			'\x212', '\x23B', '\x3', '\x2', '\x2', '\x2', '\x213', '\x214', '\x5', 
			'\x34', '\x1B', '\x2', '\x214', '\x215', '\b', '\x1E', '\x1', '\x2', '\x215', 
			'\x23B', '\x3', '\x2', '\x2', '\x2', '\x216', '\x217', '\a', 'M', '\x2', 
			'\x2', '\x217', '\x218', '\x5', ':', '\x1E', '\x2', '\x218', '\x219', 
			'\a', 'N', '\x2', '\x2', '\x219', '\x21A', '\b', '\x1E', '\x1', '\x2', 
			'\x21A', '\x23B', '\x3', '\x2', '\x2', '\x2', '\x21B', '\x21C', '\a', 
			'\x1E', '\x2', '\x2', '\x21C', '\x21D', '\a', ']', '\x2', '\x2', '\x21D', 
			'\x23B', '\b', '\x1E', '\x1', '\x2', '\x21E', '\x21F', '\a', '\x33', '\x2', 
			'\x2', '\x21F', '\x220', '\a', 'M', '\x2', '\x2', '\x220', '\x221', '\x5', 
			'\n', '\x6', '\x2', '\x221', '\x222', '\a', 'N', '\x2', '\x2', '\x222', 
			'\x223', '\b', '\x1E', '\x1', '\x2', '\x223', '\x23B', '\x3', '\x2', '\x2', 
			'\x2', '\x224', '\x225', '\a', '?', '\x2', '\x2', '\x225', '\x226', '\x5', 
			':', '\x1E', '\xE', '\x226', '\x227', '\b', '\x1E', '\x1', '\x2', '\x227', 
			'\x23B', '\x3', '\x2', '\x2', '\x2', '\x228', '\x229', '\a', 'H', '\x2', 
			'\x2', '\x229', '\x22A', '\x5', ':', '\x1E', '\r', '\x22A', '\x22B', '\b', 
			'\x1E', '\x1', '\x2', '\x22B', '\x23B', '\x3', '\x2', '\x2', '\x2', '\x22C', 
			'\x22D', '\a', '\x41', '\x2', '\x2', '\x22D', '\x22E', '\x5', ':', '\x1E', 
			'\n', '\x22E', '\x22F', '\b', '\x1E', '\x1', '\x2', '\x22F', '\x23B', 
			'\x3', '\x2', '\x2', '\x2', '\x230', '\x231', '\a', '\x42', '\x2', '\x2', 
			'\x231', '\x232', '\x5', ':', '\x1E', '\t', '\x232', '\x233', '\b', '\x1E', 
			'\x1', '\x2', '\x233', '\x23B', '\x3', '\x2', '\x2', '\x2', '\x234', '\x235', 
			'\a', 'M', '\x2', '\x2', '\x235', '\x236', '\x5', '\x1A', '\xE', '\x2', 
			'\x236', '\x237', '\a', 'N', '\x2', '\x2', '\x237', '\x238', '\x5', ':', 
			'\x1E', '\x6', '\x238', '\x239', '\b', '\x1E', '\x1', '\x2', '\x239', 
			'\x23B', '\x3', '\x2', '\x2', '\x2', '\x23A', '\x20C', '\x3', '\x2', '\x2', 
			'\x2', '\x23A', '\x210', '\x3', '\x2', '\x2', '\x2', '\x23A', '\x213', 
			'\x3', '\x2', '\x2', '\x2', '\x23A', '\x216', '\x3', '\x2', '\x2', '\x2', 
			'\x23A', '\x21B', '\x3', '\x2', '\x2', '\x2', '\x23A', '\x21E', '\x3', 
			'\x2', '\x2', '\x2', '\x23A', '\x224', '\x3', '\x2', '\x2', '\x2', '\x23A', 
			'\x228', '\x3', '\x2', '\x2', '\x2', '\x23A', '\x22C', '\x3', '\x2', '\x2', 
			'\x2', '\x23A', '\x230', '\x3', '\x2', '\x2', '\x2', '\x23A', '\x234', 
			'\x3', '\x2', '\x2', '\x2', '\x23B', '\x269', '\x3', '\x2', '\x2', '\x2', 
			'\x23C', '\x23D', '\f', '\b', '\x2', '\x2', '\x23D', '\x23E', '\t', '\x2', 
			'\x2', '\x2', '\x23E', '\x23F', '\x5', ':', '\x1E', '\t', '\x23F', '\x240', 
			'\b', '\x1E', '\x1', '\x2', '\x240', '\x268', '\x3', '\x2', '\x2', '\x2', 
			'\x241', '\x242', '\f', '\a', '\x2', '\x2', '\x242', '\x243', '\t', '\x3', 
			'\x2', '\x2', '\x243', '\x244', '\x5', ':', '\x1E', '\b', '\x244', '\x245', 
			'\b', '\x1E', '\x1', '\x2', '\x245', '\x268', '\x3', '\x2', '\x2', '\x2', 
			'\x246', '\x247', '\f', '\x5', '\x2', '\x2', '\x247', '\x248', '\t', '\x4', 
			'\x2', '\x2', '\x248', '\x249', '\x5', ':', '\x1E', '\x6', '\x249', '\x24A', 
			'\b', '\x1E', '\x1', '\x2', '\x24A', '\x268', '\x3', '\x2', '\x2', '\x2', 
			'\x24B', '\x24C', '\f', '\x4', '\x2', '\x2', '\x24C', '\x24D', '\t', '\x5', 
			'\x2', '\x2', '\x24D', '\x24E', '\x5', ':', '\x1E', '\x5', '\x24E', '\x24F', 
			'\b', '\x1E', '\x1', '\x2', '\x24F', '\x268', '\x3', '\x2', '\x2', '\x2', 
			'\x250', '\x251', '\f', '\x3', '\x2', '\x2', '\x251', '\x252', '\a', '=', 
			'\x2', '\x2', '\x252', '\x253', '\x5', ':', '\x1E', '\x2', '\x253', '\x254', 
			'\a', '\x36', '\x2', '\x2', '\x254', '\x255', '\x5', ':', '\x1E', '\x4', 
			'\x255', '\x256', '\b', '\x1E', '\x1', '\x2', '\x256', '\x268', '\x3', 
			'\x2', '\x2', '\x2', '\x257', '\x258', '\f', '\x12', '\x2', '\x2', '\x258', 
			'\x259', '\a', 'K', '\x2', '\x2', '\x259', '\x25A', '\x5', ':', '\x1E', 
			'\x2', '\x25A', '\x25B', '\a', 'L', '\x2', '\x2', '\x25B', '\x25C', '\b', 
			'\x1E', '\x1', '\x2', '\x25C', '\x268', '\x3', '\x2', '\x2', '\x2', '\x25D', 
			'\x25E', '\f', '\x11', '\x2', '\x2', '\x25E', '\x25F', '\a', '\x34', '\x2', 
			'\x2', '\x25F', '\x260', '\a', ']', '\x2', '\x2', '\x260', '\x268', '\b', 
			'\x1E', '\x1', '\x2', '\x261', '\x262', '\f', '\f', '\x2', '\x2', '\x262', 
			'\x263', '\a', '\x41', '\x2', '\x2', '\x263', '\x268', '\b', '\x1E', '\x1', 
			'\x2', '\x264', '\x265', '\f', '\v', '\x2', '\x2', '\x265', '\x266', '\a', 
			'\x42', '\x2', '\x2', '\x266', '\x268', '\b', '\x1E', '\x1', '\x2', '\x267', 
			'\x23C', '\x3', '\x2', '\x2', '\x2', '\x267', '\x241', '\x3', '\x2', '\x2', 
			'\x2', '\x267', '\x246', '\x3', '\x2', '\x2', '\x2', '\x267', '\x24B', 
			'\x3', '\x2', '\x2', '\x2', '\x267', '\x250', '\x3', '\x2', '\x2', '\x2', 
			'\x267', '\x257', '\x3', '\x2', '\x2', '\x2', '\x267', '\x25D', '\x3', 
			'\x2', '\x2', '\x2', '\x267', '\x261', '\x3', '\x2', '\x2', '\x2', '\x267', 
			'\x264', '\x3', '\x2', '\x2', '\x2', '\x268', '\x26B', '\x3', '\x2', '\x2', 
			'\x2', '\x269', '\x267', '\x3', '\x2', '\x2', '\x2', '\x269', '\x26A', 
			'\x3', '\x2', '\x2', '\x2', '\x26A', ';', '\x3', '\x2', '\x2', '\x2', 
			'\x26B', '\x269', '\x3', '\x2', '\x2', '\x2', '\x26C', '\x26D', '\a', 
			']', '\x2', '\x2', '\x26D', '\x26E', '\b', '\x1F', '\x1', '\x2', '\x26E', 
			'=', '\x3', '\x2', '\x2', '\x2', '\x26F', '\x270', '\a', '^', '\x2', '\x2', 
			'\x270', '\x27A', '\b', ' ', '\x1', '\x2', '\x271', '\x272', '\a', '_', 
			'\x2', '\x2', '\x272', '\x27A', '\b', ' ', '\x1', '\x2', '\x273', '\x274', 
			'\a', '`', '\x2', '\x2', '\x274', '\x27A', '\b', ' ', '\x1', '\x2', '\x275', 
			'\x276', '\a', '\x61', '\x2', '\x2', '\x276', '\x27A', '\b', ' ', '\x1', 
			'\x2', '\x277', '\x278', '\a', '\x62', '\x2', '\x2', '\x278', '\x27A', 
			'\b', ' ', '\x1', '\x2', '\x279', '\x26F', '\x3', '\x2', '\x2', '\x2', 
			'\x279', '\x271', '\x3', '\x2', '\x2', '\x2', '\x279', '\x273', '\x3', 
			'\x2', '\x2', '\x2', '\x279', '\x275', '\x3', '\x2', '\x2', '\x2', '\x279', 
			'\x277', '\x3', '\x2', '\x2', '\x2', '\x27A', '?', '\x3', '\x2', '\x2', 
			'\x2', '.', '\x45', 'M', 'V', 'X', 'j', 'u', '\x84', '\x91', '\x96', '\xA0', 
			'\xAC', '\xB3', '\xBE', '\xC0', '\xCE', '\xDA', '\xE1', '\xE8', '\xF7', 
			'\xFA', '\x106', '\x116', '\x121', '\x12F', '\x137', '\x13E', '\x150', 
			'\x159', '\x162', '\x174', '\x187', '\x189', '\x1B8', '\x1CF', '\x1DF', 
			'\x1EB', '\x1EE', '\x1FC', '\x1FE', '\x20A', '\x23A', '\x267', '\x269', 
			'\x279',
		};

		public static readonly ATN _ATN =
			new ATNDeserializer().Deserialize(_serializedATN);


	}
}

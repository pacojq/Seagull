//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar/SeagullParser.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419



    using System.Collections.Generic;
    
	using Seagull.AST;
	using Seagull.Grammar;
	
	using Seagull.Semantics.Symbols;
	
	using Seagull.AST.Expressions;
	using Seagull.AST.Expressions.Binary;
	using Seagull.AST.Expressions.Literals;
	
	using Seagull.AST.Statements;
	using Seagull.AST.Statements.Definitions;
	
	using Seagull.AST.Types;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class SeagullParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SHARP=1, VOID=2, INT=3, CHAR=4, DOUBLE=5, STRING=6, STRUCT=7, LONG=8, 
		BYTE=9, ENUM=10, DELEGATE=11, NULL=12, TRUE=13, FALSE=14, IF=15, ELSE=16, 
		WHILE=17, FOR=18, IN=19, SWITCH=20, CASE=21, BREAK=22, CONTINUE=23, NEW=24, 
		DELETE=25, RETURN=26, PRINT=27, READ=28, ASSERT=29, DELAY=30, PUBLIC=31, 
		PRIVATE=32, LOAD=33, IMPORT=34, NAMESPACE=35, USING=36, IS=37, DOT=38, 
		COMMA=39, COL=40, SEMI_COL=41, ASSIGN=42, STAR=43, SLASH=44, PERCENT=45, 
		ARROW=46, PLUS=47, MINUS=48, PLUS_PLUS=49, MINUS_MINUS=50, ASSIGN_MUL=51, 
		ASSIGN_DIV=52, ASSIGN_MOD=53, ASSIGN_SUM=54, ASSIGN_SUB=55, NOT=56, AND=57, 
		OR=58, L_BRACKET=59, R_BRACKET=60, L_PAR=61, R_PAR=62, L_CURL=63, R_CURL=64, 
		BIT_AND=65, BIT_OR=66, BIT_XOR=67, BIT_NOT=68, BIT_RIGHT=69, BIT_LEFT=70, 
		EQUAL=71, NOT_EQUAL=72, LESS_THAN=73, GREATER_THAN=74, LESS_EQ_THAN=75, 
		GREATER_EQ_THAN=76, ID=77, INT_CONSTANT=78, REAL_CONSTANT=79, CHAR_CONSTANT=80, 
		STRING_CONSTANT=81, BOOLEAN_CONSTANT=82, SL_COMMENT=83, ML_COMMENT=84, 
		BLANKS=85, DIR_DEFINE=86, DIR_IF=87, DIR_ELIF=88, DIR_ELSE=89, DIR_WHITESPACE=90, 
		DIR_ML_COMMENT=91, DIR_NEWLINE=92;
	public const int
		RULE_program = 0, RULE_load = 1, RULE_type = 2, RULE_functionType = 3, 
		RULE_parameters = 4, RULE_structType = 5, RULE_primitive = 6, RULE_voidType = 7, 
		RULE_protectionLevel = 8, RULE_definition = 9, RULE_variableDef = 10, 
		RULE_fuctionDef = 11, RULE_structDef = 12, RULE_delegate = 13, RULE_funcInvocation = 14, 
		RULE_block = 15, RULE_fnBlock = 16, RULE_statement = 17, RULE_readPrint = 18, 
		RULE_expression = 19, RULE_variable = 20, RULE_literal = 21;
	public static readonly string[] ruleNames = {
		"program", "load", "type", "functionType", "parameters", "structType", 
		"primitive", "voidType", "protectionLevel", "definition", "variableDef", 
		"fuctionDef", "structDef", "delegate", "funcInvocation", "block", "fnBlock", 
		"statement", "readPrint", "expression", "variable", "literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'#'", "'void'", "'int'", "'char'", "'double'", "'string'", "'struct'", 
		"'long'", "'byte'", "'enum'", "'delegate'", "'null'", "'true'", "'false'", 
		null, null, "'while'", "'for'", "'in'", "'switch'", "'case'", "'break'", 
		"'continue'", "'new'", "'delete'", "'return'", "'print'", "'read'", "'assert'", 
		"'delay'", "'public'", "'private'", "'load'", "'import'", "'namespace'", 
		"'using'", "'is'", "'.'", "','", "':'", "';'", "'='", "'*'", "'/'", "'%'", 
		"'->'", "'+'", "'-'", "'++'", "'--'", "'*='", "'/='", "'%='", "'+='", 
		"'-='", "'!'", "'&&'", "'||'", "'['", "']'", "'('", "')'", "'{'", "'}'", 
		"'&'", "'|'", "'^'", "'~'", "'>>'", "'<<'", "'=='", "'!='", "'<'", "'>'", 
		"'<='", "'>='", null, null, null, null, null, null, null, null, null, 
		"'define'", null, "'elif'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SHARP", "VOID", "INT", "CHAR", "DOUBLE", "STRING", "STRUCT", "LONG", 
		"BYTE", "ENUM", "DELEGATE", "NULL", "TRUE", "FALSE", "IF", "ELSE", "WHILE", 
		"FOR", "IN", "SWITCH", "CASE", "BREAK", "CONTINUE", "NEW", "DELETE", "RETURN", 
		"PRINT", "READ", "ASSERT", "DELAY", "PUBLIC", "PRIVATE", "LOAD", "IMPORT", 
		"NAMESPACE", "USING", "IS", "DOT", "COMMA", "COL", "SEMI_COL", "ASSIGN", 
		"STAR", "SLASH", "PERCENT", "ARROW", "PLUS", "MINUS", "PLUS_PLUS", "MINUS_MINUS", 
		"ASSIGN_MUL", "ASSIGN_DIV", "ASSIGN_MOD", "ASSIGN_SUM", "ASSIGN_SUB", 
		"NOT", "AND", "OR", "L_BRACKET", "R_BRACKET", "L_PAR", "R_PAR", "L_CURL", 
		"R_CURL", "BIT_AND", "BIT_OR", "BIT_XOR", "BIT_NOT", "BIT_RIGHT", "BIT_LEFT", 
		"EQUAL", "NOT_EQUAL", "LESS_THAN", "GREATER_THAN", "LESS_EQ_THAN", "GREATER_EQ_THAN", 
		"ID", "INT_CONSTANT", "REAL_CONSTANT", "CHAR_CONSTANT", "STRING_CONSTANT", 
		"BOOLEAN_CONSTANT", "SL_COMMENT", "ML_COMMENT", "BLANKS", "DIR_DEFINE", 
		"DIR_IF", "DIR_ELIF", "DIR_ELSE", "DIR_WHITESPACE", "DIR_ML_COMMENT", 
		"DIR_NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SeagullParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SeagullParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SeagullParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SeagullParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public Program Ast;
		public List<string> Loads = new List<string>();
		public List<IDefinition> Def = new List<IDefinition>();
		public LoadContext l;
		public DefinitionContext d;
		public ITerminalNode Eof() { return GetToken(SeagullParser.Eof, 0); }
		public LoadContext[] load() {
			return GetRuleContexts<LoadContext>();
		}
		public LoadContext load(int i) {
			return GetRuleContext<LoadContext>(i);
		}
		public DefinitionContext[] definition() {
			return GetRuleContexts<DefinitionContext>();
		}
		public DefinitionContext definition(int i) {
			return GetRuleContext<DefinitionContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LOAD) {
				{
				{
				State = 44; _localctx.l = load();
				 _localctx.Loads.Add(_localctx.l.File); 
				}
				}
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 57;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 31)) & ~0x3f) == 0 && ((1L << (_la - 31)) & ((1L << (PUBLIC - 31)) | (1L << (PRIVATE - 31)) | (1L << (ID - 31)))) != 0)) {
				{
				{
				State = 52; _localctx.d = definition();
				 _localctx.Def.Add(_localctx.d.Ast); 
				}
				}
				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 60; Match(Eof);
			 _localctx.Ast =  new Program(0, 0, _localctx.Loads, _localctx.Def); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadContext : ParserRuleContext {
		public string File;
		public IToken p;
		public ITerminalNode LOAD() { return GetToken(SeagullParser.LOAD, 0); }
		public ITerminalNode STRING_CONSTANT() { return GetToken(SeagullParser.STRING_CONSTANT, 0); }
		public LoadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_load; } }
	}

	[RuleVersion(0)]
	public LoadContext load() {
		LoadContext _localctx = new LoadContext(Context, State);
		EnterRule(_localctx, 2, RULE_load);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63; Match(LOAD);
			State = 64; _localctx.p = Match(STRING_CONSTANT);
			 _localctx.File =  (_localctx.p!=null?_localctx.p.Text:null); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public IType Ast;
		public TypeContext t;
		public PrimitiveContext _primitive;
		public FunctionTypeContext _functionType;
		public StructTypeContext _structType;
		public IToken userDefined;
		public IToken i;
		public IToken i2;
		public PrimitiveContext primitive() {
			return GetRuleContext<PrimitiveContext>(0);
		}
		public FunctionTypeContext functionType() {
			return GetRuleContext<FunctionTypeContext>(0);
		}
		public StructTypeContext structType() {
			return GetRuleContext<StructTypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
		public ITerminalNode[] L_BRACKET() { return GetTokens(SeagullParser.L_BRACKET); }
		public ITerminalNode L_BRACKET(int i) {
			return GetToken(SeagullParser.L_BRACKET, i);
		}
		public ITerminalNode[] R_BRACKET() { return GetTokens(SeagullParser.R_BRACKET); }
		public ITerminalNode R_BRACKET(int i) {
			return GetToken(SeagullParser.R_BRACKET, i);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode[] INT_CONSTANT() { return GetTokens(SeagullParser.INT_CONSTANT); }
		public ITerminalNode INT_CONSTANT(int i) {
			return GetToken(SeagullParser.INT_CONSTANT, i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	}

	[RuleVersion(0)]
	public TypeContext type() {
		return type(0);
	}

	private TypeContext type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeContext _localctx = new TypeContext(Context, _parentState);
		TypeContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_type, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
			case CHAR:
			case DOUBLE:
			case STRING:
				{
				State = 68; _localctx._primitive = primitive();
				 _localctx.Ast =  _localctx._primitive.Ast; 
				}
				break;
			case L_PAR:
				{
				State = 71; _localctx._functionType = functionType();
				 _localctx.Ast =  _localctx._functionType.Ast; 
				}
				break;
			case STRUCT:
				{
				State = 74; _localctx._structType = structType();
				 _localctx.Ast =  _localctx._structType.Ast; 
				}
				break;
			case ID:
				{
				State = 77; _localctx.userDefined = Match(ID);
				 _localctx.Ast =  DependencyManager.Instance.AddType(_localctx.userDefined.GetLine(), _localctx.userDefined.GetCol(), _localctx.userDefined.GetText()); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 97;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypeContext(_parentctx, _parentState);
					_localctx.t = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_type);
					State = 81;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 82; Match(L_BRACKET);
					State = 83; _localctx.i = Match(INT_CONSTANT);
					State = 84; Match(R_BRACKET);
					 _localctx.Ast =  ArrayType.BuildArray(int.Parse((_localctx.i!=null?_localctx.i.Text:null)), _localctx.t.Ast); 
					State = 92;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 86; Match(L_BRACKET);
							State = 87; _localctx.i2 = Match(INT_CONSTANT);
							State = 88; Match(R_BRACKET);
							 _localctx.Ast =  ArrayType.BuildArray( int.Parse((_localctx.i2!=null?_localctx.i2.Text:null)), _localctx.Ast); 
							}
							} 
						}
						State = 94;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
					}
					}
					} 
				}
				State = 99;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FunctionTypeContext : ParserRuleContext {
		public FunctionType Ast;
		public List<VariableDefinition> Params = new List<VariableDefinition>();
		public IType Rt;
		public ParametersContext p;
		public IToken par;
		public TypeContext t;
		public VoidTypeContext vt;
		public ITerminalNode L_PAR() { return GetToken(SeagullParser.L_PAR, 0); }
		public ITerminalNode R_PAR() { return GetToken(SeagullParser.R_PAR, 0); }
		public ITerminalNode ARROW() { return GetToken(SeagullParser.ARROW, 0); }
		public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public VoidTypeContext voidType() {
			return GetRuleContext<VoidTypeContext>(0);
		}
		public FunctionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionType; } }
	}

	[RuleVersion(0)]
	public FunctionTypeContext functionType() {
		FunctionTypeContext _localctx = new FunctionTypeContext(Context, State);
		EnterRule(_localctx, 6, RULE_functionType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; Match(L_PAR);
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 101; _localctx.p = parameters();
				 _localctx.Params =  _localctx.p.Ast;
				}
			}

			State = 106; _localctx.par = Match(R_PAR);
			 _localctx.Rt = new VoidType(_localctx.par.GetLine(), _localctx.par.GetCol()); 
			State = 117;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 108; Match(ARROW);
				State = 115;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INT:
				case CHAR:
				case DOUBLE:
				case STRING:
				case STRUCT:
				case L_PAR:
				case ID:
					{
					{
					State = 109; _localctx.t = type(0);
					 _localctx.Rt = _localctx.t.Ast; 
					}
					}
					break;
				case VOID:
					{
					{
					State = 112; _localctx.vt = voidType();
					 _localctx.Rt = _localctx.vt.Ast; 
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			 _localctx.Ast =  new FunctionType(_localctx.Rt, _localctx.Params); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		public List<VariableDefinition> Ast = new List<VariableDefinition>();
		public IToken id1;
		public TypeContext t1;
		public IToken id2;
		public TypeContext t2;
		public LiteralContext l;
		public ITerminalNode[] COL() { return GetTokens(SeagullParser.COL); }
		public ITerminalNode COL(int i) {
			return GetToken(SeagullParser.COL, i);
		}
		public ITerminalNode[] ID() { return GetTokens(SeagullParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(SeagullParser.ID, i);
		}
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SeagullParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SeagullParser.COMMA, i);
		}
		public ITerminalNode[] ASSIGN() { return GetTokens(SeagullParser.ASSIGN); }
		public ITerminalNode ASSIGN(int i) {
			return GetToken(SeagullParser.ASSIGN, i);
		}
		public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 8, RULE_parameters);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 121; _localctx.id1 = Match(ID);
			State = 122; Match(COL);
			State = 123; _localctx.t1 = type(0);
			 _localctx.Ast.Add(new VariableDefinition(_localctx.id1.GetLine(), _localctx.id1.GetCol(), _localctx.id1.GetText(), _localctx.t1.Ast, null)); 
			State = 133;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 125; Match(COMMA);
					State = 126; _localctx.id2 = Match(ID);
					State = 127; Match(COL);
					State = 128; _localctx.t2 = type(0);
					 _localctx.Ast.Add(new VariableDefinition(_localctx.id2.GetLine(), _localctx.id2.GetCol(), _localctx.id2.GetText(), _localctx.t2.Ast, null)); 
					}
					} 
				}
				State = 135;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			State = 146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 136; Match(COMMA);
				State = 137; _localctx.id2 = Match(ID);
				State = 138; Match(COL);
				State = 139; _localctx.t2 = type(0);
				State = 140; Match(ASSIGN);
				State = 141; _localctx.l = literal();
				 _localctx.Ast.Add(new VariableDefinition(_localctx.id2.GetLine(), _localctx.id2.GetCol(), _localctx.id2.GetText(), _localctx.t2.Ast, _localctx.l.Ast)); 
				}
				}
				State = 148;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructTypeContext : ParserRuleContext {
		public StructType Ast;
		public List<VariableDefinition> Fields = new List<VariableDefinition>();
		public IToken s;
		public VariableDefContext f;
		public ITerminalNode L_CURL() { return GetToken(SeagullParser.L_CURL, 0); }
		public ITerminalNode R_CURL() { return GetToken(SeagullParser.R_CURL, 0); }
		public ITerminalNode STRUCT() { return GetToken(SeagullParser.STRUCT, 0); }
		public VariableDefContext[] variableDef() {
			return GetRuleContexts<VariableDefContext>();
		}
		public VariableDefContext variableDef(int i) {
			return GetRuleContext<VariableDefContext>(i);
		}
		public StructTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structType; } }
	}

	[RuleVersion(0)]
	public StructTypeContext structType() {
		StructTypeContext _localctx = new StructTypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_structType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149; _localctx.s = Match(STRUCT);
			State = 150; Match(L_CURL);
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 151; _localctx.f = variableDef();
				 _localctx.Fields.Add(_localctx.f.Ast); 
				}
				}
				State = 158;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 159; Match(R_CURL);
			 _localctx.Ast =  new StructType(_localctx.s.GetLine(), _localctx.s.GetCol(), _localctx.Fields); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveContext : ParserRuleContext {
		public IType Ast;
		public IToken i;
		public IToken c;
		public IToken d;
		public IToken s;
		public ITerminalNode INT() { return GetToken(SeagullParser.INT, 0); }
		public ITerminalNode CHAR() { return GetToken(SeagullParser.CHAR, 0); }
		public ITerminalNode DOUBLE() { return GetToken(SeagullParser.DOUBLE, 0); }
		public ITerminalNode STRING() { return GetToken(SeagullParser.STRING, 0); }
		public PrimitiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitive; } }
	}

	[RuleVersion(0)]
	public PrimitiveContext primitive() {
		PrimitiveContext _localctx = new PrimitiveContext(Context, State);
		EnterRule(_localctx, 12, RULE_primitive);
		try {
			State = 170;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 162; _localctx.i = Match(INT);
				 _localctx.Ast =  new IntType(_localctx.i.GetLine(), _localctx.i.GetCol()); 
				}
				break;
			case CHAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 164; _localctx.c = Match(CHAR);
				 _localctx.Ast =  new CharType(_localctx.c.GetLine(), _localctx.c.GetCol()); 
				}
				break;
			case DOUBLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 166; _localctx.d = Match(DOUBLE);
				 _localctx.Ast =  new DoubleType(_localctx.d.GetLine(), _localctx.d.GetCol()); 
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 168; _localctx.s = Match(STRING);
				 _localctx.Ast =  new StringType(_localctx.s.GetLine(), _localctx.s.GetCol()); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoidTypeContext : ParserRuleContext {
		public IType Ast;
		public IToken v;
		public ITerminalNode VOID() { return GetToken(SeagullParser.VOID, 0); }
		public VoidTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voidType; } }
	}

	[RuleVersion(0)]
	public VoidTypeContext voidType() {
		VoidTypeContext _localctx = new VoidTypeContext(Context, State);
		EnterRule(_localctx, 14, RULE_voidType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172; _localctx.v = Match(VOID);
			 _localctx.Ast =  new VoidType(_localctx.v.GetLine(), _localctx.v.GetCol()); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProtectionLevelContext : ParserRuleContext {
		public ITerminalNode PUBLIC() { return GetToken(SeagullParser.PUBLIC, 0); }
		public ITerminalNode PRIVATE() { return GetToken(SeagullParser.PRIVATE, 0); }
		public ProtectionLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_protectionLevel; } }
	}

	[RuleVersion(0)]
	public ProtectionLevelContext protectionLevel() {
		ProtectionLevelContext _localctx = new ProtectionLevelContext(Context, State);
		EnterRule(_localctx, 16, RULE_protectionLevel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			_la = TokenStream.LA(1);
			if ( !(_la==PUBLIC || _la==PRIVATE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		public IDefinition Ast;
		public VariableDefContext _variableDef;
		public FuctionDefContext _fuctionDef;
		public StructDefContext _structDef;
		public VariableDefContext variableDef() {
			return GetRuleContext<VariableDefContext>(0);
		}
		public ProtectionLevelContext protectionLevel() {
			return GetRuleContext<ProtectionLevelContext>(0);
		}
		public FuctionDefContext fuctionDef() {
			return GetRuleContext<FuctionDefContext>(0);
		}
		public StructDefContext structDef() {
			return GetRuleContext<StructDefContext>(0);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 18, RULE_definition);
		int _la;
		try {
			State = 195;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PUBLIC || _la==PRIVATE) {
					{
					State = 177; protectionLevel();
					}
				}

				State = 180; _localctx._variableDef = variableDef();
				 _localctx.Ast =  _localctx._variableDef.Ast; 
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 184;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PUBLIC || _la==PRIVATE) {
					{
					State = 183; protectionLevel();
					}
				}

				State = 186; _localctx._fuctionDef = fuctionDef();
				 _localctx.Ast =  _localctx._fuctionDef.Ast; 
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PUBLIC || _la==PRIVATE) {
					{
					State = 189; protectionLevel();
					}
				}

				State = 192; _localctx._structDef = structDef();
				 _localctx.Ast =  _localctx._structDef.Ast; 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDefContext : ParserRuleContext {
		public VariableDefinition Ast;
		public IToken n;
		public TypeContext t;
		public ExpressionContext e;
		public ITerminalNode COL() { return GetToken(SeagullParser.COL, 0); }
		public ITerminalNode SEMI_COL() { return GetToken(SeagullParser.SEMI_COL, 0); }
		public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(SeagullParser.ASSIGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDef; } }
	}

	[RuleVersion(0)]
	public VariableDefContext variableDef() {
		VariableDefContext _localctx = new VariableDefContext(Context, State);
		EnterRule(_localctx, 20, RULE_variableDef);
		try {
			State = 211;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 197; _localctx.n = Match(ID);
				State = 198; Match(COL);
				State = 199; _localctx.t = type(0);
				State = 200; Match(SEMI_COL);
				 _localctx.Ast =  new VariableDefinition(_localctx.t.Ast.Line, _localctx.t.Ast.Column, _localctx.n.GetText(), _localctx.t.Ast, null); 
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 203; _localctx.n = Match(ID);
				State = 204; Match(COL);
				State = 205; _localctx.t = type(0);
				State = 206; Match(ASSIGN);
				State = 207; _localctx.e = expression(0);
				State = 208; Match(SEMI_COL);
				 _localctx.Ast =  new VariableDefinition(_localctx.t.Ast.Line, _localctx.t.Ast.Column, _localctx.n.GetText(), _localctx.t.Ast, _localctx.e.Ast); 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuctionDefContext : ParserRuleContext {
		public FunctionDefinition Ast;
		public IType funcType;
		public IToken n;
		public FunctionTypeContext t;
		public FnBlockContext _fnBlock;
		public ITerminalNode COL() { return GetToken(SeagullParser.COL, 0); }
		public FnBlockContext fnBlock() {
			return GetRuleContext<FnBlockContext>(0);
		}
		public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
		public FunctionTypeContext functionType() {
			return GetRuleContext<FunctionTypeContext>(0);
		}
		public FuctionDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fuctionDef; } }
	}

	[RuleVersion(0)]
	public FuctionDefContext fuctionDef() {
		FuctionDefContext _localctx = new FuctionDefContext(Context, State);
		EnterRule(_localctx, 22, RULE_fuctionDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213; _localctx.n = Match(ID);
			State = 214; Match(COL);
			State = 215; _localctx.t = functionType();
			State = 216; _localctx._fnBlock = fnBlock();
			 _localctx.Ast =  new FunctionDefinition(_localctx.n.GetLine(), _localctx.n.GetCol(), _localctx.n.GetText(), _localctx.t.Ast, _localctx._fnBlock.Ast); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDefContext : ParserRuleContext {
		public StructDefinition Ast;
		public IToken n;
		public StructTypeContext t;
		public ITerminalNode COL() { return GetToken(SeagullParser.COL, 0); }
		public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
		public StructTypeContext structType() {
			return GetRuleContext<StructTypeContext>(0);
		}
		public StructDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDef; } }
	}

	[RuleVersion(0)]
	public StructDefContext structDef() {
		StructDefContext _localctx = new StructDefContext(Context, State);
		EnterRule(_localctx, 24, RULE_structDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219; _localctx.n = Match(ID);
			State = 220; Match(COL);
			State = 221; _localctx.t = structType();
			 _localctx.Ast =  new StructDefinition(_localctx.n.GetLine(), _localctx.n.GetCol(), _localctx.n.GetText(), _localctx.t.Ast); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelegateContext : ParserRuleContext {
		public IType Ast;
		public IToken n;
		public FunctionTypeContext _functionType;
		public ITerminalNode DELEGATE() { return GetToken(SeagullParser.DELEGATE, 0); }
		public FunctionTypeContext functionType() {
			return GetRuleContext<FunctionTypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
		public DelegateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegate; } }
	}

	[RuleVersion(0)]
	public DelegateContext @delegate() {
		DelegateContext _localctx = new DelegateContext(Context, State);
		EnterRule(_localctx, 26, RULE_delegate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224; Match(DELEGATE);
			State = 225; _localctx.n = Match(ID);
			State = 226; _localctx._functionType = functionType();
			 _localctx.Ast =  _localctx._functionType.Ast; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncInvocationContext : ParserRuleContext {
		public FunctionInvocation Ast;
		public List<IExpression> arguments = new List<IExpression>();
		public VariableContext func;
		public ExpressionContext e1;
		public ExpressionContext e2;
		public ITerminalNode L_PAR() { return GetToken(SeagullParser.L_PAR, 0); }
		public ITerminalNode R_PAR() { return GetToken(SeagullParser.R_PAR, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SeagullParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SeagullParser.COMMA, i);
		}
		public FuncInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcInvocation; } }
	}

	[RuleVersion(0)]
	public FuncInvocationContext funcInvocation() {
		FuncInvocationContext _localctx = new FuncInvocationContext(Context, State);
		EnterRule(_localctx, 28, RULE_funcInvocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229; _localctx.func = variable();
			State = 230; Match(L_PAR);
			State = 242;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 24)) & ~0x3f) == 0 && ((1L << (_la - 24)) & ((1L << (NEW - 24)) | (1L << (MINUS - 24)) | (1L << (NOT - 24)) | (1L << (L_PAR - 24)) | (1L << (ID - 24)) | (1L << (INT_CONSTANT - 24)) | (1L << (REAL_CONSTANT - 24)) | (1L << (CHAR_CONSTANT - 24)) | (1L << (STRING_CONSTANT - 24)) | (1L << (BOOLEAN_CONSTANT - 24)))) != 0)) {
				{
				State = 231; _localctx.e1 = expression(0);
				 _localctx.arguments.Add(_localctx.e1.Ast); 
				State = 239;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 233; Match(COMMA);
					State = 234; _localctx.e2 = expression(0);
					 _localctx.arguments.Add(_localctx.e2.Ast); 
					}
					}
					State = 241;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 244; Match(R_PAR);
			 _localctx.Ast =  new FunctionInvocation(_localctx.func.Ast, _localctx.arguments); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public List<IStatement> Ast = new List<IStatement>();
		public StatementContext st1;
		public StatementContext st2;
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode L_CURL() { return GetToken(SeagullParser.L_CURL, 0); }
		public ITerminalNode R_CURL() { return GetToken(SeagullParser.R_CURL, 0); }
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 30, RULE_block);
		int _la;
		try {
			State = 260;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF:
			case WHILE:
			case NEW:
			case RETURN:
			case PRINT:
			case READ:
			case MINUS:
			case NOT:
			case L_PAR:
			case ID:
			case INT_CONSTANT:
			case REAL_CONSTANT:
			case CHAR_CONSTANT:
			case STRING_CONSTANT:
			case BOOLEAN_CONSTANT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 247; _localctx.st1 = statement();
				 _localctx.Ast.AddRange(_localctx.st1.Ast); 
				}
				break;
			case L_CURL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 250; Match(L_CURL);
				State = 256;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << WHILE) | (1L << NEW) | (1L << RETURN) | (1L << PRINT) | (1L << READ) | (1L << MINUS) | (1L << NOT) | (1L << L_PAR))) != 0) || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (ID - 77)) | (1L << (INT_CONSTANT - 77)) | (1L << (REAL_CONSTANT - 77)) | (1L << (CHAR_CONSTANT - 77)) | (1L << (STRING_CONSTANT - 77)) | (1L << (BOOLEAN_CONSTANT - 77)))) != 0)) {
					{
					{
					State = 251; _localctx.st2 = statement();
					 _localctx.Ast.AddRange(_localctx.st2.Ast); 
					}
					}
					State = 258;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 259; Match(R_CURL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FnBlockContext : ParserRuleContext {
		public List<IStatement> Ast = new List<IStatement>();
		public VariableDefContext _variableDef;
		public StatementContext _statement;
		public ITerminalNode L_CURL() { return GetToken(SeagullParser.L_CURL, 0); }
		public ITerminalNode R_CURL() { return GetToken(SeagullParser.R_CURL, 0); }
		public VariableDefContext[] variableDef() {
			return GetRuleContexts<VariableDefContext>();
		}
		public VariableDefContext variableDef(int i) {
			return GetRuleContext<VariableDefContext>(i);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FnBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fnBlock; } }
	}

	[RuleVersion(0)]
	public FnBlockContext fnBlock() {
		FnBlockContext _localctx = new FnBlockContext(Context, State);
		EnterRule(_localctx, 32, RULE_fnBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262; Match(L_CURL);
			State = 271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << WHILE) | (1L << NEW) | (1L << RETURN) | (1L << PRINT) | (1L << READ) | (1L << MINUS) | (1L << NOT) | (1L << L_PAR))) != 0) || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (ID - 77)) | (1L << (INT_CONSTANT - 77)) | (1L << (REAL_CONSTANT - 77)) | (1L << (CHAR_CONSTANT - 77)) | (1L << (STRING_CONSTANT - 77)) | (1L << (BOOLEAN_CONSTANT - 77)))) != 0)) {
				{
				State = 269;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
				case 1:
					{
					{
					State = 263; _localctx._variableDef = variableDef();
					 _localctx.Ast.Add(_localctx._variableDef.Ast); 
					}
					}
					break;
				case 2:
					{
					{
					State = 266; _localctx._statement = statement();
					 _localctx.Ast.AddRange(_localctx._statement.Ast); 
					}
					}
					break;
				}
				}
				State = 273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 274; Match(R_CURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public List<IStatement> Ast = new List<IStatement>();
		public IToken w;
		public ExpressionContext cond;
		public BlockContext b;
		public IToken i;
		public BlockContext b1;
		public BlockContext b2;
		public ExpressionContext e1;
		public ExpressionContext e2;
		public IToken r;
		public ExpressionContext e;
		public ReadPrintContext _readPrint;
		public FuncInvocationContext _funcInvocation;
		public ITerminalNode L_PAR() { return GetToken(SeagullParser.L_PAR, 0); }
		public ITerminalNode R_PAR() { return GetToken(SeagullParser.R_PAR, 0); }
		public ITerminalNode WHILE() { return GetToken(SeagullParser.WHILE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ITerminalNode IF() { return GetToken(SeagullParser.IF, 0); }
		public ITerminalNode ELSE() { return GetToken(SeagullParser.ELSE, 0); }
		public ITerminalNode ASSIGN() { return GetToken(SeagullParser.ASSIGN, 0); }
		public ITerminalNode SEMI_COL() { return GetToken(SeagullParser.SEMI_COL, 0); }
		public ITerminalNode RETURN() { return GetToken(SeagullParser.RETURN, 0); }
		public ReadPrintContext readPrint() {
			return GetRuleContext<ReadPrintContext>(0);
		}
		public FuncInvocationContext funcInvocation() {
			return GetRuleContext<FuncInvocationContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_statement);
		try {
			State = 313;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 276; _localctx.w = Match(WHILE);
				State = 277; Match(L_PAR);
				State = 278; _localctx.cond = expression(0);
				State = 279; Match(R_PAR);
				State = 280; _localctx.b = block();
				 _localctx.Ast.Add(new WhileLoop(_localctx.w.GetLine(), _localctx.w.GetCol(), _localctx.cond.Ast, _localctx.b.Ast)); 
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 283; _localctx.i = Match(IF);
				State = 284; Match(L_PAR);
				State = 285; _localctx.cond = expression(0);
				State = 286; Match(R_PAR);
				State = 287; _localctx.b1 = block();
				 _localctx.Ast.Add(new IfStatement(_localctx.i.GetLine(), _localctx.i.GetCol(), _localctx.cond.Ast, _localctx.b1.Ast)); 
				State = 293;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
				case 1:
					{
					State = 289; Match(ELSE);
					State = 290; _localctx.b2 = block();
					 ((IfStatement)_localctx.Ast[0]).Else = _localctx.b2.Ast; 
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 295; _localctx.e1 = expression(0);
				State = 296; Match(ASSIGN);
				State = 297; _localctx.e2 = expression(0);
				State = 298; Match(SEMI_COL);
				 _localctx.Ast.Add(new Assignment(_localctx.e1.Ast, _localctx.e2.Ast)); 
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 301; _localctx.r = Match(RETURN);
				State = 302; _localctx.e = expression(0);
				State = 303; Match(SEMI_COL);
				 _localctx.Ast.Add(new Return(_localctx.r.GetLine(), _localctx.r.GetCol(), _localctx.e.Ast)); 
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 306; _localctx._readPrint = readPrint();
				 _localctx.Ast.Add(_localctx._readPrint.Ast); 
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 309; _localctx._funcInvocation = funcInvocation();
				State = 310; Match(SEMI_COL);
				 _localctx.Ast.Add(_localctx._funcInvocation.Ast); 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadPrintContext : ParserRuleContext {
		public IStatement Ast;
		public IToken p;
		public ExpressionContext e;
		public IToken r;
		public ITerminalNode L_PAR() { return GetToken(SeagullParser.L_PAR, 0); }
		public ITerminalNode R_PAR() { return GetToken(SeagullParser.R_PAR, 0); }
		public ITerminalNode SEMI_COL() { return GetToken(SeagullParser.SEMI_COL, 0); }
		public ITerminalNode PRINT() { return GetToken(SeagullParser.PRINT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode READ() { return GetToken(SeagullParser.READ, 0); }
		public ReadPrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_readPrint; } }
	}

	[RuleVersion(0)]
	public ReadPrintContext readPrint() {
		ReadPrintContext _localctx = new ReadPrintContext(Context, State);
		EnterRule(_localctx, 36, RULE_readPrint);
		try {
			State = 329;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRINT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 315; _localctx.p = Match(PRINT);
				State = 316; Match(L_PAR);
				State = 317; _localctx.e = expression(0);
				State = 318; Match(R_PAR);
				State = 319; Match(SEMI_COL);
				 _localctx.Ast =  new Print(_localctx.p.GetLine(), _localctx.p.GetCol(), _localctx.e.Ast); 
				}
				break;
			case READ:
				EnterOuterAlt(_localctx, 2);
				{
				State = 322; _localctx.r = Match(READ);
				State = 323; Match(L_PAR);
				State = 324; _localctx.e = expression(0);
				State = 325; Match(R_PAR);
				State = 326; Match(SEMI_COL);
				 _localctx.Ast =  new Read(_localctx.r.GetLine(), _localctx.r.GetCol(), _localctx.e.Ast); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public IExpression Ast;
		public ExpressionContext e1;
		public VariableContext _variable;
		public LiteralContext _literal;
		public FuncInvocationContext _funcInvocation;
		public ExpressionContext e;
		public ExpressionContext _expression;
		public VariableContext var;
		public IToken att;
		public IToken n;
		public IToken id;
		public IToken um;
		public IToken not;
		public IToken p;
		public PrimitiveContext t;
		public IToken op;
		public ExpressionContext e2;
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public FuncInvocationContext funcInvocation() {
			return GetRuleContext<FuncInvocationContext>(0);
		}
		public ITerminalNode L_PAR() { return GetToken(SeagullParser.L_PAR, 0); }
		public ITerminalNode R_PAR() { return GetToken(SeagullParser.R_PAR, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(SeagullParser.DOT, 0); }
		public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
		public ITerminalNode NEW() { return GetToken(SeagullParser.NEW, 0); }
		public ITerminalNode MINUS() { return GetToken(SeagullParser.MINUS, 0); }
		public ITerminalNode NOT() { return GetToken(SeagullParser.NOT, 0); }
		public PrimitiveContext primitive() {
			return GetRuleContext<PrimitiveContext>(0);
		}
		public ITerminalNode STAR() { return GetToken(SeagullParser.STAR, 0); }
		public ITerminalNode SLASH() { return GetToken(SeagullParser.SLASH, 0); }
		public ITerminalNode PERCENT() { return GetToken(SeagullParser.PERCENT, 0); }
		public ITerminalNode PLUS() { return GetToken(SeagullParser.PLUS, 0); }
		public ITerminalNode GREATER_THAN() { return GetToken(SeagullParser.GREATER_THAN, 0); }
		public ITerminalNode LESS_THAN() { return GetToken(SeagullParser.LESS_THAN, 0); }
		public ITerminalNode GREATER_EQ_THAN() { return GetToken(SeagullParser.GREATER_EQ_THAN, 0); }
		public ITerminalNode LESS_EQ_THAN() { return GetToken(SeagullParser.LESS_EQ_THAN, 0); }
		public ITerminalNode EQUAL() { return GetToken(SeagullParser.EQUAL, 0); }
		public ITerminalNode NOT_EQUAL() { return GetToken(SeagullParser.NOT_EQUAL, 0); }
		public ITerminalNode AND() { return GetToken(SeagullParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(SeagullParser.OR, 0); }
		public ITerminalNode L_BRACKET() { return GetToken(SeagullParser.L_BRACKET, 0); }
		public ITerminalNode R_BRACKET() { return GetToken(SeagullParser.R_BRACKET, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 38;
		EnterRecursionRule(_localctx, 38, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 368;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 332; _localctx._variable = variable();
				 _localctx.Ast =  _localctx._variable.Ast; 
				}
				break;
			case 2:
				{
				State = 335; _localctx._literal = literal();
				 _localctx.Ast =  _localctx._literal.Ast; 
				}
				break;
			case 3:
				{
				State = 338; _localctx._funcInvocation = funcInvocation();
				 _localctx.Ast =  _localctx._funcInvocation.Ast; 
				}
				break;
			case 4:
				{
				State = 341; Match(L_PAR);
				State = 342; _localctx.e = _localctx._expression = expression(0);
				State = 343; Match(R_PAR);
				 _localctx.Ast =  _localctx.e.Ast; 
				}
				break;
			case 5:
				{
				State = 346; _localctx.var = _localctx._variable = variable();
				State = 347; Match(DOT);
				State = 348; _localctx.att = Match(ID);
				 _localctx.Ast =  new AttributeAccess(_localctx.var.Ast, (_localctx.att!=null?_localctx.att.Text:null)); 
				}
				break;
			case 6:
				{
				State = 351; _localctx.n = Match(NEW);
				State = 352; _localctx.id = Match(ID);
				 _localctx.Ast =  new New(_localctx.n.GetLine(), _localctx.n.GetCol(), _localctx.id.GetText()); 
				}
				break;
			case 7:
				{
				State = 354; _localctx.um = Match(MINUS);
				State = 355; _localctx._expression = expression(7);
				 _localctx.Ast =  new UnaryMinus(_localctx.um.GetLine(), _localctx.um.GetCol(), _localctx._expression.Ast); 
				}
				break;
			case 8:
				{
				State = 358; _localctx.not = Match(NOT);
				State = 359; _localctx._expression = expression(6);
				 _localctx.Ast =  new Negation(_localctx.not.GetLine(), _localctx.not.GetCol(), _localctx._expression.Ast); 
				}
				break;
			case 9:
				{
				State = 362; _localctx.p = Match(L_PAR);
				State = 363; _localctx.t = primitive();
				State = 364; Match(R_PAR);
				State = 365; _localctx.e = _localctx._expression = expression(3);
				 _localctx.Ast =  new Cast(_localctx.p.GetLine(), _localctx.p.GetCol(), _localctx.t.Ast, _localctx.e.Ast); 
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 398;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 396;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.e1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 370;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 371;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << SLASH) | (1L << PERCENT))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 372; _localctx.e2 = _localctx._expression = expression(6);
						 _localctx.Ast =  new Arithmetic((_localctx.op!=null?_localctx.op.Text:null), _localctx.e1.Ast, _localctx.e2.Ast); 
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.e1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 375;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 376;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 377; _localctx.e2 = _localctx._expression = expression(5);
						 _localctx.Ast =  new Arithmetic((_localctx.op!=null?_localctx.op.Text:null), _localctx.e1.Ast, _localctx.e2.Ast); 
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.e1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 380;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 381;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (EQUAL - 71)) | (1L << (NOT_EQUAL - 71)) | (1L << (LESS_THAN - 71)) | (1L << (GREATER_THAN - 71)) | (1L << (LESS_EQ_THAN - 71)) | (1L << (GREATER_EQ_THAN - 71)))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 382; _localctx.e2 = _localctx._expression = expression(3);
						 _localctx.Ast =  new Comparison((_localctx.op!=null?_localctx.op.Text:null), _localctx.e1.Ast, _localctx.e2.Ast); 
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.e1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 385;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 386;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==AND || _la==OR) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 387; _localctx.e2 = _localctx._expression = expression(2);
						 _localctx.Ast =  new LogicalOperation((_localctx.op!=null?_localctx.op.Text:null), _localctx.e1.Ast, _localctx.e2.Ast); 
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.e1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 390;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 391; Match(L_BRACKET);
						State = 392; _localctx.e2 = _localctx._expression = expression(0);
						State = 393; Match(R_BRACKET);
						 _localctx.Ast =  new Indexing(_localctx.e1.Ast, _localctx.e2.Ast); 
						}
						break;
					}
					} 
				}
				State = 400;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public Variable Ast;
		public IToken _ID;
		public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 40, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401; _localctx._ID = Match(ID);
			 _localctx.Ast =  new Variable(_localctx._ID.GetLine(), _localctx._ID.GetCol(), (_localctx._ID!=null?_localctx._ID.Text:null)); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public IExpression Ast;
		public IToken i;
		public IToken r;
		public IToken c;
		public IToken s;
		public IToken b;
		public ITerminalNode INT_CONSTANT() { return GetToken(SeagullParser.INT_CONSTANT, 0); }
		public ITerminalNode REAL_CONSTANT() { return GetToken(SeagullParser.REAL_CONSTANT, 0); }
		public ITerminalNode CHAR_CONSTANT() { return GetToken(SeagullParser.CHAR_CONSTANT, 0); }
		public ITerminalNode STRING_CONSTANT() { return GetToken(SeagullParser.STRING_CONSTANT, 0); }
		public ITerminalNode BOOLEAN_CONSTANT() { return GetToken(SeagullParser.BOOLEAN_CONSTANT, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 42, RULE_literal);
		try {
			State = 414;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_CONSTANT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 404; _localctx.i = Match(INT_CONSTANT);
				 _localctx.Ast =  new IntLiteral(_localctx.i.GetLine(), _localctx.i.GetCol(), LexerHelper.LexemeToInt((_localctx.i!=null?_localctx.i.Text:null))); 
				}
				break;
			case REAL_CONSTANT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 406; _localctx.r = Match(REAL_CONSTANT);
				 _localctx.Ast =  new DoubleLiteral(_localctx.r.GetLine(), _localctx.r.GetCol(), LexerHelper.LexemeToReal((_localctx.r!=null?_localctx.r.Text:null))); 
				}
				break;
			case CHAR_CONSTANT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 408; _localctx.c = Match(CHAR_CONSTANT);
				 _localctx.Ast =  new CharLiteral(_localctx.c.GetLine(), _localctx.c.GetCol(), LexerHelper.LexemeToChar((_localctx.c!=null?_localctx.c.Text:null))); 
				}
				break;
			case STRING_CONSTANT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 410; _localctx.s = Match(STRING_CONSTANT);
				 _localctx.Ast =  new StringLiteral(_localctx.s.GetLine(), _localctx.s.GetCol(), (_localctx.s!=null?_localctx.s.Text:null)); 
				}
				break;
			case BOOLEAN_CONSTANT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 412; _localctx.b = Match(BOOLEAN_CONSTANT);
				 _localctx.Ast =  new BooleanLiteral(_localctx.b.GetLine(), _localctx.b.GetCol(), LexerHelper.LexemeToBoolean((_localctx.b!=null?_localctx.b.Text:null))); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return type_sempred((TypeContext)_localctx, predIndex);
		case 19: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool type_sempred(TypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 2);
		case 4: return Precpred(Context, 1);
		case 5: return Precpred(Context, 10);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '^', '\x1A3', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\a', '\x2', '\x32', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '\x35', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\a', '\x2', ':', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '=', '\v', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 
		'R', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\a', '\x4', ']', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '`', '\v', '\x4', 
		'\a', '\x4', '\x62', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x65', '\v', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', 'k', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', 'v', '\n', '\x5', '\x5', '\x5', 'x', '\n', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\x86', '\n', '\x6', '\f', '\x6', 
		'\xE', '\x6', '\x89', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\a', '\x6', '\x93', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x96', 
		'\v', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\a', '\a', '\x9D', '\n', '\a', '\f', '\a', '\xE', '\a', '\xA0', 
		'\v', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x5', '\b', '\xAD', '\n', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x5', '\v', '\xB5', 
		'\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', 
		'\v', '\xBB', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x5', '\v', '\xC1', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x5', '\v', '\xC6', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x5', '\f', '\xD6', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\a', '\x10', '\xF0', '\n', '\x10', '\f', '\x10', '\xE', 
		'\x10', '\xF3', '\v', '\x10', '\x5', '\x10', '\xF5', '\n', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', 
		'\x11', '\x101', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\x104', '\v', 
		'\x11', '\x3', '\x11', '\x5', '\x11', '\x107', '\n', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\a', '\x12', '\x110', '\n', '\x12', '\f', '\x12', '\xE', 
		'\x12', '\x113', '\v', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x5', '\x13', '\x128', '\n', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x5', '\x13', '\x13C', '\n', '\x13', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x14C', '\n', 
		'\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x173', '\n', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\a', '\x15', '\x18F', '\n', '\x15', '\f', '\x15', '\xE', 
		'\x15', '\x192', '\v', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x5', '\x17', '\x1A1', '\n', '\x17', '\x3', '\x17', '\x2', '\x4', '\x6', 
		'(', '\x18', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '\x2', '\a', '\x3', '\x2', '!', '\"', '\x3', '\x2', '-', '/', 
		'\x3', '\x2', '\x31', '\x32', '\x3', '\x2', 'I', 'N', '\x3', '\x2', ';', 
		'<', '\x2', '\x1C0', '\x2', '\x33', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x6', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x66', '\x3', '\x2', '\x2', '\x2', '\n', '{', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\x97', '\x3', '\x2', '\x2', '\x2', '\xE', '\xAC', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '\xAE', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\xB1', '\x3', '\x2', '\x2', '\x2', '\x14', '\xC5', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\xD5', '\x3', '\x2', '\x2', '\x2', '\x18', '\xD7', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\xDD', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\xE2', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xE7', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\x106', '\x3', '\x2', '\x2', '\x2', '\"', '\x108', '\x3', 
		'\x2', '\x2', '\x2', '$', '\x13B', '\x3', '\x2', '\x2', '\x2', '&', '\x14B', 
		'\x3', '\x2', '\x2', '\x2', '(', '\x172', '\x3', '\x2', '\x2', '\x2', 
		'*', '\x193', '\x3', '\x2', '\x2', '\x2', ',', '\x1A0', '\x3', '\x2', 
		'\x2', '\x2', '.', '/', '\x5', '\x4', '\x3', '\x2', '/', '\x30', '\b', 
		'\x2', '\x1', '\x2', '\x30', '\x32', '\x3', '\x2', '\x2', '\x2', '\x31', 
		'.', '\x3', '\x2', '\x2', '\x2', '\x32', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x31', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\x3', 
		'\x2', '\x2', '\x2', '\x34', ';', '\x3', '\x2', '\x2', '\x2', '\x35', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\x5', '\x14', '\v', 
		'\x2', '\x37', '\x38', '\b', '\x2', '\x1', '\x2', '\x38', ':', '\x3', 
		'\x2', '\x2', '\x2', '\x39', '\x36', '\x3', '\x2', '\x2', '\x2', ':', 
		'=', '\x3', '\x2', '\x2', '\x2', ';', '\x39', '\x3', '\x2', '\x2', '\x2', 
		';', '<', '\x3', '\x2', '\x2', '\x2', '<', '>', '\x3', '\x2', '\x2', '\x2', 
		'=', ';', '\x3', '\x2', '\x2', '\x2', '>', '?', '\a', '\x2', '\x2', '\x3', 
		'?', '@', '\b', '\x2', '\x1', '\x2', '@', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '\x42', '\a', '#', '\x2', '\x2', '\x42', '\x43', '\a', 
		'S', '\x2', '\x2', '\x43', '\x44', '\b', '\x3', '\x1', '\x2', '\x44', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\b', '\x4', '\x1', 
		'\x2', '\x46', 'G', '\x5', '\xE', '\b', '\x2', 'G', 'H', '\b', '\x4', 
		'\x1', '\x2', 'H', 'R', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\x5', '\b', 
		'\x5', '\x2', 'J', 'K', '\b', '\x4', '\x1', '\x2', 'K', 'R', '\x3', '\x2', 
		'\x2', '\x2', 'L', 'M', '\x5', '\f', '\a', '\x2', 'M', 'N', '\b', '\x4', 
		'\x1', '\x2', 'N', 'R', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\a', 'O', 
		'\x2', '\x2', 'P', 'R', '\b', '\x4', '\x1', '\x2', 'Q', '\x45', '\x3', 
		'\x2', '\x2', '\x2', 'Q', 'I', '\x3', '\x2', '\x2', '\x2', 'Q', 'L', '\x3', 
		'\x2', '\x2', '\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'R', '\x63', 
		'\x3', '\x2', '\x2', '\x2', 'S', 'T', '\f', '\x4', '\x2', '\x2', 'T', 
		'U', '\a', '=', '\x2', '\x2', 'U', 'V', '\a', 'P', '\x2', '\x2', 'V', 
		'W', '\a', '>', '\x2', '\x2', 'W', '^', '\b', '\x4', '\x1', '\x2', 'X', 
		'Y', '\a', '=', '\x2', '\x2', 'Y', 'Z', '\a', 'P', '\x2', '\x2', 'Z', 
		'[', '\a', '>', '\x2', '\x2', '[', ']', '\b', '\x4', '\x1', '\x2', '\\', 
		'X', '\x3', '\x2', '\x2', '\x2', ']', '`', '\x3', '\x2', '\x2', '\x2', 
		'^', '\\', '\x3', '\x2', '\x2', '\x2', '^', '_', '\x3', '\x2', '\x2', 
		'\x2', '_', '\x62', '\x3', '\x2', '\x2', '\x2', '`', '^', '\x3', '\x2', 
		'\x2', '\x2', '\x61', 'S', '\x3', '\x2', '\x2', '\x2', '\x62', '\x65', 
		'\x3', '\x2', '\x2', '\x2', '\x63', '\x61', '\x3', '\x2', '\x2', '\x2', 
		'\x63', '\x64', '\x3', '\x2', '\x2', '\x2', '\x64', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\x65', '\x63', '\x3', '\x2', '\x2', '\x2', '\x66', 'j', 
		'\a', '?', '\x2', '\x2', 'g', 'h', '\x5', '\n', '\x6', '\x2', 'h', 'i', 
		'\b', '\x5', '\x1', '\x2', 'i', 'k', '\x3', '\x2', '\x2', '\x2', 'j', 
		'g', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\x3', '\x2', '\x2', '\x2', 
		'k', 'l', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\a', '@', '\x2', '\x2', 
		'm', 'w', '\b', '\x5', '\x1', '\x2', 'n', 'u', '\a', '\x30', '\x2', '\x2', 
		'o', 'p', '\x5', '\x6', '\x4', '\x2', 'p', 'q', '\b', '\x5', '\x1', '\x2', 
		'q', 'v', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\x5', '\x10', '\t', '\x2', 
		's', 't', '\b', '\x5', '\x1', '\x2', 't', 'v', '\x3', '\x2', '\x2', '\x2', 
		'u', 'o', '\x3', '\x2', '\x2', '\x2', 'u', 'r', '\x3', '\x2', '\x2', '\x2', 
		'v', 'x', '\x3', '\x2', '\x2', '\x2', 'w', 'n', '\x3', '\x2', '\x2', '\x2', 
		'w', 'x', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\x3', '\x2', '\x2', '\x2', 
		'y', 'z', '\b', '\x5', '\x1', '\x2', 'z', '\t', '\x3', '\x2', '\x2', '\x2', 
		'{', '|', '\a', 'O', '\x2', '\x2', '|', '}', '\a', '*', '\x2', '\x2', 
		'}', '~', '\x5', '\x6', '\x4', '\x2', '~', '\x87', '\b', '\x6', '\x1', 
		'\x2', '\x7F', '\x80', '\a', ')', '\x2', '\x2', '\x80', '\x81', '\a', 
		'O', '\x2', '\x2', '\x81', '\x82', '\a', '*', '\x2', '\x2', '\x82', '\x83', 
		'\x5', '\x6', '\x4', '\x2', '\x83', '\x84', '\b', '\x6', '\x1', '\x2', 
		'\x84', '\x86', '\x3', '\x2', '\x2', '\x2', '\x85', '\x7F', '\x3', '\x2', 
		'\x2', '\x2', '\x86', '\x89', '\x3', '\x2', '\x2', '\x2', '\x87', '\x85', 
		'\x3', '\x2', '\x2', '\x2', '\x87', '\x88', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\x94', '\x3', '\x2', '\x2', '\x2', '\x89', '\x87', '\x3', '\x2', 
		'\x2', '\x2', '\x8A', '\x8B', '\a', ')', '\x2', '\x2', '\x8B', '\x8C', 
		'\a', 'O', '\x2', '\x2', '\x8C', '\x8D', '\a', '*', '\x2', '\x2', '\x8D', 
		'\x8E', '\x5', '\x6', '\x4', '\x2', '\x8E', '\x8F', '\a', ',', '\x2', 
		'\x2', '\x8F', '\x90', '\x5', ',', '\x17', '\x2', '\x90', '\x91', '\b', 
		'\x6', '\x1', '\x2', '\x91', '\x93', '\x3', '\x2', '\x2', '\x2', '\x92', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', '\x93', '\x96', '\x3', '\x2', '\x2', 
		'\x2', '\x94', '\x92', '\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\x95', '\v', '\x3', '\x2', '\x2', '\x2', '\x96', 
		'\x94', '\x3', '\x2', '\x2', '\x2', '\x97', '\x98', '\a', '\t', '\x2', 
		'\x2', '\x98', '\x9E', '\a', '\x41', '\x2', '\x2', '\x99', '\x9A', '\x5', 
		'\x16', '\f', '\x2', '\x9A', '\x9B', '\b', '\a', '\x1', '\x2', '\x9B', 
		'\x9D', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x99', '\x3', '\x2', '\x2', 
		'\x2', '\x9D', '\xA0', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9C', '\x3', 
		'\x2', '\x2', '\x2', '\x9E', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x9F', 
		'\xA1', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x9E', '\x3', '\x2', '\x2', 
		'\x2', '\xA1', '\xA2', '\a', '\x42', '\x2', '\x2', '\xA2', '\xA3', '\b', 
		'\a', '\x1', '\x2', '\xA3', '\r', '\x3', '\x2', '\x2', '\x2', '\xA4', 
		'\xA5', '\a', '\x5', '\x2', '\x2', '\xA5', '\xAD', '\b', '\b', '\x1', 
		'\x2', '\xA6', '\xA7', '\a', '\x6', '\x2', '\x2', '\xA7', '\xAD', '\b', 
		'\b', '\x1', '\x2', '\xA8', '\xA9', '\a', '\a', '\x2', '\x2', '\xA9', 
		'\xAD', '\b', '\b', '\x1', '\x2', '\xAA', '\xAB', '\a', '\b', '\x2', '\x2', 
		'\xAB', '\xAD', '\b', '\b', '\x1', '\x2', '\xAC', '\xA4', '\x3', '\x2', 
		'\x2', '\x2', '\xAC', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xA8', 
		'\x3', '\x2', '\x2', '\x2', '\xAC', '\xAA', '\x3', '\x2', '\x2', '\x2', 
		'\xAD', '\xF', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAF', '\a', '\x4', 
		'\x2', '\x2', '\xAF', '\xB0', '\b', '\t', '\x1', '\x2', '\xB0', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\t', '\x2', '\x2', '\x2', 
		'\xB2', '\x13', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB5', '\x5', '\x12', 
		'\n', '\x2', '\xB4', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', 
		'\x3', '\x2', '\x2', '\x2', '\xB5', '\xB6', '\x3', '\x2', '\x2', '\x2', 
		'\xB6', '\xB7', '\x5', '\x16', '\f', '\x2', '\xB7', '\xB8', '\b', '\v', 
		'\x1', '\x2', '\xB8', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBB', 
		'\x5', '\x12', '\n', '\x2', '\xBA', '\xB9', '\x3', '\x2', '\x2', '\x2', 
		'\xBA', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBC', '\x3', '\x2', 
		'\x2', '\x2', '\xBC', '\xBD', '\x5', '\x18', '\r', '\x2', '\xBD', '\xBE', 
		'\b', '\v', '\x1', '\x2', '\xBE', '\xC6', '\x3', '\x2', '\x2', '\x2', 
		'\xBF', '\xC1', '\x5', '\x12', '\n', '\x2', '\xC0', '\xBF', '\x3', '\x2', 
		'\x2', '\x2', '\xC0', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', 
		'\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', '\x5', '\x1A', '\xE', '\x2', 
		'\xC3', '\xC4', '\b', '\v', '\x1', '\x2', '\xC4', '\xC6', '\x3', '\x2', 
		'\x2', '\x2', '\xC5', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xBA', 
		'\x3', '\x2', '\x2', '\x2', '\xC5', '\xC0', '\x3', '\x2', '\x2', '\x2', 
		'\xC6', '\x15', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', '\a', 'O', 
		'\x2', '\x2', '\xC8', '\xC9', '\a', '*', '\x2', '\x2', '\xC9', '\xCA', 
		'\x5', '\x6', '\x4', '\x2', '\xCA', '\xCB', '\a', '+', '\x2', '\x2', '\xCB', 
		'\xCC', '\b', '\f', '\x1', '\x2', '\xCC', '\xD6', '\x3', '\x2', '\x2', 
		'\x2', '\xCD', '\xCE', '\a', 'O', '\x2', '\x2', '\xCE', '\xCF', '\a', 
		'*', '\x2', '\x2', '\xCF', '\xD0', '\x5', '\x6', '\x4', '\x2', '\xD0', 
		'\xD1', '\a', ',', '\x2', '\x2', '\xD1', '\xD2', '\x5', '(', '\x15', '\x2', 
		'\xD2', '\xD3', '\a', '+', '\x2', '\x2', '\xD3', '\xD4', '\b', '\f', '\x1', 
		'\x2', '\xD4', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xC7', '\x3', 
		'\x2', '\x2', '\x2', '\xD5', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xD6', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD8', '\a', 'O', '\x2', 
		'\x2', '\xD8', '\xD9', '\a', '*', '\x2', '\x2', '\xD9', '\xDA', '\x5', 
		'\b', '\x5', '\x2', '\xDA', '\xDB', '\x5', '\"', '\x12', '\x2', '\xDB', 
		'\xDC', '\b', '\r', '\x1', '\x2', '\xDC', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\xDD', '\xDE', '\a', 'O', '\x2', '\x2', '\xDE', '\xDF', '\a', 
		'*', '\x2', '\x2', '\xDF', '\xE0', '\x5', '\f', '\a', '\x2', '\xE0', '\xE1', 
		'\b', '\xE', '\x1', '\x2', '\xE1', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\xE2', '\xE3', '\a', '\r', '\x2', '\x2', '\xE3', '\xE4', '\a', 'O', '\x2', 
		'\x2', '\xE4', '\xE5', '\x5', '\b', '\x5', '\x2', '\xE5', '\xE6', '\b', 
		'\xF', '\x1', '\x2', '\xE6', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xE7', 
		'\xE8', '\x5', '*', '\x16', '\x2', '\xE8', '\xF4', '\a', '?', '\x2', '\x2', 
		'\xE9', '\xEA', '\x5', '(', '\x15', '\x2', '\xEA', '\xF1', '\b', '\x10', 
		'\x1', '\x2', '\xEB', '\xEC', '\a', ')', '\x2', '\x2', '\xEC', '\xED', 
		'\x5', '(', '\x15', '\x2', '\xED', '\xEE', '\b', '\x10', '\x1', '\x2', 
		'\xEE', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xEB', '\x3', '\x2', 
		'\x2', '\x2', '\xF0', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xEF', 
		'\x3', '\x2', '\x2', '\x2', '\xF1', '\xF2', '\x3', '\x2', '\x2', '\x2', 
		'\xF2', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF1', '\x3', '\x2', 
		'\x2', '\x2', '\xF4', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF5', 
		'\x3', '\x2', '\x2', '\x2', '\xF5', '\xF6', '\x3', '\x2', '\x2', '\x2', 
		'\xF6', '\xF7', '\a', '@', '\x2', '\x2', '\xF7', '\xF8', '\b', '\x10', 
		'\x1', '\x2', '\xF8', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFA', 
		'\x5', '$', '\x13', '\x2', '\xFA', '\xFB', '\b', '\x11', '\x1', '\x2', 
		'\xFB', '\x107', '\x3', '\x2', '\x2', '\x2', '\xFC', '\x102', '\a', '\x41', 
		'\x2', '\x2', '\xFD', '\xFE', '\x5', '$', '\x13', '\x2', '\xFE', '\xFF', 
		'\b', '\x11', '\x1', '\x2', '\xFF', '\x101', '\x3', '\x2', '\x2', '\x2', 
		'\x100', '\xFD', '\x3', '\x2', '\x2', '\x2', '\x101', '\x104', '\x3', 
		'\x2', '\x2', '\x2', '\x102', '\x100', '\x3', '\x2', '\x2', '\x2', '\x102', 
		'\x103', '\x3', '\x2', '\x2', '\x2', '\x103', '\x105', '\x3', '\x2', '\x2', 
		'\x2', '\x104', '\x102', '\x3', '\x2', '\x2', '\x2', '\x105', '\x107', 
		'\a', '\x42', '\x2', '\x2', '\x106', '\xF9', '\x3', '\x2', '\x2', '\x2', 
		'\x106', '\xFC', '\x3', '\x2', '\x2', '\x2', '\x107', '!', '\x3', '\x2', 
		'\x2', '\x2', '\x108', '\x111', '\a', '\x41', '\x2', '\x2', '\x109', '\x10A', 
		'\x5', '\x16', '\f', '\x2', '\x10A', '\x10B', '\b', '\x12', '\x1', '\x2', 
		'\x10B', '\x110', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x10D', '\x5', 
		'$', '\x13', '\x2', '\x10D', '\x10E', '\b', '\x12', '\x1', '\x2', '\x10E', 
		'\x110', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x109', '\x3', '\x2', '\x2', 
		'\x2', '\x10F', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x110', '\x113', 
		'\x3', '\x2', '\x2', '\x2', '\x111', '\x10F', '\x3', '\x2', '\x2', '\x2', 
		'\x111', '\x112', '\x3', '\x2', '\x2', '\x2', '\x112', '\x114', '\x3', 
		'\x2', '\x2', '\x2', '\x113', '\x111', '\x3', '\x2', '\x2', '\x2', '\x114', 
		'\x115', '\a', '\x42', '\x2', '\x2', '\x115', '#', '\x3', '\x2', '\x2', 
		'\x2', '\x116', '\x117', '\a', '\x13', '\x2', '\x2', '\x117', '\x118', 
		'\a', '?', '\x2', '\x2', '\x118', '\x119', '\x5', '(', '\x15', '\x2', 
		'\x119', '\x11A', '\a', '@', '\x2', '\x2', '\x11A', '\x11B', '\x5', ' ', 
		'\x11', '\x2', '\x11B', '\x11C', '\b', '\x13', '\x1', '\x2', '\x11C', 
		'\x13C', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x11E', '\a', '\x11', '\x2', 
		'\x2', '\x11E', '\x11F', '\a', '?', '\x2', '\x2', '\x11F', '\x120', '\x5', 
		'(', '\x15', '\x2', '\x120', '\x121', '\a', '@', '\x2', '\x2', '\x121', 
		'\x122', '\x5', ' ', '\x11', '\x2', '\x122', '\x127', '\b', '\x13', '\x1', 
		'\x2', '\x123', '\x124', '\a', '\x12', '\x2', '\x2', '\x124', '\x125', 
		'\x5', ' ', '\x11', '\x2', '\x125', '\x126', '\b', '\x13', '\x1', '\x2', 
		'\x126', '\x128', '\x3', '\x2', '\x2', '\x2', '\x127', '\x123', '\x3', 
		'\x2', '\x2', '\x2', '\x127', '\x128', '\x3', '\x2', '\x2', '\x2', '\x128', 
		'\x13C', '\x3', '\x2', '\x2', '\x2', '\x129', '\x12A', '\x5', '(', '\x15', 
		'\x2', '\x12A', '\x12B', '\a', ',', '\x2', '\x2', '\x12B', '\x12C', '\x5', 
		'(', '\x15', '\x2', '\x12C', '\x12D', '\a', '+', '\x2', '\x2', '\x12D', 
		'\x12E', '\b', '\x13', '\x1', '\x2', '\x12E', '\x13C', '\x3', '\x2', '\x2', 
		'\x2', '\x12F', '\x130', '\a', '\x1C', '\x2', '\x2', '\x130', '\x131', 
		'\x5', '(', '\x15', '\x2', '\x131', '\x132', '\a', '+', '\x2', '\x2', 
		'\x132', '\x133', '\b', '\x13', '\x1', '\x2', '\x133', '\x13C', '\x3', 
		'\x2', '\x2', '\x2', '\x134', '\x135', '\x5', '&', '\x14', '\x2', '\x135', 
		'\x136', '\b', '\x13', '\x1', '\x2', '\x136', '\x13C', '\x3', '\x2', '\x2', 
		'\x2', '\x137', '\x138', '\x5', '\x1E', '\x10', '\x2', '\x138', '\x139', 
		'\a', '+', '\x2', '\x2', '\x139', '\x13A', '\b', '\x13', '\x1', '\x2', 
		'\x13A', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x116', '\x3', 
		'\x2', '\x2', '\x2', '\x13B', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x13B', 
		'\x129', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x12F', '\x3', '\x2', '\x2', 
		'\x2', '\x13B', '\x134', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x137', 
		'\x3', '\x2', '\x2', '\x2', '\x13C', '%', '\x3', '\x2', '\x2', '\x2', 
		'\x13D', '\x13E', '\a', '\x1D', '\x2', '\x2', '\x13E', '\x13F', '\a', 
		'?', '\x2', '\x2', '\x13F', '\x140', '\x5', '(', '\x15', '\x2', '\x140', 
		'\x141', '\a', '@', '\x2', '\x2', '\x141', '\x142', '\a', '+', '\x2', 
		'\x2', '\x142', '\x143', '\b', '\x14', '\x1', '\x2', '\x143', '\x14C', 
		'\x3', '\x2', '\x2', '\x2', '\x144', '\x145', '\a', '\x1E', '\x2', '\x2', 
		'\x145', '\x146', '\a', '?', '\x2', '\x2', '\x146', '\x147', '\x5', '(', 
		'\x15', '\x2', '\x147', '\x148', '\a', '@', '\x2', '\x2', '\x148', '\x149', 
		'\a', '+', '\x2', '\x2', '\x149', '\x14A', '\b', '\x14', '\x1', '\x2', 
		'\x14A', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x14B', '\x13D', '\x3', 
		'\x2', '\x2', '\x2', '\x14B', '\x144', '\x3', '\x2', '\x2', '\x2', '\x14C', 
		'\'', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x14E', '\b', '\x15', '\x1', 
		'\x2', '\x14E', '\x14F', '\x5', '*', '\x16', '\x2', '\x14F', '\x150', 
		'\b', '\x15', '\x1', '\x2', '\x150', '\x173', '\x3', '\x2', '\x2', '\x2', 
		'\x151', '\x152', '\x5', ',', '\x17', '\x2', '\x152', '\x153', '\b', '\x15', 
		'\x1', '\x2', '\x153', '\x173', '\x3', '\x2', '\x2', '\x2', '\x154', '\x155', 
		'\x5', '\x1E', '\x10', '\x2', '\x155', '\x156', '\b', '\x15', '\x1', '\x2', 
		'\x156', '\x173', '\x3', '\x2', '\x2', '\x2', '\x157', '\x158', '\a', 
		'?', '\x2', '\x2', '\x158', '\x159', '\x5', '(', '\x15', '\x2', '\x159', 
		'\x15A', '\a', '@', '\x2', '\x2', '\x15A', '\x15B', '\b', '\x15', '\x1', 
		'\x2', '\x15B', '\x173', '\x3', '\x2', '\x2', '\x2', '\x15C', '\x15D', 
		'\x5', '*', '\x16', '\x2', '\x15D', '\x15E', '\a', '(', '\x2', '\x2', 
		'\x15E', '\x15F', '\a', 'O', '\x2', '\x2', '\x15F', '\x160', '\b', '\x15', 
		'\x1', '\x2', '\x160', '\x173', '\x3', '\x2', '\x2', '\x2', '\x161', '\x162', 
		'\a', '\x1A', '\x2', '\x2', '\x162', '\x163', '\a', 'O', '\x2', '\x2', 
		'\x163', '\x173', '\b', '\x15', '\x1', '\x2', '\x164', '\x165', '\a', 
		'\x32', '\x2', '\x2', '\x165', '\x166', '\x5', '(', '\x15', '\t', '\x166', 
		'\x167', '\b', '\x15', '\x1', '\x2', '\x167', '\x173', '\x3', '\x2', '\x2', 
		'\x2', '\x168', '\x169', '\a', ':', '\x2', '\x2', '\x169', '\x16A', '\x5', 
		'(', '\x15', '\b', '\x16A', '\x16B', '\b', '\x15', '\x1', '\x2', '\x16B', 
		'\x173', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x16D', '\a', '?', '\x2', 
		'\x2', '\x16D', '\x16E', '\x5', '\xE', '\b', '\x2', '\x16E', '\x16F', 
		'\a', '@', '\x2', '\x2', '\x16F', '\x170', '\x5', '(', '\x15', '\x5', 
		'\x170', '\x171', '\b', '\x15', '\x1', '\x2', '\x171', '\x173', '\x3', 
		'\x2', '\x2', '\x2', '\x172', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x172', 
		'\x151', '\x3', '\x2', '\x2', '\x2', '\x172', '\x154', '\x3', '\x2', '\x2', 
		'\x2', '\x172', '\x157', '\x3', '\x2', '\x2', '\x2', '\x172', '\x15C', 
		'\x3', '\x2', '\x2', '\x2', '\x172', '\x161', '\x3', '\x2', '\x2', '\x2', 
		'\x172', '\x164', '\x3', '\x2', '\x2', '\x2', '\x172', '\x168', '\x3', 
		'\x2', '\x2', '\x2', '\x172', '\x16C', '\x3', '\x2', '\x2', '\x2', '\x173', 
		'\x190', '\x3', '\x2', '\x2', '\x2', '\x174', '\x175', '\f', '\a', '\x2', 
		'\x2', '\x175', '\x176', '\t', '\x3', '\x2', '\x2', '\x176', '\x177', 
		'\x5', '(', '\x15', '\b', '\x177', '\x178', '\b', '\x15', '\x1', '\x2', 
		'\x178', '\x18F', '\x3', '\x2', '\x2', '\x2', '\x179', '\x17A', '\f', 
		'\x6', '\x2', '\x2', '\x17A', '\x17B', '\t', '\x4', '\x2', '\x2', '\x17B', 
		'\x17C', '\x5', '(', '\x15', '\a', '\x17C', '\x17D', '\b', '\x15', '\x1', 
		'\x2', '\x17D', '\x18F', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x17F', 
		'\f', '\x4', '\x2', '\x2', '\x17F', '\x180', '\t', '\x5', '\x2', '\x2', 
		'\x180', '\x181', '\x5', '(', '\x15', '\x5', '\x181', '\x182', '\b', '\x15', 
		'\x1', '\x2', '\x182', '\x18F', '\x3', '\x2', '\x2', '\x2', '\x183', '\x184', 
		'\f', '\x3', '\x2', '\x2', '\x184', '\x185', '\t', '\x6', '\x2', '\x2', 
		'\x185', '\x186', '\x5', '(', '\x15', '\x4', '\x186', '\x187', '\b', '\x15', 
		'\x1', '\x2', '\x187', '\x18F', '\x3', '\x2', '\x2', '\x2', '\x188', '\x189', 
		'\f', '\f', '\x2', '\x2', '\x189', '\x18A', '\a', '=', '\x2', '\x2', '\x18A', 
		'\x18B', '\x5', '(', '\x15', '\x2', '\x18B', '\x18C', '\a', '>', '\x2', 
		'\x2', '\x18C', '\x18D', '\b', '\x15', '\x1', '\x2', '\x18D', '\x18F', 
		'\x3', '\x2', '\x2', '\x2', '\x18E', '\x174', '\x3', '\x2', '\x2', '\x2', 
		'\x18E', '\x179', '\x3', '\x2', '\x2', '\x2', '\x18E', '\x17E', '\x3', 
		'\x2', '\x2', '\x2', '\x18E', '\x183', '\x3', '\x2', '\x2', '\x2', '\x18E', 
		'\x188', '\x3', '\x2', '\x2', '\x2', '\x18F', '\x192', '\x3', '\x2', '\x2', 
		'\x2', '\x190', '\x18E', '\x3', '\x2', '\x2', '\x2', '\x190', '\x191', 
		'\x3', '\x2', '\x2', '\x2', '\x191', ')', '\x3', '\x2', '\x2', '\x2', 
		'\x192', '\x190', '\x3', '\x2', '\x2', '\x2', '\x193', '\x194', '\a', 
		'O', '\x2', '\x2', '\x194', '\x195', '\b', '\x16', '\x1', '\x2', '\x195', 
		'+', '\x3', '\x2', '\x2', '\x2', '\x196', '\x197', '\a', 'P', '\x2', '\x2', 
		'\x197', '\x1A1', '\b', '\x17', '\x1', '\x2', '\x198', '\x199', '\a', 
		'Q', '\x2', '\x2', '\x199', '\x1A1', '\b', '\x17', '\x1', '\x2', '\x19A', 
		'\x19B', '\a', 'R', '\x2', '\x2', '\x19B', '\x1A1', '\b', '\x17', '\x1', 
		'\x2', '\x19C', '\x19D', '\a', 'S', '\x2', '\x2', '\x19D', '\x1A1', '\b', 
		'\x17', '\x1', '\x2', '\x19E', '\x19F', '\a', 'T', '\x2', '\x2', '\x19F', 
		'\x1A1', '\b', '\x17', '\x1', '\x2', '\x1A0', '\x196', '\x3', '\x2', '\x2', 
		'\x2', '\x1A0', '\x198', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x19A', 
		'\x3', '\x2', '\x2', '\x2', '\x1A0', '\x19C', '\x3', '\x2', '\x2', '\x2', 
		'\x1A0', '\x19E', '\x3', '\x2', '\x2', '\x2', '\x1A1', '-', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\x33', ';', 'Q', '^', '\x63', 'j', 'u', 'w', '\x87', 
		'\x94', '\x9E', '\xAC', '\xB4', '\xBA', '\xC0', '\xC5', '\xD5', '\xF1', 
		'\xF4', '\x102', '\x106', '\x10F', '\x111', '\x127', '\x13B', '\x14B', 
		'\x172', '\x18E', '\x190', '\x1A0',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}

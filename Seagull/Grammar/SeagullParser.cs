//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar/SeagullParser.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419



    using System.Collections.Generic;
    using System.Linq;
        
	using Seagull.AST;
	using Seagull.Grammar;
	
	using Seagull.Semantics.Symbols;
	
	using Seagull.AST.Expressions;
	using Seagull.AST.Expressions.Binary;
	using Seagull.AST.Expressions.Literals;
	using Seagull.AST.Expressions.Increments;
	
	using Seagull.AST.Statements;
	using Seagull.AST.Statements.Definitions;
	using Seagull.AST.Statements.Definitions.Namespaces;
	
	using Seagull.AST.Types;
	using Seagull.AST.Types.Namespaces;
	
	using Seagull.AST.AccessModifiers;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class SeagullParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SHARP=1, VOID=2, INT=3, CHAR=4, DOUBLE=5, STRING=6, STRUCT=7, LONG=8, 
		BYTE=9, ENUM=10, LAMBDA=11, CLASS=12, VAR=13, NULL=14, PTR=15, ANY=16, 
		TRUE=17, FALSE=18, IF=19, ELSE=20, WHILE=21, FOR=22, IN=23, SWITCH=24, 
		CASE=25, BREAK=26, CONTINUE=27, NEW=28, DELETE=29, RETURN=30, PRINT=31, 
		READ=32, ASSERT=33, DELAY=34, PUBLIC=35, PROTECTED=36, PRIVATE=37, FRIEND=38, 
		NULLABLE=39, CONST=40, OVERRIDE=41, LOCKED=42, ABSTRACT=43, LOAD=44, IMPORT=45, 
		NAMESPACE=46, OWNED=47, IS=48, DEFAULT=49, DOT=50, COMMA=51, COL=52, SEMI_COL=53, 
		ASSIGN=54, STAR=55, SLASH=56, PERCENT=57, ARROW=58, QUESTION=59, PLUS=60, 
		MINUS=61, ADDRESS=62, PLUS_PLUS=63, MINUS_MINUS=64, ASSIGN_MUL=65, ASSIGN_DIV=66, 
		ASSIGN_MOD=67, ASSIGN_SUM=68, ASSIGN_SUB=69, NOT=70, AND=71, OR=72, L_BRACKET=73, 
		R_BRACKET=74, L_PAR=75, R_PAR=76, L_CURL=77, R_CURL=78, BIT_AND=79, BIT_OR=80, 
		BIT_XOR=81, BIT_NOT=82, BIT_RIGHT=83, BIT_LEFT=84, EQUAL=85, NOT_EQUAL=86, 
		LESS_THAN=87, GREATER_THAN=88, LESS_EQ_THAN=89, GREATER_EQ_THAN=90, ID=91, 
		INT_CONSTANT=92, REAL_CONSTANT=93, CHAR_CONSTANT=94, STRING_CONSTANT=95, 
		BOOLEAN_CONSTANT=96, SL_COMMENT=97, ML_COMMENT=98, BLANKS=99, DIR_DEFINE=100, 
		DIR_IF=101, DIR_ELIF=102, DIR_ELSE=103, DIR_WHITESPACE=104, DIR_ML_COMMENT=105, 
		DIR_NEWLINE=106;
	public const int
		RULE_program = 0, RULE_load = 1, RULE_imp = 2, RULE_typeOrVoid = 3, RULE_type = 4, 
		RULE_userDefinedType = 5, RULE_namespaceType = 6, RULE_functionType = 7, 
		RULE_parameters = 8, RULE_structType = 9, RULE_enumType = 10, RULE_enumElement = 11, 
		RULE_primitive = 12, RULE_voidType = 13, RULE_accessModifier = 14, RULE_definition = 15, 
		RULE_namespaceDef = 16, RULE_variableDef = 17, RULE_inferredVariableDef = 18, 
		RULE_variableDefIds = 19, RULE_functionDef = 20, RULE_structDef = 21, 
		RULE_enumDef = 22, RULE_lambda = 23, RULE_statement = 24, RULE_readPrint = 25, 
		RULE_funcInvocation = 26, RULE_fnBlock = 27, RULE_fnBlockContent = 28, 
		RULE_expression = 29, RULE_variable = 30, RULE_literal = 31;
	public static readonly string[] ruleNames = {
		"program", "load", "imp", "typeOrVoid", "type", "userDefinedType", "namespaceType", 
		"functionType", "parameters", "structType", "enumType", "enumElement", 
		"primitive", "voidType", "accessModifier", "definition", "namespaceDef", 
		"variableDef", "inferredVariableDef", "variableDefIds", "functionDef", 
		"structDef", "enumDef", "lambda", "statement", "readPrint", "funcInvocation", 
		"fnBlock", "fnBlockContent", "expression", "variable", "literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'#'", "'void'", "'int'", "'char'", "'double'", "'string'", "'struct'", 
		"'long'", "'byte'", "'enum'", "'lambda'", "'class'", "'var'", "'null'", 
		"'ptr'", "'any'", "'true'", "'false'", null, null, "'while'", "'for'", 
		"'in'", "'switch'", "'case'", "'break'", "'continue'", "'new'", "'delete'", 
		"'return'", "'print'", "'read'", "'assert'", "'delay'", "'public'", "'protected'", 
		"'private'", "'friend'", "'nullable'", "'const'", "'override'", "'locked'", 
		"'abstract'", "'load'", "'import'", "'namespace'", "'owned'", "'is'", 
		"'default'", "'.'", "','", "':'", "';'", "'='", "'*'", "'/'", "'%'", "'->'", 
		"'?'", "'+'", "'-'", "'@'", "'++'", "'--'", "'*='", "'/='", "'%='", "'+='", 
		"'-='", "'!'", "'&&'", "'||'", "'['", "']'", "'('", "')'", "'{'", "'}'", 
		"'&'", "'|'", "'^'", "'~'", "'>>'", "'<<'", "'=='", "'!='", "'<'", "'>'", 
		"'<='", "'>='", null, null, null, null, null, null, null, null, null, 
		"'define'", null, "'elif'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SHARP", "VOID", "INT", "CHAR", "DOUBLE", "STRING", "STRUCT", "LONG", 
		"BYTE", "ENUM", "LAMBDA", "CLASS", "VAR", "NULL", "PTR", "ANY", "TRUE", 
		"FALSE", "IF", "ELSE", "WHILE", "FOR", "IN", "SWITCH", "CASE", "BREAK", 
		"CONTINUE", "NEW", "DELETE", "RETURN", "PRINT", "READ", "ASSERT", "DELAY", 
		"PUBLIC", "PROTECTED", "PRIVATE", "FRIEND", "NULLABLE", "CONST", "OVERRIDE", 
		"LOCKED", "ABSTRACT", "LOAD", "IMPORT", "NAMESPACE", "OWNED", "IS", "DEFAULT", 
		"DOT", "COMMA", "COL", "SEMI_COL", "ASSIGN", "STAR", "SLASH", "PERCENT", 
		"ARROW", "QUESTION", "PLUS", "MINUS", "ADDRESS", "PLUS_PLUS", "MINUS_MINUS", 
		"ASSIGN_MUL", "ASSIGN_DIV", "ASSIGN_MOD", "ASSIGN_SUM", "ASSIGN_SUB", 
		"NOT", "AND", "OR", "L_BRACKET", "R_BRACKET", "L_PAR", "R_PAR", "L_CURL", 
		"R_CURL", "BIT_AND", "BIT_OR", "BIT_XOR", "BIT_NOT", "BIT_RIGHT", "BIT_LEFT", 
		"EQUAL", "NOT_EQUAL", "LESS_THAN", "GREATER_THAN", "LESS_EQ_THAN", "GREATER_EQ_THAN", 
		"ID", "INT_CONSTANT", "REAL_CONSTANT", "CHAR_CONSTANT", "STRING_CONSTANT", 
		"BOOLEAN_CONSTANT", "SL_COMMENT", "ML_COMMENT", "BLANKS", "DIR_DEFINE", 
		"DIR_IF", "DIR_ELIF", "DIR_ELSE", "DIR_WHITESPACE", "DIR_ML_COMMENT", 
		"DIR_NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SeagullParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SeagullParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SeagullParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SeagullParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public Program Ast;
		public List<string> Loads = new List<string>();
		public List<string> Imports = new List<string>();
		public List<IDefinition> Def = new List<IDefinition>();
		public LoadContext l;
		public ImpContext i;
		public NamespaceDefContext n;
		public NamespaceDefContext _namespaceDef;
		public DefinitionContext d;
		public ITerminalNode Eof() { return GetToken(SeagullParser.Eof, 0); }
		public LoadContext[] load() {
			return GetRuleContexts<LoadContext>();
		}
		public LoadContext load(int i) {
			return GetRuleContext<LoadContext>(i);
		}
		public ImpContext[] imp() {
			return GetRuleContexts<ImpContext>();
		}
		public ImpContext imp(int i) {
			return GetRuleContext<ImpContext>(i);
		}
		public NamespaceDefContext[] namespaceDef() {
			return GetRuleContexts<NamespaceDefContext>();
		}
		public NamespaceDefContext namespaceDef(int i) {
			return GetRuleContext<NamespaceDefContext>(i);
		}
		public DefinitionContext[] definition() {
			return GetRuleContexts<DefinitionContext>();
		}
		public DefinitionContext definition(int i) {
			return GetRuleContext<DefinitionContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LOAD) {
				{
				{
				State = 64; _localctx.l = load();
				 _localctx.Loads.Add(_localctx.l.File); 
				}
				}
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IMPORT) {
				{
				{
				State = 72; _localctx.i = imp();
				 _localctx.Imports.Add(_localctx.i.Namespace); 
				}
				}
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 88;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VOID) | (1L << INT) | (1L << CHAR) | (1L << DOUBLE) | (1L << STRING) | (1L << STRUCT) | (1L << LONG) | (1L << BYTE) | (1L << ENUM) | (1L << VAR) | (1L << PTR) | (1L << NAMESPACE))) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (L_PAR - 75)) | (1L << (L_CURL - 75)) | (1L << (ID - 75)))) != 0)) {
				{
				State = 86;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NAMESPACE:
					{
					{
					State = 80; _localctx.n = _localctx._namespaceDef = namespaceDef();
					 _localctx.Def.Add(_localctx._namespaceDef.Ast); 
					}
					}
					break;
				case VOID:
				case INT:
				case CHAR:
				case DOUBLE:
				case STRING:
				case STRUCT:
				case LONG:
				case BYTE:
				case ENUM:
				case VAR:
				case PTR:
				case L_PAR:
				case L_CURL:
				case ID:
					{
					{
					State = 83; _localctx.d = definition();
					 _localctx.Def.AddRange(_localctx.d.Ast); 
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 90;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 91; Match(Eof);
			 _localctx.Ast =  new Program(0, 0, _localctx.Loads, _localctx.Imports, _localctx.Def); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadContext : ParserRuleContext {
		public string File;
		public IToken p;
		public ITerminalNode LOAD() { return GetToken(SeagullParser.LOAD, 0); }
		public ITerminalNode STRING_CONSTANT() { return GetToken(SeagullParser.STRING_CONSTANT, 0); }
		public LoadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_load; } }
	}

	[RuleVersion(0)]
	public LoadContext load() {
		LoadContext _localctx = new LoadContext(Context, State);
		EnterRule(_localctx, 2, RULE_load);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; Match(LOAD);
			State = 95; _localctx.p = Match(STRING_CONSTANT);
			 _localctx.File =  (_localctx.p!=null?_localctx.p.Text:null); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImpContext : ParserRuleContext {
		public string Namespace;
		public IToken ns1;
		public IToken ns2;
		public ITerminalNode IMPORT() { return GetToken(SeagullParser.IMPORT, 0); }
		public ITerminalNode SEMI_COL() { return GetToken(SeagullParser.SEMI_COL, 0); }
		public ITerminalNode[] ID() { return GetTokens(SeagullParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(SeagullParser.ID, i);
		}
		public ITerminalNode[] DOT() { return GetTokens(SeagullParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(SeagullParser.DOT, i);
		}
		public ImpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imp; } }
	}

	[RuleVersion(0)]
	public ImpContext imp() {
		ImpContext _localctx = new ImpContext(Context, State);
		EnterRule(_localctx, 4, RULE_imp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98; Match(IMPORT);
			State = 99; _localctx.ns1 = Match(ID);
			 _localctx.Namespace =  _localctx.ns1.GetText(); 
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 101; Match(DOT);
				State = 102; _localctx.ns2 = Match(ID);
				 _localctx.Namespace += "." + _localctx.ns2.GetText(); 
				}
				}
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 109; Match(SEMI_COL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeOrVoidContext : ParserRuleContext {
		public IType Ast;
		public TypeContext _type;
		public VoidTypeContext _voidType;
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public VoidTypeContext voidType() {
			return GetRuleContext<VoidTypeContext>(0);
		}
		public TypeOrVoidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeOrVoid; } }
	}

	[RuleVersion(0)]
	public TypeOrVoidContext typeOrVoid() {
		TypeOrVoidContext _localctx = new TypeOrVoidContext(Context, State);
		EnterRule(_localctx, 6, RULE_typeOrVoid);
		try {
			State = 117;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
			case CHAR:
			case DOUBLE:
			case STRING:
			case LONG:
			case BYTE:
			case PTR:
			case L_PAR:
			case L_CURL:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 111; _localctx._type = type(0);
				 _localctx.Ast =  _localctx._type.Ast; 
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 114; _localctx._voidType = voidType();
				 _localctx.Ast =  _localctx._voidType.Ast; 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public IType Ast;
		public TypeContext t;
		public PrimitiveContext _primitive;
		public FunctionTypeContext _functionType;
		public StructTypeContext _structType;
		public UserDefinedTypeContext _userDefinedType;
		public IToken i;
		public IToken i2;
		public PrimitiveContext primitive() {
			return GetRuleContext<PrimitiveContext>(0);
		}
		public FunctionTypeContext functionType() {
			return GetRuleContext<FunctionTypeContext>(0);
		}
		public StructTypeContext structType() {
			return GetRuleContext<StructTypeContext>(0);
		}
		public UserDefinedTypeContext userDefinedType() {
			return GetRuleContext<UserDefinedTypeContext>(0);
		}
		public ITerminalNode[] L_BRACKET() { return GetTokens(SeagullParser.L_BRACKET); }
		public ITerminalNode L_BRACKET(int i) {
			return GetToken(SeagullParser.L_BRACKET, i);
		}
		public ITerminalNode[] R_BRACKET() { return GetTokens(SeagullParser.R_BRACKET); }
		public ITerminalNode R_BRACKET(int i) {
			return GetToken(SeagullParser.R_BRACKET, i);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode[] INT_CONSTANT() { return GetTokens(SeagullParser.INT_CONSTANT); }
		public ITerminalNode INT_CONSTANT(int i) {
			return GetToken(SeagullParser.INT_CONSTANT, i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	}

	[RuleVersion(0)]
	public TypeContext type() {
		return type(0);
	}

	private TypeContext type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeContext _localctx = new TypeContext(Context, _parentState);
		TypeContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_type, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
			case CHAR:
			case DOUBLE:
			case STRING:
			case LONG:
			case BYTE:
			case PTR:
				{
				State = 120; _localctx._primitive = primitive();
				 _localctx.Ast =  _localctx._primitive.Ast; 
				}
				break;
			case L_PAR:
				{
				State = 123; _localctx._functionType = functionType();
				 _localctx.Ast =  _localctx._functionType.Ast; 
				}
				break;
			case L_CURL:
				{
				State = 126; _localctx._structType = structType();
				 _localctx.Ast =  _localctx._structType.Ast; 
				}
				break;
			case ID:
				{
				State = 129; _localctx._userDefinedType = userDefinedType();
				 _localctx.Ast =  _localctx._userDefinedType.Ast; 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 150;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypeContext(_parentctx, _parentState);
					_localctx.t = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_type);
					State = 134;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 135; Match(L_BRACKET);
					State = 136; _localctx.i = Match(INT_CONSTANT);
					State = 137; Match(R_BRACKET);
					 _localctx.Ast =  ArrayType.BuildArray(int.Parse((_localctx.i!=null?_localctx.i.Text:null)), _localctx.t.Ast); 
					State = 145;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 139; Match(L_BRACKET);
							State = 140; _localctx.i2 = Match(INT_CONSTANT);
							State = 141; Match(R_BRACKET);
							 _localctx.Ast =  ArrayType.BuildArray( int.Parse((_localctx.i2!=null?_localctx.i2.Text:null)), _localctx.Ast); 
							}
							} 
						}
						State = 147;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
					}
					}
					} 
				}
				State = 152;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UserDefinedTypeContext : ParserRuleContext {
		public IType Ast;
		public IToken _ID;
		public NamespaceTypeContext t;
		public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
		public ITerminalNode DOT() { return GetToken(SeagullParser.DOT, 0); }
		public NamespaceTypeContext namespaceType() {
			return GetRuleContext<NamespaceTypeContext>(0);
		}
		public UserDefinedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userDefinedType; } }
	}

	[RuleVersion(0)]
	public UserDefinedTypeContext userDefinedType() {
		UserDefinedTypeContext _localctx = new UserDefinedTypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_userDefinedType);
		try {
			State = 160;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 153; _localctx._ID = Match(ID);
				 _localctx.Ast =  new UnknownType(_localctx._ID.GetLine(), _localctx._ID.GetCol(), _localctx._ID.GetText()); 
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 155; _localctx.t = namespaceType(0);
				State = 156; Match(DOT);
				State = 157; _localctx._ID = Match(ID);
				 _localctx.Ast =  new UnknownType(_localctx._ID.GetLine(), _localctx._ID.GetCol(), _localctx._ID.GetText(), _localctx.t.Ast); 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceTypeContext : ParserRuleContext {
		public INamespaceType Ast;
		public NamespaceTypeContext t;
		public IToken _ID;
		public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
		public ITerminalNode DOT() { return GetToken(SeagullParser.DOT, 0); }
		public NamespaceTypeContext namespaceType() {
			return GetRuleContext<NamespaceTypeContext>(0);
		}
		public NamespaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceType; } }
	}

	[RuleVersion(0)]
	public NamespaceTypeContext namespaceType() {
		return namespaceType(0);
	}

	private NamespaceTypeContext namespaceType(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NamespaceTypeContext _localctx = new NamespaceTypeContext(Context, _parentState);
		NamespaceTypeContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_namespaceType, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 163; _localctx._ID = Match(ID);
			 _localctx.Ast =  NamespaceManager.Instance.AddType(_localctx._ID.GetLine(), _localctx._ID.GetCol(), _localctx._ID.GetText(), null); 
			}
			Context.Stop = TokenStream.LT(-1);
			State = 172;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NamespaceTypeContext(_parentctx, _parentState);
					_localctx.t = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_namespaceType);
					State = 166;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 167; Match(DOT);
					State = 168; _localctx._ID = Match(ID);
					 _localctx.Ast =  NamespaceManager.Instance.AddType(_localctx._ID.GetLine(), _localctx._ID.GetCol(), _localctx._ID.GetText(), _localctx.t.Ast); 
					}
					} 
				}
				State = 174;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FunctionTypeContext : ParserRuleContext {
		public FunctionType Ast;
		public List<VariableDefinition> Params = new List<VariableDefinition>();
		public IType Rt;
		public ParametersContext p;
		public IToken par;
		public TypeContext t;
		public VoidTypeContext vt;
		public ITerminalNode L_PAR() { return GetToken(SeagullParser.L_PAR, 0); }
		public ITerminalNode R_PAR() { return GetToken(SeagullParser.R_PAR, 0); }
		public ITerminalNode ARROW() { return GetToken(SeagullParser.ARROW, 0); }
		public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public VoidTypeContext voidType() {
			return GetRuleContext<VoidTypeContext>(0);
		}
		public FunctionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionType; } }
	}

	[RuleVersion(0)]
	public FunctionTypeContext functionType() {
		FunctionTypeContext _localctx = new FunctionTypeContext(Context, State);
		EnterRule(_localctx, 14, RULE_functionType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175; Match(L_PAR);
			State = 179;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << CHAR) | (1L << DOUBLE) | (1L << STRING) | (1L << LONG) | (1L << BYTE) | (1L << PTR))) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (L_PAR - 75)) | (1L << (L_CURL - 75)) | (1L << (ID - 75)))) != 0)) {
				{
				State = 176; _localctx.p = parameters();
				 _localctx.Params =  _localctx.p.Ast;
				}
			}

			State = 181; _localctx.par = Match(R_PAR);
			 _localctx.Rt = new VoidType(_localctx.par.GetLine(), _localctx.par.GetCol()); 
			State = 192;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 183; Match(ARROW);
				State = 190;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INT:
				case CHAR:
				case DOUBLE:
				case STRING:
				case LONG:
				case BYTE:
				case PTR:
				case L_PAR:
				case L_CURL:
				case ID:
					{
					{
					State = 184; _localctx.t = type(0);
					 _localctx.Rt = _localctx.t.Ast; 
					}
					}
					break;
				case VOID:
					{
					{
					State = 187; _localctx.vt = voidType();
					 _localctx.Rt = _localctx.vt.Ast; 
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			 _localctx.Ast =  new FunctionType(_localctx.Rt, _localctx.Params); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		public List<VariableDefinition> Ast = new List<VariableDefinition>();
		public TypeContext t1;
		public IToken id1;
		public TypeContext t2;
		public IToken id2;
		public LiteralContext l;
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode[] ID() { return GetTokens(SeagullParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(SeagullParser.ID, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SeagullParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SeagullParser.COMMA, i);
		}
		public ITerminalNode[] ASSIGN() { return GetTokens(SeagullParser.ASSIGN); }
		public ITerminalNode ASSIGN(int i) {
			return GetToken(SeagullParser.ASSIGN, i);
		}
		public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 16, RULE_parameters);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 196; _localctx.t1 = type(0);
			State = 197; _localctx.id1 = Match(ID);
			 _localctx.Ast.Add(new VariableDefinition(_localctx.id1.GetLine(), _localctx.id1.GetCol(), _localctx.id1.GetText(), _localctx.t1.Ast, null)); 
			State = 206;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 199; Match(COMMA);
					State = 200; _localctx.t2 = type(0);
					State = 201; _localctx.id2 = Match(ID);
					 _localctx.Ast.Add(new VariableDefinition(_localctx.id2.GetLine(), _localctx.id2.GetCol(), _localctx.id2.GetText(), _localctx.t2.Ast, null)); 
					}
					} 
				}
				State = 208;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 209; Match(COMMA);
				State = 210; _localctx.t2 = type(0);
				State = 211; _localctx.id2 = Match(ID);
				State = 212; Match(ASSIGN);
				State = 213; _localctx.l = literal();
				 _localctx.Ast.Add(new VariableDefinition(_localctx.id2.GetLine(), _localctx.id2.GetCol(), _localctx.id2.GetText(), _localctx.t2.Ast, _localctx.l.Ast)); 
				}
				}
				State = 220;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructTypeContext : ParserRuleContext {
		public StructType Ast;
		public List<VariableDefinition> fields = new List<VariableDefinition>();
		public IAccessModifier access;
		public IToken c;
		public AccessModifierContext am;
		public VariableDefContext f;
		public ITerminalNode R_CURL() { return GetToken(SeagullParser.R_CURL, 0); }
		public ITerminalNode L_CURL() { return GetToken(SeagullParser.L_CURL, 0); }
		public VariableDefContext[] variableDef() {
			return GetRuleContexts<VariableDefContext>();
		}
		public VariableDefContext variableDef(int i) {
			return GetRuleContext<VariableDefContext>(i);
		}
		public AccessModifierContext[] accessModifier() {
			return GetRuleContexts<AccessModifierContext>();
		}
		public AccessModifierContext accessModifier(int i) {
			return GetRuleContext<AccessModifierContext>(i);
		}
		public StructTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structType; } }
	}

	[RuleVersion(0)]
	public StructTypeContext structType() {
		StructTypeContext _localctx = new StructTypeContext(Context, State);
		EnterRule(_localctx, 18, RULE_structType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221; _localctx.c = Match(L_CURL);
			State = 232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << CHAR) | (1L << DOUBLE) | (1L << STRING) | (1L << LONG) | (1L << BYTE) | (1L << VAR) | (1L << PTR) | (1L << PUBLIC) | (1L << PROTECTED) | (1L << PRIVATE))) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (L_PAR - 75)) | (1L << (L_CURL - 75)) | (1L << (ID - 75)))) != 0)) {
				{
				{
				State = 225;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PUBLIC) | (1L << PROTECTED) | (1L << PRIVATE))) != 0)) {
					{
					State = 222; _localctx.am = accessModifier();
					 _localctx.access =  _localctx.am.Ast; 
					}
				}

				State = 227; _localctx.f = variableDef();
				 
				                foreach (var def in _localctx.f.Ast)
				                {
				                    if (_localctx.access != null)
				                        def.AccessModifier = _localctx.access;
				                    _localctx.fields.Add(def);
				                }
				                _localctx.access =  null;
				            
				}
				}
				State = 234;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 235; Match(R_CURL);
			 _localctx.Ast =  new StructType(_localctx.c.GetLine(), _localctx.c.GetCol(), _localctx.fields); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumTypeContext : ParserRuleContext {
		public IType typeOf;
		public EnumType Ast;
		public List<EnumElementDefinition> defs = new List<EnumElementDefinition>();
		public IToken curl;
		public EnumElementContext d1;
		public EnumElementContext d2;
		public ITerminalNode R_CURL() { return GetToken(SeagullParser.R_CURL, 0); }
		public ITerminalNode L_CURL() { return GetToken(SeagullParser.L_CURL, 0); }
		public EnumElementContext[] enumElement() {
			return GetRuleContexts<EnumElementContext>();
		}
		public EnumElementContext enumElement(int i) {
			return GetRuleContext<EnumElementContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SeagullParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SeagullParser.COMMA, i);
		}
		public EnumTypeContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public EnumTypeContext(ParserRuleContext parent, int invokingState, IType typeOf)
			: base(parent, invokingState)
		{
			this.typeOf = typeOf;
		}
		public override int RuleIndex { get { return RULE_enumType; } }
	}

	[RuleVersion(0)]
	public EnumTypeContext enumType(IType typeOf) {
		EnumTypeContext _localctx = new EnumTypeContext(Context, State, typeOf);
		EnterRule(_localctx, 20, RULE_enumType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238; _localctx.curl = Match(L_CURL);
			State = 250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 239; _localctx.d1 = enumElement(_localctx.typeOf, 0);
				 _localctx.defs.Add(_localctx.d1.Ast); 
				State = 247;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 241; Match(COMMA);
					State = 242; _localctx.d2 = enumElement(_localctx.typeOf, 0);
					 _localctx.defs.Add(_localctx.d2.Ast); 
					}
					}
					State = 249;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 252; Match(R_CURL);
			 _localctx.Ast =  new EnumType(_localctx.curl.GetLine(), _localctx.curl.GetCol(), _localctx.typeOf, _localctx.defs); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumElementContext : ParserRuleContext {
		public IType typeOf;
		public int defaultInt;
		public EnumElementDefinition Ast;
		public IToken id;
		public ExpressionContext expr;
		public ITerminalNode ASSIGN() { return GetToken(SeagullParser.ASSIGN, 0); }
		public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EnumElementContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public EnumElementContext(ParserRuleContext parent, int invokingState, IType typeOf, int defaultInt)
			: base(parent, invokingState)
		{
			this.typeOf = typeOf;
			this.defaultInt = defaultInt;
		}
		public override int RuleIndex { get { return RULE_enumElement; } }
	}

	[RuleVersion(0)]
	public EnumElementContext enumElement(IType typeOf, int defaultInt) {
		EnumElementContext _localctx = new EnumElementContext(Context, State, typeOf, defaultInt);
		EnterRule(_localctx, 22, RULE_enumElement);
		try {
			State = 262;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 255; _localctx.id = Match(ID);
				State = 256; Match(ASSIGN);
				State = 257; _localctx.expr = expression(0);
				 _localctx.Ast =  new EnumElementDefinition(_localctx.id.GetLine(), _localctx.id.GetCol(), (_localctx.id!=null?_localctx.id.Text:null), _localctx.expr.Ast, _localctx.typeOf); 
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 260; _localctx.id = Match(ID);

				            IExpression def = new IntLiteral(_localctx.id.GetLine(), _localctx.id.GetCol(), defaultInt);
				            if (!(_localctx.typeOf is IntType))
				                def = new Default(_localctx.id.GetLine(), _localctx.id.GetCol(), _localctx.typeOf);
				            _localctx.Ast =  new EnumElementDefinition(_localctx.id.GetLine(), _localctx.id.GetCol(), (_localctx.id!=null?_localctx.id.Text:null), def, _localctx.typeOf); 
				        
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveContext : ParserRuleContext {
		public IType Ast;
		public IToken ptr;
		public IToken c;
		public IToken b;
		public IToken i;
		public IToken d;
		public IToken l;
		public IToken s;
		public ITerminalNode PTR() { return GetToken(SeagullParser.PTR, 0); }
		public ITerminalNode CHAR() { return GetToken(SeagullParser.CHAR, 0); }
		public ITerminalNode BYTE() { return GetToken(SeagullParser.BYTE, 0); }
		public ITerminalNode INT() { return GetToken(SeagullParser.INT, 0); }
		public ITerminalNode DOUBLE() { return GetToken(SeagullParser.DOUBLE, 0); }
		public ITerminalNode LONG() { return GetToken(SeagullParser.LONG, 0); }
		public ITerminalNode STRING() { return GetToken(SeagullParser.STRING, 0); }
		public PrimitiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitive; } }
	}

	[RuleVersion(0)]
	public PrimitiveContext primitive() {
		PrimitiveContext _localctx = new PrimitiveContext(Context, State);
		EnterRule(_localctx, 24, RULE_primitive);
		try {
			State = 278;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PTR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 264; _localctx.ptr = Match(PTR);
				 _localctx.Ast =  new PointerType(_localctx.ptr.GetLine(), _localctx.ptr.GetCol()); 
				}
				break;
			case CHAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 266; _localctx.c = Match(CHAR);
				 _localctx.Ast =  new CharType(_localctx.c.GetLine(), _localctx.c.GetCol()); 
				}
				break;
			case BYTE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 268; _localctx.b = Match(BYTE);
				 _localctx.Ast =  new ByteType(_localctx.b.GetLine(), _localctx.b.GetCol()); 
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 270; _localctx.i = Match(INT);
				 _localctx.Ast =  new IntType(_localctx.i.GetLine(), _localctx.i.GetCol()); 
				}
				break;
			case DOUBLE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 272; _localctx.d = Match(DOUBLE);
				 _localctx.Ast =  new DoubleType(_localctx.d.GetLine(), _localctx.d.GetCol()); 
				}
				break;
			case LONG:
				EnterOuterAlt(_localctx, 6);
				{
				State = 274; _localctx.l = Match(LONG);
				 _localctx.Ast =  new LongType(_localctx.l.GetLine(), _localctx.l.GetCol()); 
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 7);
				{
				State = 276; _localctx.s = Match(STRING);
				 _localctx.Ast =  new StringType(_localctx.s.GetLine(), _localctx.s.GetCol()); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoidTypeContext : ParserRuleContext {
		public IType Ast;
		public IToken v;
		public ITerminalNode VOID() { return GetToken(SeagullParser.VOID, 0); }
		public VoidTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voidType; } }
	}

	[RuleVersion(0)]
	public VoidTypeContext voidType() {
		VoidTypeContext _localctx = new VoidTypeContext(Context, State);
		EnterRule(_localctx, 26, RULE_voidType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280; _localctx.v = Match(VOID);
			 _localctx.Ast =  new VoidType(_localctx.v.GetLine(), _localctx.v.GetCol()); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessModifierContext : ParserRuleContext {
		public IAccessModifier Ast;
		public IToken _PUBLIC;
		public IToken _PROTECTED;
		public IToken _PRIVATE;
		public ITerminalNode PUBLIC() { return GetToken(SeagullParser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(SeagullParser.PROTECTED, 0); }
		public ITerminalNode PRIVATE() { return GetToken(SeagullParser.PRIVATE, 0); }
		public AccessModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessModifier; } }
	}

	[RuleVersion(0)]
	public AccessModifierContext accessModifier() {
		AccessModifierContext _localctx = new AccessModifierContext(Context, State);
		EnterRule(_localctx, 28, RULE_accessModifier);
		try {
			State = 289;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PUBLIC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 283; _localctx._PUBLIC = Match(PUBLIC);
				 _localctx.Ast =  new PublicAccessModifier(_localctx._PUBLIC.GetLine(), _localctx._PUBLIC.GetCol()); 
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 285; _localctx._PROTECTED = Match(PROTECTED);
				 _localctx.Ast =  new ProtectedAccessModifier(_localctx._PROTECTED.GetLine(), _localctx._PROTECTED.GetCol()); 
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 287; _localctx._PRIVATE = Match(PRIVATE);
				 _localctx.Ast =  new PrivateAccessModifier(_localctx._PRIVATE.GetLine(), _localctx._PRIVATE.GetCol()); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		public List<IDefinition> Ast = new List<IDefinition>();
		public VariableDefContext _variableDef;
		public FunctionDefContext _functionDef;
		public StructDefContext _structDef;
		public EnumDefContext _enumDef;
		public VariableDefContext variableDef() {
			return GetRuleContext<VariableDefContext>(0);
		}
		public FunctionDefContext functionDef() {
			return GetRuleContext<FunctionDefContext>(0);
		}
		public StructDefContext structDef() {
			return GetRuleContext<StructDefContext>(0);
		}
		public EnumDefContext enumDef() {
			return GetRuleContext<EnumDefContext>(0);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 30, RULE_definition);
		try {
			State = 303;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 291; _localctx._variableDef = variableDef();
				 _localctx.Ast.AddRange(_localctx._variableDef.Ast); 
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 294; _localctx._functionDef = functionDef();
				 _localctx.Ast.Add(_localctx._functionDef.Ast); 
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 297; _localctx._structDef = structDef();
				 _localctx.Ast.Add(_localctx._structDef.Ast); 
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 300; _localctx._enumDef = enumDef();
				 _localctx.Ast.Add(_localctx._enumDef.Ast); 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDefContext : ParserRuleContext {
		public NamespaceDefinition Ast;
		public IAccessModifier access;
		public IToken n;
		public NamespaceTypeContext t;
		public AccessModifierContext am;
		public DefinitionContext d;
		public ITerminalNode L_CURL() { return GetToken(SeagullParser.L_CURL, 0); }
		public ITerminalNode R_CURL() { return GetToken(SeagullParser.R_CURL, 0); }
		public ITerminalNode NAMESPACE() { return GetToken(SeagullParser.NAMESPACE, 0); }
		public NamespaceTypeContext namespaceType() {
			return GetRuleContext<NamespaceTypeContext>(0);
		}
		public DefinitionContext[] definition() {
			return GetRuleContexts<DefinitionContext>();
		}
		public DefinitionContext definition(int i) {
			return GetRuleContext<DefinitionContext>(i);
		}
		public AccessModifierContext[] accessModifier() {
			return GetRuleContexts<AccessModifierContext>();
		}
		public AccessModifierContext accessModifier(int i) {
			return GetRuleContext<AccessModifierContext>(i);
		}
		public NamespaceDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDef; } }
	}

	[RuleVersion(0)]
	public NamespaceDefContext namespaceDef() {
		NamespaceDefContext _localctx = new NamespaceDefContext(Context, State);
		EnterRule(_localctx, 32, RULE_namespaceDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305; _localctx.n = Match(NAMESPACE);
			State = 306; _localctx.t = namespaceType(0);
			State = 307; Match(L_CURL);
			State = 318;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VOID) | (1L << INT) | (1L << CHAR) | (1L << DOUBLE) | (1L << STRING) | (1L << STRUCT) | (1L << LONG) | (1L << BYTE) | (1L << ENUM) | (1L << VAR) | (1L << PTR) | (1L << PUBLIC) | (1L << PROTECTED) | (1L << PRIVATE))) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (L_PAR - 75)) | (1L << (L_CURL - 75)) | (1L << (ID - 75)))) != 0)) {
				{
				{
				State = 311;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PUBLIC) | (1L << PROTECTED) | (1L << PRIVATE))) != 0)) {
					{
					State = 308; _localctx.am = accessModifier();
					 _localctx.access =  _localctx.am.Ast; 
					}
				}

				State = 313; _localctx.d = definition();
				   
				                IDefinition[] defs = _localctx.d.Ast.ToArray();
				                foreach (var definition in defs)
				                {
				                    if (_localctx.access != null)
				                        definition.AccessModifier = _localctx.access;
				                    _localctx.t.Ast.AddDefinition(definition);
				                }
				                _localctx.access =  null;
				            
				}
				}
				State = 320;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 321; Match(R_CURL);
			 _localctx.Ast =  NamespaceManager.Instance.Define(_localctx.n.GetLine(), _localctx.n.GetCol(), _localctx.t.Ast); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDefContext : ParserRuleContext {
		public List<VariableDefinition> Ast = new List<VariableDefinition>();
		public TypeContext t;
		public VariableDefIdsContext ids;
		public ExpressionContext e;
		public InferredVariableDefContext i;
		public ITerminalNode SEMI_COL() { return GetToken(SeagullParser.SEMI_COL, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public VariableDefIdsContext variableDefIds() {
			return GetRuleContext<VariableDefIdsContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(SeagullParser.ASSIGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InferredVariableDefContext inferredVariableDef() {
			return GetRuleContext<InferredVariableDefContext>(0);
		}
		public VariableDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDef; } }
	}

	[RuleVersion(0)]
	public VariableDefContext variableDef() {
		VariableDefContext _localctx = new VariableDefContext(Context, State);
		EnterRule(_localctx, 34, RULE_variableDef);
		try {
			State = 339;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 324; _localctx.t = type(0);
				State = 325; _localctx.ids = variableDefIds();
				State = 326; Match(SEMI_COL);

				            foreach (string id in _localctx.ids.Ids)
				                _localctx.Ast.Add(new VariableDefinition(_localctx.t.Ast.Line, _localctx.t.Ast.Column, id, _localctx.t.Ast, null)); 
				        
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 329; _localctx.t = type(0);
				State = 330; _localctx.ids = variableDefIds();
				State = 331; Match(ASSIGN);
				State = 332; _localctx.e = expression(0);
				State = 333; Match(SEMI_COL);

				            foreach (string id in _localctx.ids.Ids)
				                _localctx.Ast.Add(new VariableDefinition(_localctx.t.Ast.Line, _localctx.t.Ast.Column, id, _localctx.t.Ast, _localctx.e.Ast));
				        
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 336; _localctx.i = inferredVariableDef();
				 _localctx.Ast.Add(_localctx.i.Ast); 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InferredVariableDefContext : ParserRuleContext {
		public VariableDefinition Ast;
		public IToken _VAR;
		public IToken _ID;
		public ExpressionContext e;
		public ITerminalNode VAR() { return GetToken(SeagullParser.VAR, 0); }
		public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(SeagullParser.ASSIGN, 0); }
		public ITerminalNode SEMI_COL() { return GetToken(SeagullParser.SEMI_COL, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InferredVariableDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inferredVariableDef; } }
	}

	[RuleVersion(0)]
	public InferredVariableDefContext inferredVariableDef() {
		InferredVariableDefContext _localctx = new InferredVariableDefContext(Context, State);
		EnterRule(_localctx, 36, RULE_inferredVariableDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341; _localctx._VAR = Match(VAR);
			State = 342; _localctx._ID = Match(ID);
			State = 343; Match(ASSIGN);
			State = 344; _localctx.e = expression(0);
			State = 345; Match(SEMI_COL);

			            IType t = _localctx.e.Ast.Type;
			            if (t == null)
			            {
			                t = Seagull.Errors.ErrorHandler.Instance.RaiseError(
			                        _localctx._VAR.GetLine(), _localctx._VAR.GetCol(), string.Format("Cannot infer type for variable {0}", _localctx._ID.GetText())
			                    );
			            }
			            
			            _localctx.Ast =  new VariableDefinition(_localctx._VAR.GetLine(), _localctx._VAR.GetCol(), _localctx._ID.GetText(), _localctx.e.Ast.Type, _localctx.e.Ast);
			        
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDefIdsContext : ParserRuleContext {
		public List<string> Ids = new List<string>();
		public IToken n1;
		public IToken n2;
		public ITerminalNode[] ID() { return GetTokens(SeagullParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(SeagullParser.ID, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SeagullParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SeagullParser.COMMA, i);
		}
		public VariableDefIdsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDefIds; } }
	}

	[RuleVersion(0)]
	public VariableDefIdsContext variableDefIds() {
		VariableDefIdsContext _localctx = new VariableDefIdsContext(Context, State);
		EnterRule(_localctx, 38, RULE_variableDefIds);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348; _localctx.n1 = Match(ID);
			 _localctx.Ids.Add(_localctx.n1.GetText()); 
			State = 355;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 350; Match(COMMA);
				State = 351; _localctx.n2 = Match(ID);
				 _localctx.Ids.Add(_localctx.n2.GetText()); 
				}
				}
				State = 357;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefContext : ParserRuleContext {
		public FunctionDefinition Ast;
		public List<VariableDefinition> _params = new List<VariableDefinition>();
		public TypeOrVoidContext rt;
		public IToken n;
		public ParametersContext p;
		public FnBlockContext _fnBlock;
		public ITerminalNode L_PAR() { return GetToken(SeagullParser.L_PAR, 0); }
		public ITerminalNode R_PAR() { return GetToken(SeagullParser.R_PAR, 0); }
		public FnBlockContext fnBlock() {
			return GetRuleContext<FnBlockContext>(0);
		}
		public TypeOrVoidContext typeOrVoid() {
			return GetRuleContext<TypeOrVoidContext>(0);
		}
		public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
		public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public FunctionDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDef; } }
	}

	[RuleVersion(0)]
	public FunctionDefContext functionDef() {
		FunctionDefContext _localctx = new FunctionDefContext(Context, State);
		EnterRule(_localctx, 40, RULE_functionDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358; _localctx.rt = typeOrVoid();
			State = 359; _localctx.n = Match(ID);
			State = 360; Match(L_PAR);
			State = 364;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << CHAR) | (1L << DOUBLE) | (1L << STRING) | (1L << LONG) | (1L << BYTE) | (1L << PTR))) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (L_PAR - 75)) | (1L << (L_CURL - 75)) | (1L << (ID - 75)))) != 0)) {
				{
				State = 361; _localctx.p = parameters();
				 _localctx._params =  _localctx.p.Ast; 
				}
			}

			State = 366; Match(R_PAR);
			State = 367; _localctx._fnBlock = fnBlock();

			            string name = _localctx.n.GetText();
			            IType fType = new FunctionType(_localctx.rt.Ast, _localctx._params);
			            
			            if (name.Equals("main") && _localctx.rt.Ast is VoidType)
			                _localctx.Ast =  new MainFunctionDefinition(_localctx.n.GetLine(), _localctx.n.GetCol(), fType, _localctx._fnBlock.Ast); 
			            else _localctx.Ast =  new FunctionDefinition(_localctx.n.GetLine(), _localctx.n.GetCol(), name, fType, _localctx._fnBlock.Ast); 
			        
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDefContext : ParserRuleContext {
		public StructDefinition Ast;
		public IToken s;
		public IToken n;
		public StructTypeContext t;
		public ITerminalNode STRUCT() { return GetToken(SeagullParser.STRUCT, 0); }
		public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
		public StructTypeContext structType() {
			return GetRuleContext<StructTypeContext>(0);
		}
		public StructDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDef; } }
	}

	[RuleVersion(0)]
	public StructDefContext structDef() {
		StructDefContext _localctx = new StructDefContext(Context, State);
		EnterRule(_localctx, 42, RULE_structDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370; _localctx.s = Match(STRUCT);
			State = 371; _localctx.n = Match(ID);
			State = 372; _localctx.t = structType();
			 _localctx.Ast =  new StructDefinition(_localctx.s.GetLine(), _localctx.s.GetCol(), _localctx.n.GetText(), _localctx.t.Ast); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDefContext : ParserRuleContext {
		public EnumDefinition Ast;
		public IType typeOf;
		public IToken e;
		public IToken n;
		public TypeContext t;
		public EnumTypeContext _enumType;
		public EnumTypeContext enumType() {
			return GetRuleContext<EnumTypeContext>(0);
		}
		public ITerminalNode ENUM() { return GetToken(SeagullParser.ENUM, 0); }
		public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
		public ITerminalNode COL() { return GetToken(SeagullParser.COL, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public EnumDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDef; } }
	}

	[RuleVersion(0)]
	public EnumDefContext enumDef() {
		EnumDefContext _localctx = new EnumDefContext(Context, State);
		EnterRule(_localctx, 44, RULE_enumDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375; _localctx.e = Match(ENUM);
			State = 376; _localctx.n = Match(ID);
			 _localctx.typeOf =  new IntType(_localctx.n.GetLine(), _localctx.n.GetCol()); 
			State = 382;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COL) {
				{
				State = 378; Match(COL);
				State = 379; _localctx.t = type(0);
				 _localctx.typeOf =  _localctx.t.Ast; 
				}
			}

			State = 384; _localctx._enumType = enumType(_localctx.typeOf);
			 _localctx.Ast =  new EnumDefinition(_localctx.e.GetLine(), _localctx.e.GetCol(), _localctx.n.GetText(), _localctx._enumType.Ast); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaContext : ParserRuleContext {
		public IType Ast;
		public IToken n;
		public FunctionTypeContext _functionType;
		public ITerminalNode LAMBDA() { return GetToken(SeagullParser.LAMBDA, 0); }
		public FunctionTypeContext functionType() {
			return GetRuleContext<FunctionTypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
		public LambdaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda; } }
	}

	[RuleVersion(0)]
	public LambdaContext lambda() {
		LambdaContext _localctx = new LambdaContext(Context, State);
		EnterRule(_localctx, 46, RULE_lambda);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387; Match(LAMBDA);
			State = 388; _localctx.n = Match(ID);
			State = 389; _localctx._functionType = functionType();
			 _localctx.Ast =  _localctx._functionType.Ast; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public List<IStatement> Ast = new List<IStatement>();
		public StatementContext st1;
		public StatementContext st2;
		public IToken w;
		public ExpressionContext cond;
		public StatementContext st;
		public IToken f;
		public StatementContext init;
		public StatementContext incr;
		public VariableContext e;
		public ExpressionContext col;
		public IToken c;
		public IToken br;
		public IToken i;
		public ExpressionContext e1;
		public ExpressionContext e2;
		public IToken r;
		public ExpressionContext expr;
		public ReadPrintContext _readPrint;
		public ITerminalNode L_CURL() { return GetToken(SeagullParser.L_CURL, 0); }
		public ITerminalNode R_CURL() { return GetToken(SeagullParser.R_CURL, 0); }
		public ITerminalNode[] DELAY() { return GetTokens(SeagullParser.DELAY); }
		public ITerminalNode DELAY(int i) {
			return GetToken(SeagullParser.DELAY, i);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode L_PAR() { return GetToken(SeagullParser.L_PAR, 0); }
		public ITerminalNode R_PAR() { return GetToken(SeagullParser.R_PAR, 0); }
		public ITerminalNode WHILE() { return GetToken(SeagullParser.WHILE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode SEMI_COL() { return GetToken(SeagullParser.SEMI_COL, 0); }
		public ITerminalNode FOR() { return GetToken(SeagullParser.FOR, 0); }
		public ITerminalNode IN() { return GetToken(SeagullParser.IN, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode CONTINUE() { return GetToken(SeagullParser.CONTINUE, 0); }
		public ITerminalNode BREAK() { return GetToken(SeagullParser.BREAK, 0); }
		public ITerminalNode IF() { return GetToken(SeagullParser.IF, 0); }
		public ITerminalNode ELSE() { return GetToken(SeagullParser.ELSE, 0); }
		public ITerminalNode ASSIGN() { return GetToken(SeagullParser.ASSIGN, 0); }
		public ITerminalNode RETURN() { return GetToken(SeagullParser.RETURN, 0); }
		public ReadPrintContext readPrint() {
			return GetRuleContext<ReadPrintContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 48, RULE_statement);
		int _la;
		try {
			State = 473;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 392; Match(L_CURL);
				 List<IStatement> delayed = new List<IStatement>(); 
				State = 403;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << WHILE) | (1L << FOR) | (1L << BREAK) | (1L << CONTINUE) | (1L << NEW) | (1L << RETURN) | (1L << PRINT) | (1L << READ) | (1L << DELAY) | (1L << DEFAULT) | (1L << MINUS) | (1L << PLUS_PLUS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (MINUS_MINUS - 64)) | (1L << (NOT - 64)) | (1L << (L_PAR - 64)) | (1L << (L_CURL - 64)) | (1L << (ID - 64)) | (1L << (INT_CONSTANT - 64)) | (1L << (REAL_CONSTANT - 64)) | (1L << (CHAR_CONSTANT - 64)) | (1L << (STRING_CONSTANT - 64)) | (1L << (BOOLEAN_CONSTANT - 64)))) != 0)) {
					{
					State = 401;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case IF:
					case WHILE:
					case FOR:
					case BREAK:
					case CONTINUE:
					case NEW:
					case RETURN:
					case PRINT:
					case READ:
					case DEFAULT:
					case MINUS:
					case PLUS_PLUS:
					case MINUS_MINUS:
					case NOT:
					case L_PAR:
					case L_CURL:
					case ID:
					case INT_CONSTANT:
					case REAL_CONSTANT:
					case CHAR_CONSTANT:
					case STRING_CONSTANT:
					case BOOLEAN_CONSTANT:
						{
						{
						State = 394; _localctx.st1 = statement();
						 _localctx.Ast.AddRange(_localctx.st1.Ast); 
						}
						}
						break;
					case DELAY:
						{
						{
						State = 397; Match(DELAY);
						State = 398; _localctx.st2 = statement();
						 delayed.AddRange(_localctx.st2.Ast); 
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 405;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				 _localctx.Ast.AddRange(delayed); 
				State = 407; Match(R_CURL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 408; _localctx.w = Match(WHILE);
				State = 409; Match(L_PAR);
				State = 410; _localctx.cond = expression(0);
				State = 411; Match(R_PAR);
				State = 412; _localctx.st = statement();
				 _localctx.Ast.Add(new WhileLoop(_localctx.w.GetLine(), _localctx.w.GetCol(), _localctx.cond.Ast, _localctx.st.Ast)); 
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 415; _localctx.f = Match(FOR);
				State = 416; Match(L_PAR);
				State = 417; _localctx.init = statement();
				State = 418; _localctx.cond = expression(0);
				State = 419; Match(SEMI_COL);
				State = 420; _localctx.incr = statement();
				State = 421; Match(R_PAR);
				State = 422; _localctx.st = statement();
				 _localctx.Ast.Add(new ForLoop(_localctx.f.GetLine(), _localctx.f.GetCol(), _localctx.init.Ast[0], _localctx.cond.Ast, _localctx.incr.Ast[0], _localctx.st.Ast)); 
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 425; _localctx.f = Match(FOR);
				State = 426; Match(L_PAR);
				State = 427; _localctx.e = variable();
				State = 428; Match(IN);
				State = 429; _localctx.col = expression(0);
				State = 430; Match(R_PAR);
				State = 431; _localctx.st = statement();
				 _localctx.Ast.Add(new ForeachLoop(_localctx.f.GetLine(), _localctx.f.GetCol(), _localctx.e.Ast, _localctx.col.Ast, _localctx.st.Ast)); 
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 434; _localctx.c = Match(CONTINUE);
				State = 435; Match(SEMI_COL);
				 _localctx.Ast.Add(new Continue(_localctx.c.GetLine(), _localctx.c.GetCol())); 
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 437; _localctx.br = Match(BREAK);
				State = 438; Match(SEMI_COL);
				 _localctx.Ast.Add(new Break(_localctx.br.GetLine(), _localctx.br.GetCol())); 
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 440; _localctx.i = Match(IF);
				State = 441; Match(L_PAR);
				State = 442; _localctx.cond = expression(0);
				State = 443; Match(R_PAR);
				State = 444; _localctx.st1 = statement();
				 _localctx.Ast.Add(new IfStatement(_localctx.i.GetLine(), _localctx.i.GetCol(), _localctx.cond.Ast, _localctx.st1.Ast)); 
				State = 450;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 446; Match(ELSE);
					State = 447; _localctx.st2 = statement();
					 ((IfStatement)_localctx.Ast[0]).Else = _localctx.st2.Ast; 
					}
					break;
				}
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 452; _localctx.e1 = expression(0);
				State = 453; Match(ASSIGN);
				State = 454; _localctx.e2 = expression(0);
				State = 455; Match(SEMI_COL);
				 _localctx.Ast.Add(new Assignment(_localctx.e1.Ast, _localctx.e2.Ast)); 
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 458; _localctx.r = Match(RETURN);
				State = 459; _localctx.expr = expression(0);
				State = 460; Match(SEMI_COL);
				 _localctx.Ast.Add(new Return(_localctx.r.GetLine(), _localctx.r.GetCol(), _localctx.expr.Ast)); 
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 463; _localctx.r = Match(RETURN);
				State = 464; Match(SEMI_COL);
				 _localctx.Ast.Add(new Return(_localctx.r.GetLine(), _localctx.r.GetCol(), null)); 
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 466; _localctx._readPrint = readPrint();
				 _localctx.Ast.Add(_localctx._readPrint.Ast); 
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 469; _localctx.e1 = expression(0);
				State = 470; Match(SEMI_COL);
				 
				  	        IExpression expr = _localctx.e1.Ast;
				  	        if (expr is IStatement)
				                _localctx.Ast.Add((IStatement) expr);
				            else {
				                Seagull.Errors.ErrorHandler
				                    .Instance
				                    .RaiseError(expr.Line, expr.Column, string.Format(
				                        "The expression {0} cannot be used as a statement", expr.ToString())
				                    );
				            }
				        
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadPrintContext : ParserRuleContext {
		public IStatement Ast;
		public IToken p;
		public ExpressionContext e;
		public IToken r;
		public ITerminalNode L_PAR() { return GetToken(SeagullParser.L_PAR, 0); }
		public ITerminalNode R_PAR() { return GetToken(SeagullParser.R_PAR, 0); }
		public ITerminalNode SEMI_COL() { return GetToken(SeagullParser.SEMI_COL, 0); }
		public ITerminalNode PRINT() { return GetToken(SeagullParser.PRINT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode READ() { return GetToken(SeagullParser.READ, 0); }
		public ReadPrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_readPrint; } }
	}

	[RuleVersion(0)]
	public ReadPrintContext readPrint() {
		ReadPrintContext _localctx = new ReadPrintContext(Context, State);
		EnterRule(_localctx, 50, RULE_readPrint);
		try {
			State = 489;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRINT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 475; _localctx.p = Match(PRINT);
				State = 476; Match(L_PAR);
				State = 477; _localctx.e = expression(0);
				State = 478; Match(R_PAR);
				State = 479; Match(SEMI_COL);
				 _localctx.Ast =  new Print(_localctx.p.GetLine(), _localctx.p.GetCol(), _localctx.e.Ast); 
				}
				break;
			case READ:
				EnterOuterAlt(_localctx, 2);
				{
				State = 482; _localctx.r = Match(READ);
				State = 483; Match(L_PAR);
				State = 484; _localctx.e = expression(0);
				State = 485; Match(R_PAR);
				State = 486; Match(SEMI_COL);
				 _localctx.Ast =  new Read(_localctx.r.GetLine(), _localctx.r.GetCol(), _localctx.e.Ast); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncInvocationContext : ParserRuleContext {
		public FunctionInvocation Ast;
		public List<IExpression> arguments = new List<IExpression>();
		public VariableContext func;
		public ExpressionContext e1;
		public ExpressionContext e2;
		public ITerminalNode L_PAR() { return GetToken(SeagullParser.L_PAR, 0); }
		public ITerminalNode R_PAR() { return GetToken(SeagullParser.R_PAR, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(SeagullParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(SeagullParser.COMMA, i);
		}
		public FuncInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcInvocation; } }
	}

	[RuleVersion(0)]
	public FuncInvocationContext funcInvocation() {
		FuncInvocationContext _localctx = new FuncInvocationContext(Context, State);
		EnterRule(_localctx, 52, RULE_funcInvocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 491; _localctx.func = variable();
			State = 492; Match(L_PAR);
			State = 504;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << DEFAULT) | (1L << MINUS) | (1L << PLUS_PLUS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (MINUS_MINUS - 64)) | (1L << (NOT - 64)) | (1L << (L_PAR - 64)) | (1L << (ID - 64)) | (1L << (INT_CONSTANT - 64)) | (1L << (REAL_CONSTANT - 64)) | (1L << (CHAR_CONSTANT - 64)) | (1L << (STRING_CONSTANT - 64)) | (1L << (BOOLEAN_CONSTANT - 64)))) != 0)) {
				{
				State = 493; _localctx.e1 = expression(0);
				 _localctx.arguments.Add(_localctx.e1.Ast); 
				State = 501;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 495; Match(COMMA);
					State = 496; _localctx.e2 = expression(0);
					 _localctx.arguments.Add(_localctx.e2.Ast); 
					}
					}
					State = 503;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 506; Match(R_PAR);
			 _localctx.Ast =  new FunctionInvocation(_localctx.func.Ast, _localctx.arguments); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FnBlockContext : ParserRuleContext {
		public List<IStatement> Ast = new List<IStatement>();
		public FnBlockContentContext c1;
		public FnBlockContentContext c2;
		public ITerminalNode L_CURL() { return GetToken(SeagullParser.L_CURL, 0); }
		public ITerminalNode R_CURL() { return GetToken(SeagullParser.R_CURL, 0); }
		public ITerminalNode[] DELAY() { return GetTokens(SeagullParser.DELAY); }
		public ITerminalNode DELAY(int i) {
			return GetToken(SeagullParser.DELAY, i);
		}
		public FnBlockContentContext[] fnBlockContent() {
			return GetRuleContexts<FnBlockContentContext>();
		}
		public FnBlockContentContext fnBlockContent(int i) {
			return GetRuleContext<FnBlockContentContext>(i);
		}
		public FnBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fnBlock; } }
	}

	[RuleVersion(0)]
	public FnBlockContext fnBlock() {
		FnBlockContext _localctx = new FnBlockContext(Context, State);
		EnterRule(_localctx, 54, RULE_fnBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 509; Match(L_CURL);
			 List<IStatement> delayed = new List<IStatement>(); 
			State = 520;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << CHAR) | (1L << DOUBLE) | (1L << STRING) | (1L << LONG) | (1L << BYTE) | (1L << VAR) | (1L << PTR) | (1L << IF) | (1L << WHILE) | (1L << FOR) | (1L << BREAK) | (1L << CONTINUE) | (1L << NEW) | (1L << RETURN) | (1L << PRINT) | (1L << READ) | (1L << DELAY) | (1L << DEFAULT) | (1L << MINUS) | (1L << PLUS_PLUS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (MINUS_MINUS - 64)) | (1L << (NOT - 64)) | (1L << (L_PAR - 64)) | (1L << (L_CURL - 64)) | (1L << (ID - 64)) | (1L << (INT_CONSTANT - 64)) | (1L << (REAL_CONSTANT - 64)) | (1L << (CHAR_CONSTANT - 64)) | (1L << (STRING_CONSTANT - 64)) | (1L << (BOOLEAN_CONSTANT - 64)))) != 0)) {
				{
				State = 518;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INT:
				case CHAR:
				case DOUBLE:
				case STRING:
				case LONG:
				case BYTE:
				case VAR:
				case PTR:
				case IF:
				case WHILE:
				case FOR:
				case BREAK:
				case CONTINUE:
				case NEW:
				case RETURN:
				case PRINT:
				case READ:
				case DEFAULT:
				case MINUS:
				case PLUS_PLUS:
				case MINUS_MINUS:
				case NOT:
				case L_PAR:
				case L_CURL:
				case ID:
				case INT_CONSTANT:
				case REAL_CONSTANT:
				case CHAR_CONSTANT:
				case STRING_CONSTANT:
				case BOOLEAN_CONSTANT:
					{
					{
					State = 511; _localctx.c1 = fnBlockContent();
					 _localctx.Ast.AddRange(_localctx.c1.Ast); 
					}
					}
					break;
				case DELAY:
					{
					{
					State = 514; Match(DELAY);
					State = 515; _localctx.c2 = fnBlockContent();
					 delayed.AddRange(_localctx.c2.Ast); 
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 522;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			 _localctx.Ast.AddRange(delayed); 
			State = 524; Match(R_CURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FnBlockContentContext : ParserRuleContext {
		public List<IStatement> Ast = new List<IStatement>();
		public VariableDefContext _variableDef;
		public StatementContext block;
		public VariableDefContext variableDef() {
			return GetRuleContext<VariableDefContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public FnBlockContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fnBlockContent; } }
	}

	[RuleVersion(0)]
	public FnBlockContentContext fnBlockContent() {
		FnBlockContentContext _localctx = new FnBlockContentContext(Context, State);
		EnterRule(_localctx, 56, RULE_fnBlockContent);
		try {
			State = 532;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 526; _localctx._variableDef = variableDef();
				 _localctx.Ast.AddRange(_localctx._variableDef.Ast); 
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 529; _localctx.block = statement();
				 _localctx.Ast.AddRange(_localctx.block.Ast); 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public IExpression Ast;
		public ExpressionContext e1;
		public ExpressionContext e;
		public VariableContext _variable;
		public LiteralContext _literal;
		public FuncInvocationContext _funcInvocation;
		public ExpressionContext _expression;
		public IToken n;
		public IToken id;
		public IToken def;
		public TypeContext _type;
		public IToken um;
		public IToken not;
		public IToken p;
		public IToken m;
		public PrimitiveContext t;
		public IToken op;
		public ExpressionContext e2;
		public ExpressionContext e3;
		public IToken att;
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public FuncInvocationContext funcInvocation() {
			return GetRuleContext<FuncInvocationContext>(0);
		}
		public ITerminalNode L_PAR() { return GetToken(SeagullParser.L_PAR, 0); }
		public ITerminalNode R_PAR() { return GetToken(SeagullParser.R_PAR, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode NEW() { return GetToken(SeagullParser.NEW, 0); }
		public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(SeagullParser.DEFAULT, 0); }
		public ITerminalNode MINUS() { return GetToken(SeagullParser.MINUS, 0); }
		public ITerminalNode NOT() { return GetToken(SeagullParser.NOT, 0); }
		public ITerminalNode PLUS_PLUS() { return GetToken(SeagullParser.PLUS_PLUS, 0); }
		public ITerminalNode MINUS_MINUS() { return GetToken(SeagullParser.MINUS_MINUS, 0); }
		public PrimitiveContext primitive() {
			return GetRuleContext<PrimitiveContext>(0);
		}
		public ITerminalNode STAR() { return GetToken(SeagullParser.STAR, 0); }
		public ITerminalNode SLASH() { return GetToken(SeagullParser.SLASH, 0); }
		public ITerminalNode PERCENT() { return GetToken(SeagullParser.PERCENT, 0); }
		public ITerminalNode PLUS() { return GetToken(SeagullParser.PLUS, 0); }
		public ITerminalNode GREATER_THAN() { return GetToken(SeagullParser.GREATER_THAN, 0); }
		public ITerminalNode LESS_THAN() { return GetToken(SeagullParser.LESS_THAN, 0); }
		public ITerminalNode GREATER_EQ_THAN() { return GetToken(SeagullParser.GREATER_EQ_THAN, 0); }
		public ITerminalNode LESS_EQ_THAN() { return GetToken(SeagullParser.LESS_EQ_THAN, 0); }
		public ITerminalNode EQUAL() { return GetToken(SeagullParser.EQUAL, 0); }
		public ITerminalNode NOT_EQUAL() { return GetToken(SeagullParser.NOT_EQUAL, 0); }
		public ITerminalNode AND() { return GetToken(SeagullParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(SeagullParser.OR, 0); }
		public ITerminalNode QUESTION() { return GetToken(SeagullParser.QUESTION, 0); }
		public ITerminalNode COL() { return GetToken(SeagullParser.COL, 0); }
		public ITerminalNode L_BRACKET() { return GetToken(SeagullParser.L_BRACKET, 0); }
		public ITerminalNode R_BRACKET() { return GetToken(SeagullParser.R_BRACKET, 0); }
		public ITerminalNode DOT() { return GetToken(SeagullParser.DOT, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 58;
		EnterRecursionRule(_localctx, 58, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 580;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				{
				State = 535; _localctx._variable = variable();
				 _localctx.Ast =  _localctx._variable.Ast; 
				}
				break;
			case 2:
				{
				State = 538; _localctx._literal = literal();
				 _localctx.Ast =  _localctx._literal.Ast; 
				}
				break;
			case 3:
				{
				State = 541; _localctx._funcInvocation = funcInvocation();
				 _localctx.Ast =  _localctx._funcInvocation.Ast; 
				}
				break;
			case 4:
				{
				State = 544; Match(L_PAR);
				State = 545; _localctx.e = _localctx._expression = expression(0);
				State = 546; Match(R_PAR);
				 _localctx.Ast =  _localctx.e.Ast; 
				}
				break;
			case 5:
				{
				State = 549; _localctx.n = Match(NEW);
				State = 550; _localctx.id = Match(ID);
				 _localctx.Ast =  new New(_localctx.n.GetLine(), _localctx.n.GetCol(), _localctx.id.GetText()); 
				}
				break;
			case 6:
				{
				State = 552; _localctx.def = Match(DEFAULT);
				State = 553; Match(L_PAR);
				State = 554; _localctx._type = type(0);
				State = 555; Match(R_PAR);
				 _localctx.Ast =  new Default(_localctx.def.GetLine(), _localctx.def.GetCol(), _localctx._type.Ast); 
				}
				break;
			case 7:
				{
				State = 558; _localctx.um = Match(MINUS);
				State = 559; _localctx._expression = expression(12);
				 _localctx.Ast =  new UnaryMinus(_localctx.um.GetLine(), _localctx.um.GetCol(), _localctx._expression.Ast); 
				}
				break;
			case 8:
				{
				State = 562; _localctx.not = Match(NOT);
				State = 563; _localctx._expression = expression(11);
				 _localctx.Ast =  new Negation(_localctx.not.GetLine(), _localctx.not.GetCol(), _localctx._expression.Ast); 
				}
				break;
			case 9:
				{
				State = 566; _localctx.p = Match(PLUS_PLUS);
				State = 567; _localctx.e = _localctx._expression = expression(8);
				 _localctx.Ast =  new Increment(_localctx.p.GetLine(), _localctx.p.GetCol(), true, _localctx.e.Ast); 
				}
				break;
			case 10:
				{
				State = 570; _localctx.m = Match(MINUS_MINUS);
				State = 571; _localctx.e = _localctx._expression = expression(7);
				 _localctx.Ast =  new Decrement(_localctx.m.GetLine(), _localctx.m.GetCol(), true, _localctx.e.Ast); 
				}
				break;
			case 11:
				{
				State = 574; _localctx.p = Match(L_PAR);
				State = 575; _localctx.t = primitive();
				State = 576; Match(R_PAR);
				State = 577; _localctx.e = _localctx._expression = expression(4);
				 _localctx.Ast =  new Cast(_localctx.p.GetLine(), _localctx.p.GetCol(), _localctx.t.Ast, _localctx.e.Ast); 
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 627;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 625;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.e1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 582;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 583;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << SLASH) | (1L << PERCENT))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 584; _localctx.e2 = _localctx._expression = expression(7);
						 _localctx.Ast =  new Arithmetic((_localctx.op!=null?_localctx.op.Text:null), _localctx.e1.Ast, _localctx.e2.Ast); 
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.e1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 587;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 588;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 589; _localctx.e2 = _localctx._expression = expression(6);
						 _localctx.Ast =  new Arithmetic((_localctx.op!=null?_localctx.op.Text:null), _localctx.e1.Ast, _localctx.e2.Ast); 
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.e1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 592;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 593;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (EQUAL - 85)) | (1L << (NOT_EQUAL - 85)) | (1L << (LESS_THAN - 85)) | (1L << (GREATER_THAN - 85)) | (1L << (LESS_EQ_THAN - 85)) | (1L << (GREATER_EQ_THAN - 85)))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 594; _localctx.e2 = _localctx._expression = expression(4);
						 _localctx.Ast =  new Comparison((_localctx.op!=null?_localctx.op.Text:null), _localctx.e1.Ast, _localctx.e2.Ast); 
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.e1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 597;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 598;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==AND || _la==OR) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 599; _localctx.e2 = _localctx._expression = expression(3);
						 _localctx.Ast =  new LogicalOperation((_localctx.op!=null?_localctx.op.Text:null), _localctx.e1.Ast, _localctx.e2.Ast); 
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.e1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 602;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 603; Match(QUESTION);
						State = 604; _localctx.e2 = _localctx._expression = expression(0);
						State = 605; Match(COL);
						State = 606; _localctx.e3 = _localctx._expression = expression(2);
						 _localctx.Ast =  new TernaryOperator(_localctx.e1.Ast, _localctx.e2.Ast, _localctx.e3.Ast); 
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.e1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 609;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 610; Match(L_BRACKET);
						State = 611; _localctx.e2 = _localctx._expression = expression(0);
						State = 612; Match(R_BRACKET);
						 _localctx.Ast =  new Indexing(_localctx.e1.Ast, _localctx.e2.Ast); 
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.e = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 615;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 616; Match(DOT);
						State = 617; _localctx.att = Match(ID);
						 _localctx.Ast =  new AttributeAccess(_localctx.e.Ast, (_localctx.att!=null?_localctx.att.Text:null)); 
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.e = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 619;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 620; Match(PLUS_PLUS);
						 _localctx.Ast =  new Increment(_localctx.e.Ast.Line, _localctx.e.Ast.Column, false, _localctx.e.Ast); 
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.e = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 622;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 623; Match(MINUS_MINUS);
						 _localctx.Ast =  new Decrement(_localctx.e.Ast.Line, _localctx.e.Ast.Column, false, _localctx.e.Ast); 
						}
						break;
					}
					} 
				}
				State = 629;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public Variable Ast;
		public IToken _ID;
		public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 60, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 630; _localctx._ID = Match(ID);
			 _localctx.Ast =  new Variable(_localctx._ID.GetLine(), _localctx._ID.GetCol(), (_localctx._ID!=null?_localctx._ID.Text:null)); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public IExpression Ast;
		public IToken i;
		public IToken r;
		public IToken c;
		public IToken s;
		public IToken b;
		public ITerminalNode INT_CONSTANT() { return GetToken(SeagullParser.INT_CONSTANT, 0); }
		public ITerminalNode REAL_CONSTANT() { return GetToken(SeagullParser.REAL_CONSTANT, 0); }
		public ITerminalNode CHAR_CONSTANT() { return GetToken(SeagullParser.CHAR_CONSTANT, 0); }
		public ITerminalNode STRING_CONSTANT() { return GetToken(SeagullParser.STRING_CONSTANT, 0); }
		public ITerminalNode BOOLEAN_CONSTANT() { return GetToken(SeagullParser.BOOLEAN_CONSTANT, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 62, RULE_literal);
		try {
			State = 643;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_CONSTANT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 633; _localctx.i = Match(INT_CONSTANT);
				 _localctx.Ast =  new IntLiteral(_localctx.i.GetLine(), _localctx.i.GetCol(), LexerHelper.LexemeToInt((_localctx.i!=null?_localctx.i.Text:null))); 
				}
				break;
			case REAL_CONSTANT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 635; _localctx.r = Match(REAL_CONSTANT);
				 _localctx.Ast =  new DoubleLiteral(_localctx.r.GetLine(), _localctx.r.GetCol(), LexerHelper.LexemeToReal((_localctx.r!=null?_localctx.r.Text:null))); 
				}
				break;
			case CHAR_CONSTANT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 637; _localctx.c = Match(CHAR_CONSTANT);
				 _localctx.Ast =  new CharLiteral(_localctx.c.GetLine(), _localctx.c.GetCol(), LexerHelper.LexemeToChar((_localctx.c!=null?_localctx.c.Text:null))); 
				}
				break;
			case STRING_CONSTANT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 639; _localctx.s = Match(STRING_CONSTANT);
				 _localctx.Ast =  new StringLiteral(_localctx.s.GetLine(), _localctx.s.GetCol(), (_localctx.s!=null?_localctx.s.Text:null)); 
				}
				break;
			case BOOLEAN_CONSTANT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 641; _localctx.b = Match(BOOLEAN_CONSTANT);
				 _localctx.Ast =  new BooleanLiteral(_localctx.b.GetLine(), _localctx.b.GetCol(), LexerHelper.LexemeToBoolean((_localctx.b!=null?_localctx.b.Text:null))); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return type_sempred((TypeContext)_localctx, predIndex);
		case 6: return namespaceType_sempred((NamespaceTypeContext)_localctx, predIndex);
		case 29: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool type_sempred(TypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool namespaceType_sempred(NamespaceTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 3);
		case 5: return Precpred(Context, 2);
		case 6: return Precpred(Context, 1);
		case 7: return Precpred(Context, 16);
		case 8: return Precpred(Context, 15);
		case 9: return Precpred(Context, 10);
		case 10: return Precpred(Context, 9);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'l', '\x288', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\a', '\x2', '\x46', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 'I', 
		'\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', 'N', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', 'Q', '\v', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\a', '\x2', 'Y', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\\', '\v', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', 'k', '\n', 
		'\x4', '\f', '\x4', '\xE', '\x4', 'n', '\v', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x5', '\x5', 'x', '\n', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', '\x87', '\n', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\x92', '\n', '\x6', 
		'\f', '\x6', '\xE', '\x6', '\x95', '\v', '\x6', '\a', '\x6', '\x97', '\n', 
		'\x6', '\f', '\x6', '\xE', '\x6', '\x9A', '\v', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', '\xA3', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', 
		'\b', '\xAD', '\n', '\b', '\f', '\b', '\xE', '\b', '\xB0', '\v', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xB6', 
		'\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 
		'\xC1', '\n', '\t', '\x5', '\t', '\xC3', '\n', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\xCF', '\n', '\n', 
		'\f', '\n', '\xE', '\n', '\xD2', '\v', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', 
		'\n', '\xDB', '\n', '\n', '\f', '\n', '\xE', '\n', '\xDE', '\v', '\n', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\xE4', 
		'\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\xE9', 
		'\n', '\v', '\f', '\v', '\xE', '\v', '\xEC', '\v', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', '\xF8', '\n', 
		'\f', '\f', '\f', '\xE', '\f', '\xFB', '\v', '\f', '\x5', '\f', '\xFD', 
		'\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x5', '\r', '\x109', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x5', '\xE', '\x119', '\n', '\xE', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x124', '\n', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x132', '\n', '\x11', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x5', '\x12', '\x13A', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\a', '\x12', '\x13F', '\n', '\x12', '\f', '\x12', '\xE', 
		'\x12', '\x142', '\v', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x5', '\x13', '\x156', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\a', 
		'\x15', '\x164', '\n', '\x15', '\f', '\x15', '\xE', '\x15', '\x167', '\v', 
		'\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x5', '\x16', '\x16F', '\n', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x5', '\x18', '\x181', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\a', 
		'\x1A', '\x194', '\n', '\x1A', '\f', '\x1A', '\xE', '\x1A', '\x197', '\v', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', 
		'\x1A', '\x1C5', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x1DC', '\n', 
		'\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', 
		'\x1B', '\x1EC', '\n', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\a', '\x1C', '\x1F6', '\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', '\x1F9', 
		'\v', '\x1C', '\x5', '\x1C', '\x1FB', '\n', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\a', '\x1D', '\x209', '\n', '\x1D', '\f', '\x1D', '\xE', '\x1D', 
		'\x20C', '\v', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x5', '\x1E', '\x217', '\n', '\x1E', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', 
		'\x247', '\n', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\a', 
		'\x1F', '\x274', '\n', '\x1F', '\f', '\x1F', '\xE', '\x1F', '\x277', '\v', 
		'\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\x5', '!', '\x286', '\n', '!', '\x3', '!', '\x2', '\x5', 
		'\n', '\xE', '<', '\"', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', 
		'$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', 
		':', '<', '>', '@', '\x2', '\x6', '\x3', '\x2', '\x39', ';', '\x3', '\x2', 
		'>', '?', '\x3', '\x2', 'W', '\\', '\x3', '\x2', 'I', 'J', '\x2', '\x2BB', 
		'\x2', 'G', '\x3', '\x2', '\x2', '\x2', '\x4', '`', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\x64', '\x3', '\x2', '\x2', '\x2', '\b', 'w', '\x3', '\x2', 
		'\x2', '\x2', '\n', '\x86', '\x3', '\x2', '\x2', '\x2', '\f', '\xA2', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\xA4', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\xB1', '\x3', '\x2', '\x2', '\x2', '\x12', '\xC6', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\xDF', '\x3', '\x2', '\x2', '\x2', '\x16', '\xF0', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\x108', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x118', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x11A', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\x123', '\x3', '\x2', '\x2', '\x2', ' ', '\x131', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\x133', '\x3', '\x2', '\x2', '\x2', 
		'$', '\x155', '\x3', '\x2', '\x2', '\x2', '&', '\x157', '\x3', '\x2', 
		'\x2', '\x2', '(', '\x15E', '\x3', '\x2', '\x2', '\x2', '*', '\x168', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x174', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x179', '\x3', '\x2', '\x2', '\x2', '\x30', '\x185', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x1DB', '\x3', '\x2', '\x2', '\x2', '\x34', '\x1EB', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x1ED', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x1FF', '\x3', '\x2', '\x2', '\x2', ':', '\x216', '\x3', '\x2', 
		'\x2', '\x2', '<', '\x246', '\x3', '\x2', '\x2', '\x2', '>', '\x278', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x285', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x43', '\x5', '\x4', '\x3', '\x2', '\x43', '\x44', '\b', '\x2', 
		'\x1', '\x2', '\x44', '\x46', '\x3', '\x2', '\x2', '\x2', '\x45', '\x42', 
		'\x3', '\x2', '\x2', '\x2', '\x46', 'I', '\x3', '\x2', '\x2', '\x2', 'G', 
		'\x45', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\x3', '\x2', '\x2', '\x2', 
		'H', 'O', '\x3', '\x2', '\x2', '\x2', 'I', 'G', '\x3', '\x2', '\x2', '\x2', 
		'J', 'K', '\x5', '\x6', '\x4', '\x2', 'K', 'L', '\b', '\x2', '\x1', '\x2', 
		'L', 'N', '\x3', '\x2', '\x2', '\x2', 'M', 'J', '\x3', '\x2', '\x2', '\x2', 
		'N', 'Q', '\x3', '\x2', '\x2', '\x2', 'O', 'M', '\x3', '\x2', '\x2', '\x2', 
		'O', 'P', '\x3', '\x2', '\x2', '\x2', 'P', 'Z', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x5', '\"', '\x12', '\x2', 
		'S', 'T', '\b', '\x2', '\x1', '\x2', 'T', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'U', 'V', '\x5', ' ', '\x11', '\x2', 'V', 'W', '\b', '\x2', '\x1', '\x2', 
		'W', 'Y', '\x3', '\x2', '\x2', '\x2', 'X', 'R', '\x3', '\x2', '\x2', '\x2', 
		'X', 'U', '\x3', '\x2', '\x2', '\x2', 'Y', '\\', '\x3', '\x2', '\x2', 
		'\x2', 'Z', 'X', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\x3', '\x2', '\x2', 
		'\x2', '[', ']', '\x3', '\x2', '\x2', '\x2', '\\', 'Z', '\x3', '\x2', 
		'\x2', '\x2', ']', '^', '\a', '\x2', '\x2', '\x3', '^', '_', '\b', '\x2', 
		'\x1', '\x2', '_', '\x3', '\x3', '\x2', '\x2', '\x2', '`', '\x61', '\a', 
		'.', '\x2', '\x2', '\x61', '\x62', '\a', '\x61', '\x2', '\x2', '\x62', 
		'\x63', '\b', '\x3', '\x1', '\x2', '\x63', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x64', '\x65', '\a', '/', '\x2', '\x2', '\x65', '\x66', '\a', 
		']', '\x2', '\x2', '\x66', 'l', '\b', '\x4', '\x1', '\x2', 'g', 'h', '\a', 
		'\x34', '\x2', '\x2', 'h', 'i', '\a', ']', '\x2', '\x2', 'i', 'k', '\b', 
		'\x4', '\x1', '\x2', 'j', 'g', '\x3', '\x2', '\x2', '\x2', 'k', 'n', '\x3', 
		'\x2', '\x2', '\x2', 'l', 'j', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\x3', 
		'\x2', '\x2', '\x2', 'm', 'o', '\x3', '\x2', '\x2', '\x2', 'n', 'l', '\x3', 
		'\x2', '\x2', '\x2', 'o', 'p', '\a', '\x37', '\x2', '\x2', 'p', '\a', 
		'\x3', '\x2', '\x2', '\x2', 'q', 'r', '\x5', '\n', '\x6', '\x2', 'r', 
		's', '\b', '\x5', '\x1', '\x2', 's', 'x', '\x3', '\x2', '\x2', '\x2', 
		't', 'u', '\x5', '\x1C', '\xF', '\x2', 'u', 'v', '\b', '\x5', '\x1', '\x2', 
		'v', 'x', '\x3', '\x2', '\x2', '\x2', 'w', 'q', '\x3', '\x2', '\x2', '\x2', 
		'w', 't', '\x3', '\x2', '\x2', '\x2', 'x', '\t', '\x3', '\x2', '\x2', 
		'\x2', 'y', 'z', '\b', '\x6', '\x1', '\x2', 'z', '{', '\x5', '\x1A', '\xE', 
		'\x2', '{', '|', '\b', '\x6', '\x1', '\x2', '|', '\x87', '\x3', '\x2', 
		'\x2', '\x2', '}', '~', '\x5', '\x10', '\t', '\x2', '~', '\x7F', '\b', 
		'\x6', '\x1', '\x2', '\x7F', '\x87', '\x3', '\x2', '\x2', '\x2', '\x80', 
		'\x81', '\x5', '\x14', '\v', '\x2', '\x81', '\x82', '\b', '\x6', '\x1', 
		'\x2', '\x82', '\x87', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\x5', 
		'\f', '\a', '\x2', '\x84', '\x85', '\b', '\x6', '\x1', '\x2', '\x85', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x86', 'y', '\x3', '\x2', '\x2', 
		'\x2', '\x86', '}', '\x3', '\x2', '\x2', '\x2', '\x86', '\x80', '\x3', 
		'\x2', '\x2', '\x2', '\x86', '\x83', '\x3', '\x2', '\x2', '\x2', '\x87', 
		'\x98', '\x3', '\x2', '\x2', '\x2', '\x88', '\x89', '\f', '\x3', '\x2', 
		'\x2', '\x89', '\x8A', '\a', 'K', '\x2', '\x2', '\x8A', '\x8B', '\a', 
		'^', '\x2', '\x2', '\x8B', '\x8C', '\a', 'L', '\x2', '\x2', '\x8C', '\x93', 
		'\b', '\x6', '\x1', '\x2', '\x8D', '\x8E', '\a', 'K', '\x2', '\x2', '\x8E', 
		'\x8F', '\a', '^', '\x2', '\x2', '\x8F', '\x90', '\a', 'L', '\x2', '\x2', 
		'\x90', '\x92', '\b', '\x6', '\x1', '\x2', '\x91', '\x8D', '\x3', '\x2', 
		'\x2', '\x2', '\x92', '\x95', '\x3', '\x2', '\x2', '\x2', '\x93', '\x91', 
		'\x3', '\x2', '\x2', '\x2', '\x93', '\x94', '\x3', '\x2', '\x2', '\x2', 
		'\x94', '\x97', '\x3', '\x2', '\x2', '\x2', '\x95', '\x93', '\x3', '\x2', 
		'\x2', '\x2', '\x96', '\x88', '\x3', '\x2', '\x2', '\x2', '\x97', '\x9A', 
		'\x3', '\x2', '\x2', '\x2', '\x98', '\x96', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x99', '\x3', '\x2', '\x2', '\x2', '\x99', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x9A', '\x98', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', 
		'\a', ']', '\x2', '\x2', '\x9C', '\xA3', '\b', '\a', '\x1', '\x2', '\x9D', 
		'\x9E', '\x5', '\xE', '\b', '\x2', '\x9E', '\x9F', '\a', '\x34', '\x2', 
		'\x2', '\x9F', '\xA0', '\a', ']', '\x2', '\x2', '\xA0', '\xA1', '\b', 
		'\a', '\x1', '\x2', '\xA1', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA2', 
		'\x9B', '\x3', '\x2', '\x2', '\x2', '\xA2', '\x9D', '\x3', '\x2', '\x2', 
		'\x2', '\xA3', '\r', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\b', 
		'\b', '\x1', '\x2', '\xA5', '\xA6', '\a', ']', '\x2', '\x2', '\xA6', '\xA7', 
		'\b', '\b', '\x1', '\x2', '\xA7', '\xAE', '\x3', '\x2', '\x2', '\x2', 
		'\xA8', '\xA9', '\f', '\x3', '\x2', '\x2', '\xA9', '\xAA', '\a', '\x34', 
		'\x2', '\x2', '\xAA', '\xAB', '\a', ']', '\x2', '\x2', '\xAB', '\xAD', 
		'\b', '\b', '\x1', '\x2', '\xAC', '\xA8', '\x3', '\x2', '\x2', '\x2', 
		'\xAD', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAC', '\x3', '\x2', 
		'\x2', '\x2', '\xAE', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\xB0', '\xAE', '\x3', '\x2', '\x2', '\x2', 
		'\xB1', '\xB5', '\a', 'M', '\x2', '\x2', '\xB2', '\xB3', '\x5', '\x12', 
		'\n', '\x2', '\xB3', '\xB4', '\b', '\t', '\x1', '\x2', '\xB4', '\xB6', 
		'\x3', '\x2', '\x2', '\x2', '\xB5', '\xB2', '\x3', '\x2', '\x2', '\x2', 
		'\xB5', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\x3', '\x2', 
		'\x2', '\x2', '\xB7', '\xB8', '\a', 'N', '\x2', '\x2', '\xB8', '\xC2', 
		'\b', '\t', '\x1', '\x2', '\xB9', '\xC0', '\a', '<', '\x2', '\x2', '\xBA', 
		'\xBB', '\x5', '\n', '\x6', '\x2', '\xBB', '\xBC', '\b', '\t', '\x1', 
		'\x2', '\xBC', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', '\x5', 
		'\x1C', '\xF', '\x2', '\xBE', '\xBF', '\b', '\t', '\x1', '\x2', '\xBF', 
		'\xC1', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xBA', '\x3', '\x2', '\x2', 
		'\x2', '\xC0', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC3', '\x3', 
		'\x2', '\x2', '\x2', '\xC2', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xC2', 
		'\xC3', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', '\x3', '\x2', '\x2', 
		'\x2', '\xC4', '\xC5', '\b', '\t', '\x1', '\x2', '\xC5', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\xC6', '\xC7', '\x5', '\n', '\x6', '\x2', '\xC7', 
		'\xC8', '\a', ']', '\x2', '\x2', '\xC8', '\xD0', '\b', '\n', '\x1', '\x2', 
		'\xC9', '\xCA', '\a', '\x35', '\x2', '\x2', '\xCA', '\xCB', '\x5', '\n', 
		'\x6', '\x2', '\xCB', '\xCC', '\a', ']', '\x2', '\x2', '\xCC', '\xCD', 
		'\b', '\n', '\x1', '\x2', '\xCD', '\xCF', '\x3', '\x2', '\x2', '\x2', 
		'\xCE', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xD2', '\x3', '\x2', 
		'\x2', '\x2', '\xD0', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD1', 
		'\x3', '\x2', '\x2', '\x2', '\xD1', '\xDC', '\x3', '\x2', '\x2', '\x2', 
		'\xD2', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD4', '\a', '\x35', 
		'\x2', '\x2', '\xD4', '\xD5', '\x5', '\n', '\x6', '\x2', '\xD5', '\xD6', 
		'\a', ']', '\x2', '\x2', '\xD6', '\xD7', '\a', '\x38', '\x2', '\x2', '\xD7', 
		'\xD8', '\x5', '@', '!', '\x2', '\xD8', '\xD9', '\b', '\n', '\x1', '\x2', 
		'\xD9', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xD3', '\x3', '\x2', 
		'\x2', '\x2', '\xDB', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDA', 
		'\x3', '\x2', '\x2', '\x2', '\xDC', '\xDD', '\x3', '\x2', '\x2', '\x2', 
		'\xDD', '\x13', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xDC', '\x3', '\x2', 
		'\x2', '\x2', '\xDF', '\xEA', '\a', 'O', '\x2', '\x2', '\xE0', '\xE1', 
		'\x5', '\x1E', '\x10', '\x2', '\xE1', '\xE2', '\b', '\v', '\x1', '\x2', 
		'\xE2', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE0', '\x3', '\x2', 
		'\x2', '\x2', '\xE3', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE5', 
		'\x3', '\x2', '\x2', '\x2', '\xE5', '\xE6', '\x5', '$', '\x13', '\x2', 
		'\xE6', '\xE7', '\b', '\v', '\x1', '\x2', '\xE7', '\xE9', '\x3', '\x2', 
		'\x2', '\x2', '\xE8', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEC', 
		'\x3', '\x2', '\x2', '\x2', '\xEA', '\xE8', '\x3', '\x2', '\x2', '\x2', 
		'\xEA', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xED', '\x3', '\x2', 
		'\x2', '\x2', '\xEC', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEE', 
		'\a', 'P', '\x2', '\x2', '\xEE', '\xEF', '\b', '\v', '\x1', '\x2', '\xEF', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xFC', '\a', 'O', '\x2', 
		'\x2', '\xF1', '\xF2', '\x5', '\x18', '\r', '\x2', '\xF2', '\xF9', '\b', 
		'\f', '\x1', '\x2', '\xF3', '\xF4', '\a', '\x35', '\x2', '\x2', '\xF4', 
		'\xF5', '\x5', '\x18', '\r', '\x2', '\xF5', '\xF6', '\b', '\f', '\x1', 
		'\x2', '\xF6', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF3', '\x3', 
		'\x2', '\x2', '\x2', '\xF8', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xF9', 
		'\xF7', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFA', '\x3', '\x2', '\x2', 
		'\x2', '\xFA', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xF9', '\x3', 
		'\x2', '\x2', '\x2', '\xFC', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xFC', 
		'\xFD', '\x3', '\x2', '\x2', '\x2', '\xFD', '\xFE', '\x3', '\x2', '\x2', 
		'\x2', '\xFE', '\xFF', '\a', 'P', '\x2', '\x2', '\xFF', '\x100', '\b', 
		'\f', '\x1', '\x2', '\x100', '\x17', '\x3', '\x2', '\x2', '\x2', '\x101', 
		'\x102', '\a', ']', '\x2', '\x2', '\x102', '\x103', '\a', '\x38', '\x2', 
		'\x2', '\x103', '\x104', '\x5', '<', '\x1F', '\x2', '\x104', '\x105', 
		'\b', '\r', '\x1', '\x2', '\x105', '\x109', '\x3', '\x2', '\x2', '\x2', 
		'\x106', '\x107', '\a', ']', '\x2', '\x2', '\x107', '\x109', '\b', '\r', 
		'\x1', '\x2', '\x108', '\x101', '\x3', '\x2', '\x2', '\x2', '\x108', '\x106', 
		'\x3', '\x2', '\x2', '\x2', '\x109', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x10A', '\x10B', '\a', '\x11', '\x2', '\x2', '\x10B', '\x119', '\b', 
		'\xE', '\x1', '\x2', '\x10C', '\x10D', '\a', '\x6', '\x2', '\x2', '\x10D', 
		'\x119', '\b', '\xE', '\x1', '\x2', '\x10E', '\x10F', '\a', '\v', '\x2', 
		'\x2', '\x10F', '\x119', '\b', '\xE', '\x1', '\x2', '\x110', '\x111', 
		'\a', '\x5', '\x2', '\x2', '\x111', '\x119', '\b', '\xE', '\x1', '\x2', 
		'\x112', '\x113', '\a', '\a', '\x2', '\x2', '\x113', '\x119', '\b', '\xE', 
		'\x1', '\x2', '\x114', '\x115', '\a', '\n', '\x2', '\x2', '\x115', '\x119', 
		'\b', '\xE', '\x1', '\x2', '\x116', '\x117', '\a', '\b', '\x2', '\x2', 
		'\x117', '\x119', '\b', '\xE', '\x1', '\x2', '\x118', '\x10A', '\x3', 
		'\x2', '\x2', '\x2', '\x118', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x118', 
		'\x10E', '\x3', '\x2', '\x2', '\x2', '\x118', '\x110', '\x3', '\x2', '\x2', 
		'\x2', '\x118', '\x112', '\x3', '\x2', '\x2', '\x2', '\x118', '\x114', 
		'\x3', '\x2', '\x2', '\x2', '\x118', '\x116', '\x3', '\x2', '\x2', '\x2', 
		'\x119', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x11B', '\a', '\x4', 
		'\x2', '\x2', '\x11B', '\x11C', '\b', '\xF', '\x1', '\x2', '\x11C', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\x11D', '\x11E', '\a', '%', '\x2', '\x2', 
		'\x11E', '\x124', '\b', '\x10', '\x1', '\x2', '\x11F', '\x120', '\a', 
		'&', '\x2', '\x2', '\x120', '\x124', '\b', '\x10', '\x1', '\x2', '\x121', 
		'\x122', '\a', '\'', '\x2', '\x2', '\x122', '\x124', '\b', '\x10', '\x1', 
		'\x2', '\x123', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x123', '\x11F', 
		'\x3', '\x2', '\x2', '\x2', '\x123', '\x121', '\x3', '\x2', '\x2', '\x2', 
		'\x124', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x125', '\x126', '\x5', 
		'$', '\x13', '\x2', '\x126', '\x127', '\b', '\x11', '\x1', '\x2', '\x127', 
		'\x132', '\x3', '\x2', '\x2', '\x2', '\x128', '\x129', '\x5', '*', '\x16', 
		'\x2', '\x129', '\x12A', '\b', '\x11', '\x1', '\x2', '\x12A', '\x132', 
		'\x3', '\x2', '\x2', '\x2', '\x12B', '\x12C', '\x5', ',', '\x17', '\x2', 
		'\x12C', '\x12D', '\b', '\x11', '\x1', '\x2', '\x12D', '\x132', '\x3', 
		'\x2', '\x2', '\x2', '\x12E', '\x12F', '\x5', '.', '\x18', '\x2', '\x12F', 
		'\x130', '\b', '\x11', '\x1', '\x2', '\x130', '\x132', '\x3', '\x2', '\x2', 
		'\x2', '\x131', '\x125', '\x3', '\x2', '\x2', '\x2', '\x131', '\x128', 
		'\x3', '\x2', '\x2', '\x2', '\x131', '\x12B', '\x3', '\x2', '\x2', '\x2', 
		'\x131', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x132', '!', '\x3', '\x2', 
		'\x2', '\x2', '\x133', '\x134', '\a', '\x30', '\x2', '\x2', '\x134', '\x135', 
		'\x5', '\xE', '\b', '\x2', '\x135', '\x140', '\a', 'O', '\x2', '\x2', 
		'\x136', '\x137', '\x5', '\x1E', '\x10', '\x2', '\x137', '\x138', '\b', 
		'\x12', '\x1', '\x2', '\x138', '\x13A', '\x3', '\x2', '\x2', '\x2', '\x139', 
		'\x136', '\x3', '\x2', '\x2', '\x2', '\x139', '\x13A', '\x3', '\x2', '\x2', 
		'\x2', '\x13A', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x13C', 
		'\x5', ' ', '\x11', '\x2', '\x13C', '\x13D', '\b', '\x12', '\x1', '\x2', 
		'\x13D', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x139', '\x3', 
		'\x2', '\x2', '\x2', '\x13F', '\x142', '\x3', '\x2', '\x2', '\x2', '\x140', 
		'\x13E', '\x3', '\x2', '\x2', '\x2', '\x140', '\x141', '\x3', '\x2', '\x2', 
		'\x2', '\x141', '\x143', '\x3', '\x2', '\x2', '\x2', '\x142', '\x140', 
		'\x3', '\x2', '\x2', '\x2', '\x143', '\x144', '\a', 'P', '\x2', '\x2', 
		'\x144', '\x145', '\b', '\x12', '\x1', '\x2', '\x145', '#', '\x3', '\x2', 
		'\x2', '\x2', '\x146', '\x147', '\x5', '\n', '\x6', '\x2', '\x147', '\x148', 
		'\x5', '(', '\x15', '\x2', '\x148', '\x149', '\a', '\x37', '\x2', '\x2', 
		'\x149', '\x14A', '\b', '\x13', '\x1', '\x2', '\x14A', '\x156', '\x3', 
		'\x2', '\x2', '\x2', '\x14B', '\x14C', '\x5', '\n', '\x6', '\x2', '\x14C', 
		'\x14D', '\x5', '(', '\x15', '\x2', '\x14D', '\x14E', '\a', '\x38', '\x2', 
		'\x2', '\x14E', '\x14F', '\x5', '<', '\x1F', '\x2', '\x14F', '\x150', 
		'\a', '\x37', '\x2', '\x2', '\x150', '\x151', '\b', '\x13', '\x1', '\x2', 
		'\x151', '\x156', '\x3', '\x2', '\x2', '\x2', '\x152', '\x153', '\x5', 
		'&', '\x14', '\x2', '\x153', '\x154', '\b', '\x13', '\x1', '\x2', '\x154', 
		'\x156', '\x3', '\x2', '\x2', '\x2', '\x155', '\x146', '\x3', '\x2', '\x2', 
		'\x2', '\x155', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x155', '\x152', 
		'\x3', '\x2', '\x2', '\x2', '\x156', '%', '\x3', '\x2', '\x2', '\x2', 
		'\x157', '\x158', '\a', '\xF', '\x2', '\x2', '\x158', '\x159', '\a', ']', 
		'\x2', '\x2', '\x159', '\x15A', '\a', '\x38', '\x2', '\x2', '\x15A', '\x15B', 
		'\x5', '<', '\x1F', '\x2', '\x15B', '\x15C', '\a', '\x37', '\x2', '\x2', 
		'\x15C', '\x15D', '\b', '\x14', '\x1', '\x2', '\x15D', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\x15E', '\x15F', '\a', ']', '\x2', '\x2', '\x15F', '\x165', 
		'\b', '\x15', '\x1', '\x2', '\x160', '\x161', '\a', '\x35', '\x2', '\x2', 
		'\x161', '\x162', '\a', ']', '\x2', '\x2', '\x162', '\x164', '\b', '\x15', 
		'\x1', '\x2', '\x163', '\x160', '\x3', '\x2', '\x2', '\x2', '\x164', '\x167', 
		'\x3', '\x2', '\x2', '\x2', '\x165', '\x163', '\x3', '\x2', '\x2', '\x2', 
		'\x165', '\x166', '\x3', '\x2', '\x2', '\x2', '\x166', ')', '\x3', '\x2', 
		'\x2', '\x2', '\x167', '\x165', '\x3', '\x2', '\x2', '\x2', '\x168', '\x169', 
		'\x5', '\b', '\x5', '\x2', '\x169', '\x16A', '\a', ']', '\x2', '\x2', 
		'\x16A', '\x16E', '\a', 'M', '\x2', '\x2', '\x16B', '\x16C', '\x5', '\x12', 
		'\n', '\x2', '\x16C', '\x16D', '\b', '\x16', '\x1', '\x2', '\x16D', '\x16F', 
		'\x3', '\x2', '\x2', '\x2', '\x16E', '\x16B', '\x3', '\x2', '\x2', '\x2', 
		'\x16E', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x16F', '\x170', '\x3', 
		'\x2', '\x2', '\x2', '\x170', '\x171', '\a', 'N', '\x2', '\x2', '\x171', 
		'\x172', '\x5', '\x38', '\x1D', '\x2', '\x172', '\x173', '\b', '\x16', 
		'\x1', '\x2', '\x173', '+', '\x3', '\x2', '\x2', '\x2', '\x174', '\x175', 
		'\a', '\t', '\x2', '\x2', '\x175', '\x176', '\a', ']', '\x2', '\x2', '\x176', 
		'\x177', '\x5', '\x14', '\v', '\x2', '\x177', '\x178', '\b', '\x17', '\x1', 
		'\x2', '\x178', '-', '\x3', '\x2', '\x2', '\x2', '\x179', '\x17A', '\a', 
		'\f', '\x2', '\x2', '\x17A', '\x17B', '\a', ']', '\x2', '\x2', '\x17B', 
		'\x180', '\b', '\x18', '\x1', '\x2', '\x17C', '\x17D', '\a', '\x36', '\x2', 
		'\x2', '\x17D', '\x17E', '\x5', '\n', '\x6', '\x2', '\x17E', '\x17F', 
		'\b', '\x18', '\x1', '\x2', '\x17F', '\x181', '\x3', '\x2', '\x2', '\x2', 
		'\x180', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x180', '\x181', '\x3', 
		'\x2', '\x2', '\x2', '\x181', '\x182', '\x3', '\x2', '\x2', '\x2', '\x182', 
		'\x183', '\x5', '\x16', '\f', '\x2', '\x183', '\x184', '\b', '\x18', '\x1', 
		'\x2', '\x184', '/', '\x3', '\x2', '\x2', '\x2', '\x185', '\x186', '\a', 
		'\r', '\x2', '\x2', '\x186', '\x187', '\a', ']', '\x2', '\x2', '\x187', 
		'\x188', '\x5', '\x10', '\t', '\x2', '\x188', '\x189', '\b', '\x19', '\x1', 
		'\x2', '\x189', '\x31', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x18B', 
		'\a', 'O', '\x2', '\x2', '\x18B', '\x195', '\b', '\x1A', '\x1', '\x2', 
		'\x18C', '\x18D', '\x5', '\x32', '\x1A', '\x2', '\x18D', '\x18E', '\b', 
		'\x1A', '\x1', '\x2', '\x18E', '\x194', '\x3', '\x2', '\x2', '\x2', '\x18F', 
		'\x190', '\a', '$', '\x2', '\x2', '\x190', '\x191', '\x5', '\x32', '\x1A', 
		'\x2', '\x191', '\x192', '\b', '\x1A', '\x1', '\x2', '\x192', '\x194', 
		'\x3', '\x2', '\x2', '\x2', '\x193', '\x18C', '\x3', '\x2', '\x2', '\x2', 
		'\x193', '\x18F', '\x3', '\x2', '\x2', '\x2', '\x194', '\x197', '\x3', 
		'\x2', '\x2', '\x2', '\x195', '\x193', '\x3', '\x2', '\x2', '\x2', '\x195', 
		'\x196', '\x3', '\x2', '\x2', '\x2', '\x196', '\x198', '\x3', '\x2', '\x2', 
		'\x2', '\x197', '\x195', '\x3', '\x2', '\x2', '\x2', '\x198', '\x199', 
		'\b', '\x1A', '\x1', '\x2', '\x199', '\x1DC', '\a', 'P', '\x2', '\x2', 
		'\x19A', '\x19B', '\a', '\x17', '\x2', '\x2', '\x19B', '\x19C', '\a', 
		'M', '\x2', '\x2', '\x19C', '\x19D', '\x5', '<', '\x1F', '\x2', '\x19D', 
		'\x19E', '\a', 'N', '\x2', '\x2', '\x19E', '\x19F', '\x5', '\x32', '\x1A', 
		'\x2', '\x19F', '\x1A0', '\b', '\x1A', '\x1', '\x2', '\x1A0', '\x1DC', 
		'\x3', '\x2', '\x2', '\x2', '\x1A1', '\x1A2', '\a', '\x18', '\x2', '\x2', 
		'\x1A2', '\x1A3', '\a', 'M', '\x2', '\x2', '\x1A3', '\x1A4', '\x5', '\x32', 
		'\x1A', '\x2', '\x1A4', '\x1A5', '\x5', '<', '\x1F', '\x2', '\x1A5', '\x1A6', 
		'\a', '\x37', '\x2', '\x2', '\x1A6', '\x1A7', '\x5', '\x32', '\x1A', '\x2', 
		'\x1A7', '\x1A8', '\a', 'N', '\x2', '\x2', '\x1A8', '\x1A9', '\x5', '\x32', 
		'\x1A', '\x2', '\x1A9', '\x1AA', '\b', '\x1A', '\x1', '\x2', '\x1AA', 
		'\x1DC', '\x3', '\x2', '\x2', '\x2', '\x1AB', '\x1AC', '\a', '\x18', '\x2', 
		'\x2', '\x1AC', '\x1AD', '\a', 'M', '\x2', '\x2', '\x1AD', '\x1AE', '\x5', 
		'>', ' ', '\x2', '\x1AE', '\x1AF', '\a', '\x19', '\x2', '\x2', '\x1AF', 
		'\x1B0', '\x5', '<', '\x1F', '\x2', '\x1B0', '\x1B1', '\a', 'N', '\x2', 
		'\x2', '\x1B1', '\x1B2', '\x5', '\x32', '\x1A', '\x2', '\x1B2', '\x1B3', 
		'\b', '\x1A', '\x1', '\x2', '\x1B3', '\x1DC', '\x3', '\x2', '\x2', '\x2', 
		'\x1B4', '\x1B5', '\a', '\x1D', '\x2', '\x2', '\x1B5', '\x1B6', '\a', 
		'\x37', '\x2', '\x2', '\x1B6', '\x1DC', '\b', '\x1A', '\x1', '\x2', '\x1B7', 
		'\x1B8', '\a', '\x1C', '\x2', '\x2', '\x1B8', '\x1B9', '\a', '\x37', '\x2', 
		'\x2', '\x1B9', '\x1DC', '\b', '\x1A', '\x1', '\x2', '\x1BA', '\x1BB', 
		'\a', '\x15', '\x2', '\x2', '\x1BB', '\x1BC', '\a', 'M', '\x2', '\x2', 
		'\x1BC', '\x1BD', '\x5', '<', '\x1F', '\x2', '\x1BD', '\x1BE', '\a', 'N', 
		'\x2', '\x2', '\x1BE', '\x1BF', '\x5', '\x32', '\x1A', '\x2', '\x1BF', 
		'\x1C4', '\b', '\x1A', '\x1', '\x2', '\x1C0', '\x1C1', '\a', '\x16', '\x2', 
		'\x2', '\x1C1', '\x1C2', '\x5', '\x32', '\x1A', '\x2', '\x1C2', '\x1C3', 
		'\b', '\x1A', '\x1', '\x2', '\x1C3', '\x1C5', '\x3', '\x2', '\x2', '\x2', 
		'\x1C4', '\x1C0', '\x3', '\x2', '\x2', '\x2', '\x1C4', '\x1C5', '\x3', 
		'\x2', '\x2', '\x2', '\x1C5', '\x1DC', '\x3', '\x2', '\x2', '\x2', '\x1C6', 
		'\x1C7', '\x5', '<', '\x1F', '\x2', '\x1C7', '\x1C8', '\a', '\x38', '\x2', 
		'\x2', '\x1C8', '\x1C9', '\x5', '<', '\x1F', '\x2', '\x1C9', '\x1CA', 
		'\a', '\x37', '\x2', '\x2', '\x1CA', '\x1CB', '\b', '\x1A', '\x1', '\x2', 
		'\x1CB', '\x1DC', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\x1CD', '\a', 
		' ', '\x2', '\x2', '\x1CD', '\x1CE', '\x5', '<', '\x1F', '\x2', '\x1CE', 
		'\x1CF', '\a', '\x37', '\x2', '\x2', '\x1CF', '\x1D0', '\b', '\x1A', '\x1', 
		'\x2', '\x1D0', '\x1DC', '\x3', '\x2', '\x2', '\x2', '\x1D1', '\x1D2', 
		'\a', ' ', '\x2', '\x2', '\x1D2', '\x1D3', '\a', '\x37', '\x2', '\x2', 
		'\x1D3', '\x1DC', '\b', '\x1A', '\x1', '\x2', '\x1D4', '\x1D5', '\x5', 
		'\x34', '\x1B', '\x2', '\x1D5', '\x1D6', '\b', '\x1A', '\x1', '\x2', '\x1D6', 
		'\x1DC', '\x3', '\x2', '\x2', '\x2', '\x1D7', '\x1D8', '\x5', '<', '\x1F', 
		'\x2', '\x1D8', '\x1D9', '\a', '\x37', '\x2', '\x2', '\x1D9', '\x1DA', 
		'\b', '\x1A', '\x1', '\x2', '\x1DA', '\x1DC', '\x3', '\x2', '\x2', '\x2', 
		'\x1DB', '\x18A', '\x3', '\x2', '\x2', '\x2', '\x1DB', '\x19A', '\x3', 
		'\x2', '\x2', '\x2', '\x1DB', '\x1A1', '\x3', '\x2', '\x2', '\x2', '\x1DB', 
		'\x1AB', '\x3', '\x2', '\x2', '\x2', '\x1DB', '\x1B4', '\x3', '\x2', '\x2', 
		'\x2', '\x1DB', '\x1B7', '\x3', '\x2', '\x2', '\x2', '\x1DB', '\x1BA', 
		'\x3', '\x2', '\x2', '\x2', '\x1DB', '\x1C6', '\x3', '\x2', '\x2', '\x2', 
		'\x1DB', '\x1CC', '\x3', '\x2', '\x2', '\x2', '\x1DB', '\x1D1', '\x3', 
		'\x2', '\x2', '\x2', '\x1DB', '\x1D4', '\x3', '\x2', '\x2', '\x2', '\x1DB', 
		'\x1D7', '\x3', '\x2', '\x2', '\x2', '\x1DC', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x1DD', '\x1DE', '\a', '!', '\x2', '\x2', '\x1DE', '\x1DF', '\a', 
		'M', '\x2', '\x2', '\x1DF', '\x1E0', '\x5', '<', '\x1F', '\x2', '\x1E0', 
		'\x1E1', '\a', 'N', '\x2', '\x2', '\x1E1', '\x1E2', '\a', '\x37', '\x2', 
		'\x2', '\x1E2', '\x1E3', '\b', '\x1B', '\x1', '\x2', '\x1E3', '\x1EC', 
		'\x3', '\x2', '\x2', '\x2', '\x1E4', '\x1E5', '\a', '\"', '\x2', '\x2', 
		'\x1E5', '\x1E6', '\a', 'M', '\x2', '\x2', '\x1E6', '\x1E7', '\x5', '<', 
		'\x1F', '\x2', '\x1E7', '\x1E8', '\a', 'N', '\x2', '\x2', '\x1E8', '\x1E9', 
		'\a', '\x37', '\x2', '\x2', '\x1E9', '\x1EA', '\b', '\x1B', '\x1', '\x2', 
		'\x1EA', '\x1EC', '\x3', '\x2', '\x2', '\x2', '\x1EB', '\x1DD', '\x3', 
		'\x2', '\x2', '\x2', '\x1EB', '\x1E4', '\x3', '\x2', '\x2', '\x2', '\x1EC', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x1ED', '\x1EE', '\x5', '>', ' ', 
		'\x2', '\x1EE', '\x1FA', '\a', 'M', '\x2', '\x2', '\x1EF', '\x1F0', '\x5', 
		'<', '\x1F', '\x2', '\x1F0', '\x1F7', '\b', '\x1C', '\x1', '\x2', '\x1F1', 
		'\x1F2', '\a', '\x35', '\x2', '\x2', '\x1F2', '\x1F3', '\x5', '<', '\x1F', 
		'\x2', '\x1F3', '\x1F4', '\b', '\x1C', '\x1', '\x2', '\x1F4', '\x1F6', 
		'\x3', '\x2', '\x2', '\x2', '\x1F5', '\x1F1', '\x3', '\x2', '\x2', '\x2', 
		'\x1F6', '\x1F9', '\x3', '\x2', '\x2', '\x2', '\x1F7', '\x1F5', '\x3', 
		'\x2', '\x2', '\x2', '\x1F7', '\x1F8', '\x3', '\x2', '\x2', '\x2', '\x1F8', 
		'\x1FB', '\x3', '\x2', '\x2', '\x2', '\x1F9', '\x1F7', '\x3', '\x2', '\x2', 
		'\x2', '\x1FA', '\x1EF', '\x3', '\x2', '\x2', '\x2', '\x1FA', '\x1FB', 
		'\x3', '\x2', '\x2', '\x2', '\x1FB', '\x1FC', '\x3', '\x2', '\x2', '\x2', 
		'\x1FC', '\x1FD', '\a', 'N', '\x2', '\x2', '\x1FD', '\x1FE', '\b', '\x1C', 
		'\x1', '\x2', '\x1FE', '\x37', '\x3', '\x2', '\x2', '\x2', '\x1FF', '\x200', 
		'\a', 'O', '\x2', '\x2', '\x200', '\x20A', '\b', '\x1D', '\x1', '\x2', 
		'\x201', '\x202', '\x5', ':', '\x1E', '\x2', '\x202', '\x203', '\b', '\x1D', 
		'\x1', '\x2', '\x203', '\x209', '\x3', '\x2', '\x2', '\x2', '\x204', '\x205', 
		'\a', '$', '\x2', '\x2', '\x205', '\x206', '\x5', ':', '\x1E', '\x2', 
		'\x206', '\x207', '\b', '\x1D', '\x1', '\x2', '\x207', '\x209', '\x3', 
		'\x2', '\x2', '\x2', '\x208', '\x201', '\x3', '\x2', '\x2', '\x2', '\x208', 
		'\x204', '\x3', '\x2', '\x2', '\x2', '\x209', '\x20C', '\x3', '\x2', '\x2', 
		'\x2', '\x20A', '\x208', '\x3', '\x2', '\x2', '\x2', '\x20A', '\x20B', 
		'\x3', '\x2', '\x2', '\x2', '\x20B', '\x20D', '\x3', '\x2', '\x2', '\x2', 
		'\x20C', '\x20A', '\x3', '\x2', '\x2', '\x2', '\x20D', '\x20E', '\b', 
		'\x1D', '\x1', '\x2', '\x20E', '\x20F', '\a', 'P', '\x2', '\x2', '\x20F', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x210', '\x211', '\x5', '$', '\x13', 
		'\x2', '\x211', '\x212', '\b', '\x1E', '\x1', '\x2', '\x212', '\x217', 
		'\x3', '\x2', '\x2', '\x2', '\x213', '\x214', '\x5', '\x32', '\x1A', '\x2', 
		'\x214', '\x215', '\b', '\x1E', '\x1', '\x2', '\x215', '\x217', '\x3', 
		'\x2', '\x2', '\x2', '\x216', '\x210', '\x3', '\x2', '\x2', '\x2', '\x216', 
		'\x213', '\x3', '\x2', '\x2', '\x2', '\x217', ';', '\x3', '\x2', '\x2', 
		'\x2', '\x218', '\x219', '\b', '\x1F', '\x1', '\x2', '\x219', '\x21A', 
		'\x5', '>', ' ', '\x2', '\x21A', '\x21B', '\b', '\x1F', '\x1', '\x2', 
		'\x21B', '\x247', '\x3', '\x2', '\x2', '\x2', '\x21C', '\x21D', '\x5', 
		'@', '!', '\x2', '\x21D', '\x21E', '\b', '\x1F', '\x1', '\x2', '\x21E', 
		'\x247', '\x3', '\x2', '\x2', '\x2', '\x21F', '\x220', '\x5', '\x36', 
		'\x1C', '\x2', '\x220', '\x221', '\b', '\x1F', '\x1', '\x2', '\x221', 
		'\x247', '\x3', '\x2', '\x2', '\x2', '\x222', '\x223', '\a', 'M', '\x2', 
		'\x2', '\x223', '\x224', '\x5', '<', '\x1F', '\x2', '\x224', '\x225', 
		'\a', 'N', '\x2', '\x2', '\x225', '\x226', '\b', '\x1F', '\x1', '\x2', 
		'\x226', '\x247', '\x3', '\x2', '\x2', '\x2', '\x227', '\x228', '\a', 
		'\x1E', '\x2', '\x2', '\x228', '\x229', '\a', ']', '\x2', '\x2', '\x229', 
		'\x247', '\b', '\x1F', '\x1', '\x2', '\x22A', '\x22B', '\a', '\x33', '\x2', 
		'\x2', '\x22B', '\x22C', '\a', 'M', '\x2', '\x2', '\x22C', '\x22D', '\x5', 
		'\n', '\x6', '\x2', '\x22D', '\x22E', '\a', 'N', '\x2', '\x2', '\x22E', 
		'\x22F', '\b', '\x1F', '\x1', '\x2', '\x22F', '\x247', '\x3', '\x2', '\x2', 
		'\x2', '\x230', '\x231', '\a', '?', '\x2', '\x2', '\x231', '\x232', '\x5', 
		'<', '\x1F', '\xE', '\x232', '\x233', '\b', '\x1F', '\x1', '\x2', '\x233', 
		'\x247', '\x3', '\x2', '\x2', '\x2', '\x234', '\x235', '\a', 'H', '\x2', 
		'\x2', '\x235', '\x236', '\x5', '<', '\x1F', '\r', '\x236', '\x237', '\b', 
		'\x1F', '\x1', '\x2', '\x237', '\x247', '\x3', '\x2', '\x2', '\x2', '\x238', 
		'\x239', '\a', '\x41', '\x2', '\x2', '\x239', '\x23A', '\x5', '<', '\x1F', 
		'\n', '\x23A', '\x23B', '\b', '\x1F', '\x1', '\x2', '\x23B', '\x247', 
		'\x3', '\x2', '\x2', '\x2', '\x23C', '\x23D', '\a', '\x42', '\x2', '\x2', 
		'\x23D', '\x23E', '\x5', '<', '\x1F', '\t', '\x23E', '\x23F', '\b', '\x1F', 
		'\x1', '\x2', '\x23F', '\x247', '\x3', '\x2', '\x2', '\x2', '\x240', '\x241', 
		'\a', 'M', '\x2', '\x2', '\x241', '\x242', '\x5', '\x1A', '\xE', '\x2', 
		'\x242', '\x243', '\a', 'N', '\x2', '\x2', '\x243', '\x244', '\x5', '<', 
		'\x1F', '\x6', '\x244', '\x245', '\b', '\x1F', '\x1', '\x2', '\x245', 
		'\x247', '\x3', '\x2', '\x2', '\x2', '\x246', '\x218', '\x3', '\x2', '\x2', 
		'\x2', '\x246', '\x21C', '\x3', '\x2', '\x2', '\x2', '\x246', '\x21F', 
		'\x3', '\x2', '\x2', '\x2', '\x246', '\x222', '\x3', '\x2', '\x2', '\x2', 
		'\x246', '\x227', '\x3', '\x2', '\x2', '\x2', '\x246', '\x22A', '\x3', 
		'\x2', '\x2', '\x2', '\x246', '\x230', '\x3', '\x2', '\x2', '\x2', '\x246', 
		'\x234', '\x3', '\x2', '\x2', '\x2', '\x246', '\x238', '\x3', '\x2', '\x2', 
		'\x2', '\x246', '\x23C', '\x3', '\x2', '\x2', '\x2', '\x246', '\x240', 
		'\x3', '\x2', '\x2', '\x2', '\x247', '\x275', '\x3', '\x2', '\x2', '\x2', 
		'\x248', '\x249', '\f', '\b', '\x2', '\x2', '\x249', '\x24A', '\t', '\x2', 
		'\x2', '\x2', '\x24A', '\x24B', '\x5', '<', '\x1F', '\t', '\x24B', '\x24C', 
		'\b', '\x1F', '\x1', '\x2', '\x24C', '\x274', '\x3', '\x2', '\x2', '\x2', 
		'\x24D', '\x24E', '\f', '\a', '\x2', '\x2', '\x24E', '\x24F', '\t', '\x3', 
		'\x2', '\x2', '\x24F', '\x250', '\x5', '<', '\x1F', '\b', '\x250', '\x251', 
		'\b', '\x1F', '\x1', '\x2', '\x251', '\x274', '\x3', '\x2', '\x2', '\x2', 
		'\x252', '\x253', '\f', '\x5', '\x2', '\x2', '\x253', '\x254', '\t', '\x4', 
		'\x2', '\x2', '\x254', '\x255', '\x5', '<', '\x1F', '\x6', '\x255', '\x256', 
		'\b', '\x1F', '\x1', '\x2', '\x256', '\x274', '\x3', '\x2', '\x2', '\x2', 
		'\x257', '\x258', '\f', '\x4', '\x2', '\x2', '\x258', '\x259', '\t', '\x5', 
		'\x2', '\x2', '\x259', '\x25A', '\x5', '<', '\x1F', '\x5', '\x25A', '\x25B', 
		'\b', '\x1F', '\x1', '\x2', '\x25B', '\x274', '\x3', '\x2', '\x2', '\x2', 
		'\x25C', '\x25D', '\f', '\x3', '\x2', '\x2', '\x25D', '\x25E', '\a', '=', 
		'\x2', '\x2', '\x25E', '\x25F', '\x5', '<', '\x1F', '\x2', '\x25F', '\x260', 
		'\a', '\x36', '\x2', '\x2', '\x260', '\x261', '\x5', '<', '\x1F', '\x4', 
		'\x261', '\x262', '\b', '\x1F', '\x1', '\x2', '\x262', '\x274', '\x3', 
		'\x2', '\x2', '\x2', '\x263', '\x264', '\f', '\x12', '\x2', '\x2', '\x264', 
		'\x265', '\a', 'K', '\x2', '\x2', '\x265', '\x266', '\x5', '<', '\x1F', 
		'\x2', '\x266', '\x267', '\a', 'L', '\x2', '\x2', '\x267', '\x268', '\b', 
		'\x1F', '\x1', '\x2', '\x268', '\x274', '\x3', '\x2', '\x2', '\x2', '\x269', 
		'\x26A', '\f', '\x11', '\x2', '\x2', '\x26A', '\x26B', '\a', '\x34', '\x2', 
		'\x2', '\x26B', '\x26C', '\a', ']', '\x2', '\x2', '\x26C', '\x274', '\b', 
		'\x1F', '\x1', '\x2', '\x26D', '\x26E', '\f', '\f', '\x2', '\x2', '\x26E', 
		'\x26F', '\a', '\x41', '\x2', '\x2', '\x26F', '\x274', '\b', '\x1F', '\x1', 
		'\x2', '\x270', '\x271', '\f', '\v', '\x2', '\x2', '\x271', '\x272', '\a', 
		'\x42', '\x2', '\x2', '\x272', '\x274', '\b', '\x1F', '\x1', '\x2', '\x273', 
		'\x248', '\x3', '\x2', '\x2', '\x2', '\x273', '\x24D', '\x3', '\x2', '\x2', 
		'\x2', '\x273', '\x252', '\x3', '\x2', '\x2', '\x2', '\x273', '\x257', 
		'\x3', '\x2', '\x2', '\x2', '\x273', '\x25C', '\x3', '\x2', '\x2', '\x2', 
		'\x273', '\x263', '\x3', '\x2', '\x2', '\x2', '\x273', '\x269', '\x3', 
		'\x2', '\x2', '\x2', '\x273', '\x26D', '\x3', '\x2', '\x2', '\x2', '\x273', 
		'\x270', '\x3', '\x2', '\x2', '\x2', '\x274', '\x277', '\x3', '\x2', '\x2', 
		'\x2', '\x275', '\x273', '\x3', '\x2', '\x2', '\x2', '\x275', '\x276', 
		'\x3', '\x2', '\x2', '\x2', '\x276', '=', '\x3', '\x2', '\x2', '\x2', 
		'\x277', '\x275', '\x3', '\x2', '\x2', '\x2', '\x278', '\x279', '\a', 
		']', '\x2', '\x2', '\x279', '\x27A', '\b', ' ', '\x1', '\x2', '\x27A', 
		'?', '\x3', '\x2', '\x2', '\x2', '\x27B', '\x27C', '\a', '^', '\x2', '\x2', 
		'\x27C', '\x286', '\b', '!', '\x1', '\x2', '\x27D', '\x27E', '\a', '_', 
		'\x2', '\x2', '\x27E', '\x286', '\b', '!', '\x1', '\x2', '\x27F', '\x280', 
		'\a', '`', '\x2', '\x2', '\x280', '\x286', '\b', '!', '\x1', '\x2', '\x281', 
		'\x282', '\a', '\x61', '\x2', '\x2', '\x282', '\x286', '\b', '!', '\x1', 
		'\x2', '\x283', '\x284', '\a', '\x62', '\x2', '\x2', '\x284', '\x286', 
		'\b', '!', '\x1', '\x2', '\x285', '\x27B', '\x3', '\x2', '\x2', '\x2', 
		'\x285', '\x27D', '\x3', '\x2', '\x2', '\x2', '\x285', '\x27F', '\x3', 
		'\x2', '\x2', '\x2', '\x285', '\x281', '\x3', '\x2', '\x2', '\x2', '\x285', 
		'\x283', '\x3', '\x2', '\x2', '\x2', '\x286', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '.', 'G', 'O', 'X', 'Z', 'l', 'w', '\x86', '\x93', '\x98', '\xA2', 
		'\xAE', '\xB5', '\xC0', '\xC2', '\xD0', '\xDC', '\xE3', '\xEA', '\xF9', 
		'\xFC', '\x108', '\x118', '\x123', '\x131', '\x139', '\x140', '\x155', 
		'\x165', '\x16E', '\x180', '\x193', '\x195', '\x1C4', '\x1DB', '\x1EB', 
		'\x1F7', '\x1FA', '\x208', '\x20A', '\x216', '\x246', '\x273', '\x275', 
		'\x285',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}

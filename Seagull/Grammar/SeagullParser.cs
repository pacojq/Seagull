//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar/SeagullParser.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using System;
using System.Collections.Generic;
using System.IO;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using Seagull.AST;
using Seagull.AST.Expressions;
using Seagull.AST.Expressions.Binary;
using Seagull.AST.Expressions.Literals;
using Seagull.AST.Statements;
using Seagull.AST.Statements.Definitions;
using Seagull.AST.Statements.Definitions.Namespaces;
using Seagull.AST.Types;
using Seagull.AST.Types.Namespaces;
using Seagull.Semantics.Symbols;
using DFA = Antlr4.Runtime.Dfa.DFA;

namespace Seagull.Grammar
{
	[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
	[System.CLSCompliant(false)]
	public partial class SeagullParser : Parser {
		protected static DFA[] decisionToDFA;
		protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
		public const int
			SHARP=1, VOID=2, INT=3, CHAR=4, DOUBLE=5, STRING=6, STRUCT=7, LONG=8, 
			BYTE=9, ENUM=10, DELEGATE=11, NULL=12, PTR=13, TRUE=14, FALSE=15, IF=16, 
			ELSE=17, WHILE=18, FOR=19, IN=20, SWITCH=21, CASE=22, BREAK=23, CONTINUE=24, 
			NEW=25, DELETE=26, RETURN=27, PRINT=28, READ=29, ASSERT=30, DELAY=31, 
			PUBLIC=32, PRIVATE=33, LOAD=34, IMPORT=35, NAMESPACE=36, OWNED=37, IS=38, 
			DEFAULT=39, DOT=40, COMMA=41, COL=42, SEMI_COL=43, ASSIGN=44, STAR=45, 
			SLASH=46, PERCENT=47, ARROW=48, QUESTION=49, PLUS=50, MINUS=51, PLUS_PLUS=52, 
			MINUS_MINUS=53, ASSIGN_MUL=54, ASSIGN_DIV=55, ASSIGN_MOD=56, ASSIGN_SUM=57, 
			ASSIGN_SUB=58, NOT=59, AND=60, OR=61, L_BRACKET=62, R_BRACKET=63, L_PAR=64, 
			R_PAR=65, L_CURL=66, R_CURL=67, BIT_AND=68, BIT_OR=69, BIT_XOR=70, BIT_NOT=71, 
			BIT_RIGHT=72, BIT_LEFT=73, EQUAL=74, NOT_EQUAL=75, LESS_THAN=76, GREATER_THAN=77, 
			LESS_EQ_THAN=78, GREATER_EQ_THAN=79, ID=80, INT_CONSTANT=81, REAL_CONSTANT=82, 
			CHAR_CONSTANT=83, STRING_CONSTANT=84, BOOLEAN_CONSTANT=85, SL_COMMENT=86, 
			ML_COMMENT=87, BLANKS=88, DIR_DEFINE=89, DIR_IF=90, DIR_ELIF=91, DIR_ELSE=92, 
			DIR_WHITESPACE=93, DIR_ML_COMMENT=94, DIR_NEWLINE=95;
		public const int
			RULE_program = 0, RULE_load = 1, RULE_imp = 2, RULE_type = 3, RULE_functionType = 4, 
			RULE_parameters = 5, RULE_structType = 6, RULE_enumType = 7, RULE_enumElement = 8, 
			RULE_primitive = 9, RULE_voidType = 10, RULE_protectionLevel = 11, RULE_definition = 12, 
			RULE_namespaceDef = 13, RULE_variableDef = 14, RULE_fuctionDef = 15, RULE_structDef = 16, 
			RULE_enumDef = 17, RULE_delegate = 18, RULE_funcInvocation = 19, RULE_fnBlock = 20, 
			RULE_fnBlockContent = 21, RULE_statement = 22, RULE_readPrint = 23, RULE_expression = 24, 
			RULE_variable = 25, RULE_literal = 26;
		public static readonly string[] ruleNames = {
			"program", "load", "imp", "type", "functionType", "parameters", "structType", 
			"enumType", "enumElement", "primitive", "voidType", "protectionLevel", 
			"definition", "namespaceDef", "variableDef", "fuctionDef", "structDef", 
			"enumDef", "delegate", "funcInvocation", "fnBlock", "fnBlockContent", 
			"statement", "readPrint", "expression", "variable", "literal"
		};

		private static readonly string[] _LiteralNames = {
			null, "'#'", "'void'", "'int'", "'char'", "'double'", "'string'", "'struct'", 
			"'long'", "'byte'", "'enum'", "'delegate'", "'null'", "'ptr'", "'true'", 
			"'false'", null, null, "'while'", "'for'", "'in'", "'switch'", "'case'", 
			"'break'", "'continue'", "'new'", "'delete'", "'return'", "'print'", "'read'", 
			"'assert'", "'delay'", "'public'", "'private'", "'load'", "'import'", 
			"'namespace'", "'owned'", "'is'", "'default'", "'.'", "','", "':'", "';'", 
			"'='", "'*'", "'/'", "'%'", "'->'", "'?'", "'+'", "'-'", "'++'", "'--'", 
			"'*='", "'/='", "'%='", "'+='", "'-='", "'!'", "'&&'", "'||'", "'['", 
			"']'", "'('", "')'", "'{'", "'}'", "'&'", "'|'", "'^'", "'~'", "'>>'", 
			"'<<'", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", null, null, null, 
			null, null, null, null, null, null, "'define'", null, "'elif'"
		};
		private static readonly string[] _SymbolicNames = {
			null, "SHARP", "VOID", "INT", "CHAR", "DOUBLE", "STRING", "STRUCT", "LONG", 
			"BYTE", "ENUM", "DELEGATE", "NULL", "PTR", "TRUE", "FALSE", "IF", "ELSE", 
			"WHILE", "FOR", "IN", "SWITCH", "CASE", "BREAK", "CONTINUE", "NEW", "DELETE", 
			"RETURN", "PRINT", "READ", "ASSERT", "DELAY", "PUBLIC", "PRIVATE", "LOAD", 
			"IMPORT", "NAMESPACE", "OWNED", "IS", "DEFAULT", "DOT", "COMMA", "COL", 
			"SEMI_COL", "ASSIGN", "STAR", "SLASH", "PERCENT", "ARROW", "QUESTION", 
			"PLUS", "MINUS", "PLUS_PLUS", "MINUS_MINUS", "ASSIGN_MUL", "ASSIGN_DIV", 
			"ASSIGN_MOD", "ASSIGN_SUM", "ASSIGN_SUB", "NOT", "AND", "OR", "L_BRACKET", 
			"R_BRACKET", "L_PAR", "R_PAR", "L_CURL", "R_CURL", "BIT_AND", "BIT_OR", 
			"BIT_XOR", "BIT_NOT", "BIT_RIGHT", "BIT_LEFT", "EQUAL", "NOT_EQUAL", "LESS_THAN", 
			"GREATER_THAN", "LESS_EQ_THAN", "GREATER_EQ_THAN", "ID", "INT_CONSTANT", 
			"REAL_CONSTANT", "CHAR_CONSTANT", "STRING_CONSTANT", "BOOLEAN_CONSTANT", 
			"SL_COMMENT", "ML_COMMENT", "BLANKS", "DIR_DEFINE", "DIR_IF", "DIR_ELIF", 
			"DIR_ELSE", "DIR_WHITESPACE", "DIR_ML_COMMENT", "DIR_NEWLINE"
		};
		public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

		[NotNull]
		public override IVocabulary Vocabulary
		{
			get
			{
				return DefaultVocabulary;
			}
		}

		public override string GrammarFileName { get { return "SeagullParser.g4"; } }

		public override string[] RuleNames { get { return ruleNames; } }

		public override string SerializedAtn { get { return new string(_serializedATN); } }

		static SeagullParser() {
			decisionToDFA = new DFA[_ATN.NumberOfDecisions];
			for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
				decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
			}
		}

		public SeagullParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SeagullParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
			: base(input, output, errorOutput)
		{
			Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
		}

		public partial class ProgramContext : ParserRuleContext {
			public Program Ast;
			public List<string> Loads = new List<string>();
			public List<string> Imports = new List<string>();
			public List<IDefinition> Def = new List<IDefinition>();
			public LoadContext l;
			public ImpContext i;
			public DefinitionContext d;
			public ITerminalNode Eof() { return GetToken(SeagullParser.Eof, 0); }
			public LoadContext[] load() {
				return GetRuleContexts<LoadContext>();
			}
			public LoadContext load(int i) {
				return GetRuleContext<LoadContext>(i);
			}
			public ImpContext[] imp() {
				return GetRuleContexts<ImpContext>();
			}
			public ImpContext imp(int i) {
				return GetRuleContext<ImpContext>(i);
			}
			public DefinitionContext[] definition() {
				return GetRuleContexts<DefinitionContext>();
			}
			public DefinitionContext definition(int i) {
				return GetRuleContext<DefinitionContext>(i);
			}
			public ProtectionLevelContext[] protectionLevel() {
				return GetRuleContexts<ProtectionLevelContext>();
			}
			public ProtectionLevelContext protectionLevel(int i) {
				return GetRuleContext<ProtectionLevelContext>(i);
			}
			public ProgramContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_program; } }
		}

		[RuleVersion(0)]
		public ProgramContext program() {
			ProgramContext _localctx = new ProgramContext(Context, State);
			EnterRule(_localctx, 0, RULE_program);
			int _la;
			try {
				EnterOuterAlt(_localctx, 1);
				{
					State = 59;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==LOAD) {
						{
							{
								State = 54; _localctx.l = load();
								_localctx.Loads.Add(_localctx.l.File); 
							}
						}
						State = 61;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 67;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==IMPORT) {
						{
							{
								State = 62; _localctx.i = imp();
								_localctx.Imports.Add(_localctx.i.Namespace); 
							}
						}
						State = 69;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 78;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRUCT) | (1L << ENUM) | (1L << PUBLIC) | (1L << PRIVATE) | (1L << NAMESPACE))) != 0) || _la==ID) {
						{
							{
								State = 71;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==PUBLIC || _la==PRIVATE) {
									{
										State = 70; protectionLevel();
									}
								}

								State = 73; _localctx.d = definition();
								_localctx.Def.Add(_localctx.d.Ast); 
							}
						}
						State = 80;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 81; Match(Eof);
					_localctx.Ast =  new Program(0, 0, _localctx.Loads, _localctx.Imports, _localctx.Def); 
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class LoadContext : ParserRuleContext {
			public string File;
			public IToken p;
			public ITerminalNode LOAD() { return GetToken(SeagullParser.LOAD, 0); }
			public ITerminalNode STRING_CONSTANT() { return GetToken(SeagullParser.STRING_CONSTANT, 0); }
			public LoadContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_load; } }
		}

		[RuleVersion(0)]
		public LoadContext load() {
			LoadContext _localctx = new LoadContext(Context, State);
			EnterRule(_localctx, 2, RULE_load);
			try {
				EnterOuterAlt(_localctx, 1);
				{
					State = 84; Match(LOAD);
					State = 85; _localctx.p = Match(STRING_CONSTANT);
					_localctx.File =  (_localctx.p!=null?_localctx.p.Text:null); 
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class ImpContext : ParserRuleContext {
			public string Namespace;
			public IToken ns1;
			public IToken ns2;
			public ITerminalNode IMPORT() { return GetToken(SeagullParser.IMPORT, 0); }
			public ITerminalNode SEMI_COL() { return GetToken(SeagullParser.SEMI_COL, 0); }
			public ITerminalNode[] ID() { return GetTokens(SeagullParser.ID); }
			public ITerminalNode ID(int i) {
				return GetToken(SeagullParser.ID, i);
			}
			public ITerminalNode[] DOT() { return GetTokens(SeagullParser.DOT); }
			public ITerminalNode DOT(int i) {
				return GetToken(SeagullParser.DOT, i);
			}
			public ImpContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_imp; } }
		}

		[RuleVersion(0)]
		public ImpContext imp() {
			ImpContext _localctx = new ImpContext(Context, State);
			EnterRule(_localctx, 4, RULE_imp);
			int _la;
			try {
				EnterOuterAlt(_localctx, 1);
				{
					State = 88; Match(IMPORT);
					State = 89; _localctx.ns1 = Match(ID);
					_localctx.Namespace =  _localctx.ns1.GetText(); 
					State = 96;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==DOT) {
						{
							{
								State = 91; Match(DOT);
								State = 92; _localctx.ns2 = Match(ID);
								_localctx.Namespace += "." + _localctx.ns2.GetText(); 
							}
						}
						State = 98;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 99; Match(SEMI_COL);
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class TypeContext : ParserRuleContext {
			public IType Ast;
			public TypeContext t;
			public PrimitiveContext _primitive;
			public FunctionTypeContext _functionType;
			public StructTypeContext _structType;
			public IToken userDefined;
			public IToken i;
			public IToken i2;
			public PrimitiveContext primitive() {
				return GetRuleContext<PrimitiveContext>(0);
			}
			public FunctionTypeContext functionType() {
				return GetRuleContext<FunctionTypeContext>(0);
			}
			public StructTypeContext structType() {
				return GetRuleContext<StructTypeContext>(0);
			}
			public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
			public ITerminalNode[] L_BRACKET() { return GetTokens(SeagullParser.L_BRACKET); }
			public ITerminalNode L_BRACKET(int i) {
				return GetToken(SeagullParser.L_BRACKET, i);
			}
			public ITerminalNode[] R_BRACKET() { return GetTokens(SeagullParser.R_BRACKET); }
			public ITerminalNode R_BRACKET(int i) {
				return GetToken(SeagullParser.R_BRACKET, i);
			}
			public TypeContext type() {
				return GetRuleContext<TypeContext>(0);
			}
			public ITerminalNode[] INT_CONSTANT() { return GetTokens(SeagullParser.INT_CONSTANT); }
			public ITerminalNode INT_CONSTANT(int i) {
				return GetToken(SeagullParser.INT_CONSTANT, i);
			}
			public TypeContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_type; } }
		}

		[RuleVersion(0)]
		public TypeContext type() {
			return type(0);
		}

		private TypeContext type(int _p) {
			ParserRuleContext _parentctx = Context;
			int _parentState = State;
			TypeContext _localctx = new TypeContext(Context, _parentState);
			TypeContext _prevctx = _localctx;
			int _startState = 6;
			EnterRecursionRule(_localctx, 6, RULE_type, _p);
			try {
				int _alt;
				EnterOuterAlt(_localctx, 1);
				{
					State = 113;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
						case INT:
						case CHAR:
						case DOUBLE:
						case STRING:
						case LONG:
						case BYTE:
						case PTR:
						{
							State = 102; _localctx._primitive = primitive();
							_localctx.Ast =  _localctx._primitive.Ast; 
						}
							break;
						case L_PAR:
						{
							State = 105; _localctx._functionType = functionType();
							_localctx.Ast =  _localctx._functionType.Ast; 
						}
							break;
						case L_CURL:
						{
							State = 108; _localctx._structType = structType();
							_localctx.Ast =  _localctx._structType.Ast; 
						}
							break;
						case ID:
						{
							State = 111; _localctx.userDefined = Match(ID);
							_localctx.Ast =  new UnknownType(_localctx.userDefined.GetLine(), _localctx.userDefined.GetCol(), _localctx.userDefined.GetText()); 
						}
							break;
						default:
							throw new NoViableAltException(this);
					}
					Context.Stop = TokenStream.LT(-1);
					State = 131;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							if ( ParseListeners!=null )
								TriggerExitRuleEvent();
							_prevctx = _localctx;
							{
								{
									_localctx = new TypeContext(_parentctx, _parentState);
									_localctx.t = _prevctx;
									PushNewRecursionContext(_localctx, _startState, RULE_type);
									State = 115;
									if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
									State = 116; Match(L_BRACKET);
									State = 117; _localctx.i = Match(INT_CONSTANT);
									State = 118; Match(R_BRACKET);
									_localctx.Ast =  ArrayType.BuildArray(int.Parse((_localctx.i!=null?_localctx.i.Text:null)), _localctx.t.Ast); 
									State = 126;
									ErrorHandler.Sync(this);
									_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
									while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
										if ( _alt==1 ) {
											{
												{
													State = 120; Match(L_BRACKET);
													State = 121; _localctx.i2 = Match(INT_CONSTANT);
													State = 122; Match(R_BRACKET);
													_localctx.Ast =  ArrayType.BuildArray( int.Parse((_localctx.i2!=null?_localctx.i2.Text:null)), _localctx.Ast); 
												}
											} 
										}
										State = 128;
										ErrorHandler.Sync(this);
										_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
									}
								}
							} 
						}
						State = 133;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
					}
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				UnrollRecursionContexts(_parentctx);
			}
			return _localctx;
		}

		public partial class FunctionTypeContext : ParserRuleContext {
			public FunctionType Ast;
			public List<VariableDefinition> Params = new List<VariableDefinition>();
			public IType Rt;
			public ParametersContext p;
			public IToken par;
			public TypeContext t;
			public VoidTypeContext vt;
			public ITerminalNode L_PAR() { return GetToken(SeagullParser.L_PAR, 0); }
			public ITerminalNode R_PAR() { return GetToken(SeagullParser.R_PAR, 0); }
			public ITerminalNode ARROW() { return GetToken(SeagullParser.ARROW, 0); }
			public ParametersContext parameters() {
				return GetRuleContext<ParametersContext>(0);
			}
			public TypeContext type() {
				return GetRuleContext<TypeContext>(0);
			}
			public VoidTypeContext voidType() {
				return GetRuleContext<VoidTypeContext>(0);
			}
			public FunctionTypeContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_functionType; } }
		}

		[RuleVersion(0)]
		public FunctionTypeContext functionType() {
			FunctionTypeContext _localctx = new FunctionTypeContext(Context, State);
			EnterRule(_localctx, 8, RULE_functionType);
			int _la;
			try {
				EnterOuterAlt(_localctx, 1);
				{
					State = 134; Match(L_PAR);
					State = 138;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ID) {
						{
							State = 135; _localctx.p = parameters();
							_localctx.Params =  _localctx.p.Ast;
						}
					}

					State = 140; _localctx.par = Match(R_PAR);
					_localctx.Rt = new VoidType(_localctx.par.GetLine(), _localctx.par.GetCol()); 
					State = 151;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
						case 1:
						{
							State = 142; Match(ARROW);
							State = 149;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
								case INT:
								case CHAR:
								case DOUBLE:
								case STRING:
								case LONG:
								case BYTE:
								case PTR:
								case L_PAR:
								case L_CURL:
								case ID:
								{
									{
										State = 143; _localctx.t = type(0);
										_localctx.Rt = _localctx.t.Ast; 
									}
								}
									break;
								case VOID:
								{
									{
										State = 146; _localctx.vt = voidType();
										_localctx.Rt = _localctx.vt.Ast; 
									}
								}
									break;
								default:
									throw new NoViableAltException(this);
							}
						}
							break;
					}
					_localctx.Ast =  new FunctionType(_localctx.Rt, _localctx.Params); 
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class ParametersContext : ParserRuleContext {
			public List<VariableDefinition> Ast = new List<VariableDefinition>();
			public IToken id1;
			public TypeContext t1;
			public IToken id2;
			public TypeContext t2;
			public LiteralContext l;
			public ITerminalNode[] COL() { return GetTokens(SeagullParser.COL); }
			public ITerminalNode COL(int i) {
				return GetToken(SeagullParser.COL, i);
			}
			public ITerminalNode[] ID() { return GetTokens(SeagullParser.ID); }
			public ITerminalNode ID(int i) {
				return GetToken(SeagullParser.ID, i);
			}
			public TypeContext[] type() {
				return GetRuleContexts<TypeContext>();
			}
			public TypeContext type(int i) {
				return GetRuleContext<TypeContext>(i);
			}
			public ITerminalNode[] COMMA() { return GetTokens(SeagullParser.COMMA); }
			public ITerminalNode COMMA(int i) {
				return GetToken(SeagullParser.COMMA, i);
			}
			public ITerminalNode[] ASSIGN() { return GetTokens(SeagullParser.ASSIGN); }
			public ITerminalNode ASSIGN(int i) {
				return GetToken(SeagullParser.ASSIGN, i);
			}
			public LiteralContext[] literal() {
				return GetRuleContexts<LiteralContext>();
			}
			public LiteralContext literal(int i) {
				return GetRuleContext<LiteralContext>(i);
			}
			public ParametersContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_parameters; } }
		}

		[RuleVersion(0)]
		public ParametersContext parameters() {
			ParametersContext _localctx = new ParametersContext(Context, State);
			EnterRule(_localctx, 10, RULE_parameters);
			int _la;
			try {
				int _alt;
				EnterOuterAlt(_localctx, 1);
				{
					State = 155; _localctx.id1 = Match(ID);
					State = 156; Match(COL);
					State = 157; _localctx.t1 = type(0);
					_localctx.Ast.Add(new VariableDefinition(_localctx.id1.GetLine(), _localctx.id1.GetCol(), _localctx.id1.GetText(), _localctx.t1.Ast, null)); 
					State = 167;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
								{
									State = 159; Match(COMMA);
									State = 160; _localctx.id2 = Match(ID);
									State = 161; Match(COL);
									State = 162; _localctx.t2 = type(0);
									_localctx.Ast.Add(new VariableDefinition(_localctx.id2.GetLine(), _localctx.id2.GetCol(), _localctx.id2.GetText(), _localctx.t2.Ast, null)); 
								}
							} 
						}
						State = 169;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
					}
					State = 180;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
							{
								State = 170; Match(COMMA);
								State = 171; _localctx.id2 = Match(ID);
								State = 172; Match(COL);
								State = 173; _localctx.t2 = type(0);
								State = 174; Match(ASSIGN);
								State = 175; _localctx.l = literal();
								_localctx.Ast.Add(new VariableDefinition(_localctx.id2.GetLine(), _localctx.id2.GetCol(), _localctx.id2.GetText(), _localctx.t2.Ast, _localctx.l.Ast)); 
							}
						}
						State = 182;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class StructTypeContext : ParserRuleContext {
			public StructType Ast;
			public List<VariableDefinition> Fields = new List<VariableDefinition>();
			public IToken c;
			public VariableDefContext f;
			public ITerminalNode R_CURL() { return GetToken(SeagullParser.R_CURL, 0); }
			public ITerminalNode L_CURL() { return GetToken(SeagullParser.L_CURL, 0); }
			public VariableDefContext[] variableDef() {
				return GetRuleContexts<VariableDefContext>();
			}
			public VariableDefContext variableDef(int i) {
				return GetRuleContext<VariableDefContext>(i);
			}
			public ProtectionLevelContext[] protectionLevel() {
				return GetRuleContexts<ProtectionLevelContext>();
			}
			public ProtectionLevelContext protectionLevel(int i) {
				return GetRuleContext<ProtectionLevelContext>(i);
			}
			public StructTypeContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_structType; } }
		}

		[RuleVersion(0)]
		public StructTypeContext structType() {
			StructTypeContext _localctx = new StructTypeContext(Context, State);
			EnterRule(_localctx, 12, RULE_structType);
			int _la;
			try {
				EnterOuterAlt(_localctx, 1);
				{
					State = 183; _localctx.c = Match(L_CURL);
					State = 192;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (PUBLIC - 32)) | (1L << (PRIVATE - 32)) | (1L << (ID - 32)))) != 0)) {
						{
							{
								State = 185;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==PUBLIC || _la==PRIVATE) {
									{
										State = 184; protectionLevel();
									}
								}

								State = 187; _localctx.f = variableDef();
								_localctx.Fields.Add(_localctx.f.Ast); 
							}
						}
						State = 194;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 195; Match(R_CURL);
					_localctx.Ast =  new StructType(_localctx.c.GetLine(), _localctx.c.GetCol(), _localctx.Fields); 
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class EnumTypeContext : ParserRuleContext {
			public IType typeOf;
			public EnumType Ast;
			public List<EnumElementDefinition> defs = new List<EnumElementDefinition>();
			public IToken curl;
			public EnumElementContext d1;
			public EnumElementContext d2;
			public ITerminalNode R_CURL() { return GetToken(SeagullParser.R_CURL, 0); }
			public ITerminalNode L_CURL() { return GetToken(SeagullParser.L_CURL, 0); }
			public EnumElementContext[] enumElement() {
				return GetRuleContexts<EnumElementContext>();
			}
			public EnumElementContext enumElement(int i) {
				return GetRuleContext<EnumElementContext>(i);
			}
			public ITerminalNode[] COMMA() { return GetTokens(SeagullParser.COMMA); }
			public ITerminalNode COMMA(int i) {
				return GetToken(SeagullParser.COMMA, i);
			}
			public EnumTypeContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
			public EnumTypeContext(ParserRuleContext parent, int invokingState, IType typeOf)
				: base(parent, invokingState)
			{
				this.typeOf = typeOf;
			}
			public override int RuleIndex { get { return RULE_enumType; } }
		}

		[RuleVersion(0)]
		public EnumTypeContext enumType(IType typeOf) {
			EnumTypeContext _localctx = new EnumTypeContext(Context, State, typeOf);
			EnterRule(_localctx, 14, RULE_enumType);
			int _la;
			try {
				EnterOuterAlt(_localctx, 1);
				{
					State = 198; _localctx.curl = Match(L_CURL);
					State = 210;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ID) {
						{
							State = 199; _localctx.d1 = enumElement(_localctx.typeOf, 0);
							_localctx.defs.Add(_localctx.d1.Ast); 
							State = 207;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==COMMA) {
								{
									{
										State = 201; Match(COMMA);
										State = 202; _localctx.d2 = enumElement(_localctx.typeOf, 0);
										_localctx.defs.Add(_localctx.d2.Ast); 
									}
								}
								State = 209;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
						}
					}

					State = 212; Match(R_CURL);
					_localctx.Ast =  new EnumType(_localctx.curl.GetLine(), _localctx.curl.GetCol(), _localctx.typeOf, _localctx.defs); 
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class EnumElementContext : ParserRuleContext {
			public IType typeOf;
			public int defaultInt;
			public EnumElementDefinition Ast;
			public IToken id;
			public ExpressionContext expr;
			public ITerminalNode ASSIGN() { return GetToken(SeagullParser.ASSIGN, 0); }
			public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
			public ExpressionContext expression() {
				return GetRuleContext<ExpressionContext>(0);
			}
			public EnumElementContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
			public EnumElementContext(ParserRuleContext parent, int invokingState, IType typeOf, int defaultInt)
				: base(parent, invokingState)
			{
				this.typeOf = typeOf;
				this.defaultInt = defaultInt;
			}
			public override int RuleIndex { get { return RULE_enumElement; } }
		}

		[RuleVersion(0)]
		public EnumElementContext enumElement(IType typeOf, int defaultInt) {
			EnumElementContext _localctx = new EnumElementContext(Context, State, typeOf, defaultInt);
			EnterRule(_localctx, 16, RULE_enumElement);
			try {
				State = 222;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
					case 1:
						EnterOuterAlt(_localctx, 1);
					{
						State = 215; _localctx.id = Match(ID);
						State = 216; Match(ASSIGN);
						State = 217; _localctx.expr = expression(0);
						_localctx.Ast =  new EnumElementDefinition(_localctx.id.GetLine(), _localctx.id.GetCol(), (_localctx.id!=null?_localctx.id.Text:null), _localctx.expr.Ast, _localctx.typeOf); 
					}
						break;
					case 2:
						EnterOuterAlt(_localctx, 2);
					{
						State = 220; _localctx.id = Match(ID);

						IExpression def = new IntLiteral(_localctx.id.GetLine(), _localctx.id.GetCol(), defaultInt);
						if (!(_localctx.typeOf is IntType))
							def = new Default(_localctx.id.GetLine(), _localctx.id.GetCol(), _localctx.typeOf);
						_localctx.Ast =  new EnumElementDefinition(_localctx.id.GetLine(), _localctx.id.GetCol(), (_localctx.id!=null?_localctx.id.Text:null), def, _localctx.typeOf); 
				        
					}
						break;
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class PrimitiveContext : ParserRuleContext {
			public IType Ast;
			public IToken ptr;
			public IToken c;
			public IToken b;
			public IToken i;
			public IToken d;
			public IToken l;
			public IToken s;
			public ITerminalNode PTR() { return GetToken(SeagullParser.PTR, 0); }
			public ITerminalNode CHAR() { return GetToken(SeagullParser.CHAR, 0); }
			public ITerminalNode BYTE() { return GetToken(SeagullParser.BYTE, 0); }
			public ITerminalNode INT() { return GetToken(SeagullParser.INT, 0); }
			public ITerminalNode DOUBLE() { return GetToken(SeagullParser.DOUBLE, 0); }
			public ITerminalNode LONG() { return GetToken(SeagullParser.LONG, 0); }
			public ITerminalNode STRING() { return GetToken(SeagullParser.STRING, 0); }
			public PrimitiveContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_primitive; } }
		}

		[RuleVersion(0)]
		public PrimitiveContext primitive() {
			PrimitiveContext _localctx = new PrimitiveContext(Context, State);
			EnterRule(_localctx, 18, RULE_primitive);
			try {
				State = 238;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
					case PTR:
						EnterOuterAlt(_localctx, 1);
					{
						State = 224; _localctx.ptr = Match(PTR);
						_localctx.Ast =  new PointerType(_localctx.ptr.GetLine(), _localctx.ptr.GetCol()); 
					}
						break;
					case CHAR:
						EnterOuterAlt(_localctx, 2);
					{
						State = 226; _localctx.c = Match(CHAR);
						_localctx.Ast =  new CharType(_localctx.c.GetLine(), _localctx.c.GetCol()); 
					}
						break;
					case BYTE:
						EnterOuterAlt(_localctx, 3);
					{
						State = 228; _localctx.b = Match(BYTE);
						_localctx.Ast =  new ByteType(_localctx.b.GetLine(), _localctx.b.GetCol()); 
					}
						break;
					case INT:
						EnterOuterAlt(_localctx, 4);
					{
						State = 230; _localctx.i = Match(INT);
						_localctx.Ast =  new IntType(_localctx.i.GetLine(), _localctx.i.GetCol()); 
					}
						break;
					case DOUBLE:
						EnterOuterAlt(_localctx, 5);
					{
						State = 232; _localctx.d = Match(DOUBLE);
						_localctx.Ast =  new DoubleType(_localctx.d.GetLine(), _localctx.d.GetCol()); 
					}
						break;
					case LONG:
						EnterOuterAlt(_localctx, 6);
					{
						State = 234; _localctx.l = Match(LONG);
						_localctx.Ast =  new LongType(_localctx.l.GetLine(), _localctx.l.GetCol()); 
					}
						break;
					case STRING:
						EnterOuterAlt(_localctx, 7);
					{
						State = 236; _localctx.s = Match(STRING);
						_localctx.Ast =  new StringType(_localctx.s.GetLine(), _localctx.s.GetCol()); 
					}
						break;
					default:
						throw new NoViableAltException(this);
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class VoidTypeContext : ParserRuleContext {
			public IType Ast;
			public IToken v;
			public ITerminalNode VOID() { return GetToken(SeagullParser.VOID, 0); }
			public VoidTypeContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_voidType; } }
		}

		[RuleVersion(0)]
		public VoidTypeContext voidType() {
			VoidTypeContext _localctx = new VoidTypeContext(Context, State);
			EnterRule(_localctx, 20, RULE_voidType);
			try {
				EnterOuterAlt(_localctx, 1);
				{
					State = 240; _localctx.v = Match(VOID);
					_localctx.Ast =  new VoidType(_localctx.v.GetLine(), _localctx.v.GetCol()); 
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class ProtectionLevelContext : ParserRuleContext {
			public ITerminalNode PUBLIC() { return GetToken(SeagullParser.PUBLIC, 0); }
			public ITerminalNode PRIVATE() { return GetToken(SeagullParser.PRIVATE, 0); }
			public ProtectionLevelContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_protectionLevel; } }
		}

		[RuleVersion(0)]
		public ProtectionLevelContext protectionLevel() {
			ProtectionLevelContext _localctx = new ProtectionLevelContext(Context, State);
			EnterRule(_localctx, 22, RULE_protectionLevel);
			int _la;
			try {
				EnterOuterAlt(_localctx, 1);
				{
					State = 243;
					_la = TokenStream.LA(1);
					if ( !(_la==PUBLIC || _la==PRIVATE) ) {
						ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
						Consume();
					}
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class DefinitionContext : ParserRuleContext {
			public IDefinition Ast;
			public NamespaceDefContext _namespaceDef;
			public VariableDefContext _variableDef;
			public FuctionDefContext _fuctionDef;
			public StructDefContext _structDef;
			public EnumDefContext _enumDef;
			public NamespaceDefContext namespaceDef() {
				return GetRuleContext<NamespaceDefContext>(0);
			}
			public VariableDefContext variableDef() {
				return GetRuleContext<VariableDefContext>(0);
			}
			public FuctionDefContext fuctionDef() {
				return GetRuleContext<FuctionDefContext>(0);
			}
			public StructDefContext structDef() {
				return GetRuleContext<StructDefContext>(0);
			}
			public EnumDefContext enumDef() {
				return GetRuleContext<EnumDefContext>(0);
			}
			public DefinitionContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_definition; } }
		}

		[RuleVersion(0)]
		public DefinitionContext definition() {
			DefinitionContext _localctx = new DefinitionContext(Context, State);
			EnterRule(_localctx, 24, RULE_definition);
			try {
				State = 260;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
					case 1:
						EnterOuterAlt(_localctx, 1);
					{
						State = 245; _localctx._namespaceDef = namespaceDef();
						_localctx.Ast =  _localctx._namespaceDef.Ast; 
					}
						break;
					case 2:
						EnterOuterAlt(_localctx, 2);
					{
						State = 248; _localctx._variableDef = variableDef();
						_localctx.Ast =  _localctx._variableDef.Ast; 
					}
						break;
					case 3:
						EnterOuterAlt(_localctx, 3);
					{
						State = 251; _localctx._fuctionDef = fuctionDef();
						_localctx.Ast =  _localctx._fuctionDef.Ast; 
					}
						break;
					case 4:
						EnterOuterAlt(_localctx, 4);
					{
						State = 254; _localctx._structDef = structDef();
						_localctx.Ast =  _localctx._structDef.Ast; 
					}
						break;
					case 5:
						EnterOuterAlt(_localctx, 5);
					{
						State = 257; _localctx._enumDef = enumDef();
						_localctx.Ast =  _localctx._enumDef.Ast; 
					}
						break;
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class NamespaceDefContext : ParserRuleContext {
			public NamespaceDefinition Ast;
			public List<IDefinition> Def = new List<IDefinition>();
			public NamespaceDefinition Parent = NamespaceManager.DefaultNamespace;
			public NamespaceType ParentType;
			public IToken n;
			public IToken p;
			public IToken id;
			public DefinitionContext d;
			public ITerminalNode L_CURL() { return GetToken(SeagullParser.L_CURL, 0); }
			public ITerminalNode R_CURL() { return GetToken(SeagullParser.R_CURL, 0); }
			public ITerminalNode NAMESPACE() { return GetToken(SeagullParser.NAMESPACE, 0); }
			public ITerminalNode[] ID() { return GetTokens(SeagullParser.ID); }
			public ITerminalNode ID(int i) {
				return GetToken(SeagullParser.ID, i);
			}
			public ITerminalNode[] DOT() { return GetTokens(SeagullParser.DOT); }
			public ITerminalNode DOT(int i) {
				return GetToken(SeagullParser.DOT, i);
			}
			public DefinitionContext[] definition() {
				return GetRuleContexts<DefinitionContext>();
			}
			public DefinitionContext definition(int i) {
				return GetRuleContext<DefinitionContext>(i);
			}
			public NamespaceDefContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_namespaceDef; } }
		}

		[RuleVersion(0)]
		public NamespaceDefContext namespaceDef() {
			NamespaceDefContext _localctx = new NamespaceDefContext(Context, State);
			EnterRule(_localctx, 26, RULE_namespaceDef);
			int _la;
			try {
				int _alt;
				EnterOuterAlt(_localctx, 1);
				{
					State = 262; _localctx.n = Match(NAMESPACE);
					State = 268;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
								{
									State = 263; _localctx.p = Match(ID);
									State = 264; Match(DOT);
					 
									var ns = NamespaceManager.Instance.Define(_localctx.n.GetLine(), _localctx.n.GetCol(), _localctx.p.GetText(), _localctx.Parent);
									_localctx.ParentType =  (NamespaceType) _localctx.Parent.Type;
									_localctx.Parent =  ns;
					            
								}
							} 
						}
						State = 270;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
					}
					State = 271; _localctx.id = Match(ID);
			 
					_localctx.Ast =  NamespaceManager.Instance.Define(_localctx.id.GetLine(), _localctx.id.GetCol(), _localctx.id.GetText(), _localctx.Parent);
					_localctx.ParentType =  (NamespaceType) _localctx.Parent.Type;
			            
					State = 273; Match(L_CURL);
					State = 279;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRUCT) | (1L << ENUM) | (1L << NAMESPACE))) != 0) || _la==ID) {
						{
							{
								State = 274; _localctx.d = definition();
								_localctx.ParentType.AddDefinition(_localctx.d.Ast); 
							}
						}
						State = 281;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 282; Match(R_CURL);
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class VariableDefContext : ParserRuleContext {
			public VariableDefinition Ast;
			public IToken n;
			public TypeContext t;
			public ExpressionContext e;
			public ITerminalNode COL() { return GetToken(SeagullParser.COL, 0); }
			public ITerminalNode SEMI_COL() { return GetToken(SeagullParser.SEMI_COL, 0); }
			public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
			public TypeContext type() {
				return GetRuleContext<TypeContext>(0);
			}
			public ITerminalNode ASSIGN() { return GetToken(SeagullParser.ASSIGN, 0); }
			public ExpressionContext expression() {
				return GetRuleContext<ExpressionContext>(0);
			}
			public VariableDefContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_variableDef; } }
		}

		[RuleVersion(0)]
		public VariableDefContext variableDef() {
			VariableDefContext _localctx = new VariableDefContext(Context, State);
			EnterRule(_localctx, 28, RULE_variableDef);
			try {
				State = 298;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
					case 1:
						EnterOuterAlt(_localctx, 1);
					{
						State = 284; _localctx.n = Match(ID);
						State = 285; Match(COL);
						State = 286; _localctx.t = type(0);
						State = 287; Match(SEMI_COL);
						_localctx.Ast =  new VariableDefinition(_localctx.t.Ast.Line, _localctx.t.Ast.Column, _localctx.n.GetText(), _localctx.t.Ast, null); 
					}
						break;
					case 2:
						EnterOuterAlt(_localctx, 2);
					{
						State = 290; _localctx.n = Match(ID);
						State = 291; Match(COL);
						State = 292; _localctx.t = type(0);
						State = 293; Match(ASSIGN);
						State = 294; _localctx.e = expression(0);
						State = 295; Match(SEMI_COL);
						_localctx.Ast =  new VariableDefinition(_localctx.t.Ast.Line, _localctx.t.Ast.Column, _localctx.n.GetText(), _localctx.t.Ast, _localctx.e.Ast); 
					}
						break;
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class FuctionDefContext : ParserRuleContext {
			public FunctionDefinition Ast;
			public IType funcType;
			public IToken n;
			public FunctionTypeContext t;
			public FnBlockContext _fnBlock;
			public ITerminalNode COL() { return GetToken(SeagullParser.COL, 0); }
			public FnBlockContext fnBlock() {
				return GetRuleContext<FnBlockContext>(0);
			}
			public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
			public FunctionTypeContext functionType() {
				return GetRuleContext<FunctionTypeContext>(0);
			}
			public FuctionDefContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_fuctionDef; } }
		}

		[RuleVersion(0)]
		public FuctionDefContext fuctionDef() {
			FuctionDefContext _localctx = new FuctionDefContext(Context, State);
			EnterRule(_localctx, 30, RULE_fuctionDef);
			try {
				EnterOuterAlt(_localctx, 1);
				{
					State = 300; _localctx.n = Match(ID);
					State = 301; Match(COL);
					State = 302; _localctx.t = functionType();
					State = 303; _localctx._fnBlock = fnBlock();
					_localctx.Ast =  new FunctionDefinition(_localctx.n.GetLine(), _localctx.n.GetCol(), _localctx.n.GetText(), _localctx.t.Ast, _localctx._fnBlock.Ast); 
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class StructDefContext : ParserRuleContext {
			public StructDefinition Ast;
			public IToken s;
			public IToken n;
			public StructTypeContext t;
			public ITerminalNode STRUCT() { return GetToken(SeagullParser.STRUCT, 0); }
			public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
			public StructTypeContext structType() {
				return GetRuleContext<StructTypeContext>(0);
			}
			public StructDefContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_structDef; } }
		}

		[RuleVersion(0)]
		public StructDefContext structDef() {
			StructDefContext _localctx = new StructDefContext(Context, State);
			EnterRule(_localctx, 32, RULE_structDef);
			try {
				EnterOuterAlt(_localctx, 1);
				{
					State = 306; _localctx.s = Match(STRUCT);
					State = 307; _localctx.n = Match(ID);
					State = 308; _localctx.t = structType();
					_localctx.Ast =  new StructDefinition(_localctx.s.GetLine(), _localctx.s.GetCol(), _localctx.n.GetText(), _localctx.t.Ast); 
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class EnumDefContext : ParserRuleContext {
			public EnumDefinition Ast;
			public IType typeOf;
			public IToken e;
			public IToken n;
			public TypeContext t;
			public EnumTypeContext _enumType;
			public EnumTypeContext enumType() {
				return GetRuleContext<EnumTypeContext>(0);
			}
			public ITerminalNode ENUM() { return GetToken(SeagullParser.ENUM, 0); }
			public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
			public ITerminalNode COL() { return GetToken(SeagullParser.COL, 0); }
			public TypeContext type() {
				return GetRuleContext<TypeContext>(0);
			}
			public EnumDefContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_enumDef; } }
		}

		[RuleVersion(0)]
		public EnumDefContext enumDef() {
			EnumDefContext _localctx = new EnumDefContext(Context, State);
			EnterRule(_localctx, 34, RULE_enumDef);
			int _la;
			try {
				EnterOuterAlt(_localctx, 1);
				{
					State = 311; _localctx.e = Match(ENUM);
					State = 312; _localctx.n = Match(ID);
					_localctx.typeOf =  new IntType(_localctx.n.GetLine(), _localctx.n.GetCol()); 
					State = 318;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COL) {
						{
							State = 314; Match(COL);
							State = 315; _localctx.t = type(0);
							_localctx.typeOf =  _localctx.t.Ast; 
						}
					}

					State = 320; _localctx._enumType = enumType(_localctx.typeOf);
					_localctx.Ast =  new EnumDefinition(_localctx.e.GetLine(), _localctx.e.GetCol(), _localctx.n.GetText(), _localctx._enumType.Ast); 
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class DelegateContext : ParserRuleContext {
			public IType Ast;
			public IToken n;
			public FunctionTypeContext _functionType;
			public ITerminalNode DELEGATE() { return GetToken(SeagullParser.DELEGATE, 0); }
			public FunctionTypeContext functionType() {
				return GetRuleContext<FunctionTypeContext>(0);
			}
			public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
			public DelegateContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_delegate; } }
		}

		[RuleVersion(0)]
		public DelegateContext @delegate() {
			DelegateContext _localctx = new DelegateContext(Context, State);
			EnterRule(_localctx, 36, RULE_delegate);
			try {
				EnterOuterAlt(_localctx, 1);
				{
					State = 323; Match(DELEGATE);
					State = 324; _localctx.n = Match(ID);
					State = 325; _localctx._functionType = functionType();
					_localctx.Ast =  _localctx._functionType.Ast; 
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class FuncInvocationContext : ParserRuleContext {
			public FunctionInvocation Ast;
			public List<IExpression> arguments = new List<IExpression>();
			public VariableContext func;
			public ExpressionContext e1;
			public ExpressionContext e2;
			public ITerminalNode L_PAR() { return GetToken(SeagullParser.L_PAR, 0); }
			public ITerminalNode R_PAR() { return GetToken(SeagullParser.R_PAR, 0); }
			public VariableContext variable() {
				return GetRuleContext<VariableContext>(0);
			}
			public ExpressionContext[] expression() {
				return GetRuleContexts<ExpressionContext>();
			}
			public ExpressionContext expression(int i) {
				return GetRuleContext<ExpressionContext>(i);
			}
			public ITerminalNode[] COMMA() { return GetTokens(SeagullParser.COMMA); }
			public ITerminalNode COMMA(int i) {
				return GetToken(SeagullParser.COMMA, i);
			}
			public FuncInvocationContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_funcInvocation; } }
		}

		[RuleVersion(0)]
		public FuncInvocationContext funcInvocation() {
			FuncInvocationContext _localctx = new FuncInvocationContext(Context, State);
			EnterRule(_localctx, 38, RULE_funcInvocation);
			int _la;
			try {
				EnterOuterAlt(_localctx, 1);
				{
					State = 328; _localctx.func = variable();
					State = 329; Match(L_PAR);
					State = 341;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 25)) & ~0x3f) == 0 && ((1L << (_la - 25)) & ((1L << (NEW - 25)) | (1L << (DEFAULT - 25)) | (1L << (MINUS - 25)) | (1L << (NOT - 25)) | (1L << (L_PAR - 25)) | (1L << (ID - 25)) | (1L << (INT_CONSTANT - 25)) | (1L << (REAL_CONSTANT - 25)) | (1L << (CHAR_CONSTANT - 25)) | (1L << (STRING_CONSTANT - 25)) | (1L << (BOOLEAN_CONSTANT - 25)))) != 0)) {
						{
							State = 330; _localctx.e1 = expression(0);
							_localctx.arguments.Add(_localctx.e1.Ast); 
							State = 338;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==COMMA) {
								{
									{
										State = 332; Match(COMMA);
										State = 333; _localctx.e2 = expression(0);
										_localctx.arguments.Add(_localctx.e2.Ast); 
									}
								}
								State = 340;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
						}
					}

					State = 343; Match(R_PAR);
					_localctx.Ast =  new FunctionInvocation(_localctx.func.Ast, _localctx.arguments); 
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class FnBlockContext : ParserRuleContext {
			public List<IStatement> Ast = new List<IStatement>();
			public FnBlockContentContext c1;
			public FnBlockContentContext c2;
			public ITerminalNode L_CURL() { return GetToken(SeagullParser.L_CURL, 0); }
			public ITerminalNode R_CURL() { return GetToken(SeagullParser.R_CURL, 0); }
			public ITerminalNode[] DELAY() { return GetTokens(SeagullParser.DELAY); }
			public ITerminalNode DELAY(int i) {
				return GetToken(SeagullParser.DELAY, i);
			}
			public FnBlockContentContext[] fnBlockContent() {
				return GetRuleContexts<FnBlockContentContext>();
			}
			public FnBlockContentContext fnBlockContent(int i) {
				return GetRuleContext<FnBlockContentContext>(i);
			}
			public FnBlockContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_fnBlock; } }
		}

		[RuleVersion(0)]
		public FnBlockContext fnBlock() {
			FnBlockContext _localctx = new FnBlockContext(Context, State);
			EnterRule(_localctx, 40, RULE_fnBlock);
			int _la;
			try {
				EnterOuterAlt(_localctx, 1);
				{
					State = 346; Match(L_CURL);
					List<IStatement> delayed = new List<IStatement>(); 
					State = 357;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << WHILE) | (1L << FOR) | (1L << BREAK) | (1L << CONTINUE) | (1L << NEW) | (1L << RETURN) | (1L << PRINT) | (1L << READ) | (1L << DELAY) | (1L << DEFAULT) | (1L << MINUS) | (1L << NOT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (L_PAR - 64)) | (1L << (L_CURL - 64)) | (1L << (ID - 64)) | (1L << (INT_CONSTANT - 64)) | (1L << (REAL_CONSTANT - 64)) | (1L << (CHAR_CONSTANT - 64)) | (1L << (STRING_CONSTANT - 64)) | (1L << (BOOLEAN_CONSTANT - 64)))) != 0)) {
						{
							State = 355;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
								case IF:
								case WHILE:
								case FOR:
								case BREAK:
								case CONTINUE:
								case NEW:
								case RETURN:
								case PRINT:
								case READ:
								case DEFAULT:
								case MINUS:
								case NOT:
								case L_PAR:
								case L_CURL:
								case ID:
								case INT_CONSTANT:
								case REAL_CONSTANT:
								case CHAR_CONSTANT:
								case STRING_CONSTANT:
								case BOOLEAN_CONSTANT:
								{
									{
										State = 348; _localctx.c1 = fnBlockContent();
										_localctx.Ast.AddRange(_localctx.c1.Ast); 
									}
								}
									break;
								case DELAY:
								{
									{
										State = 351; Match(DELAY);
										State = 352; _localctx.c2 = fnBlockContent();
										delayed.AddRange(_localctx.c2.Ast); 
									}
								}
									break;
								default:
									throw new NoViableAltException(this);
							}
						}
						State = 359;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					_localctx.Ast.AddRange(delayed); 
					State = 361; Match(R_CURL);
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class FnBlockContentContext : ParserRuleContext {
			public List<IStatement> Ast = new List<IStatement>();
			public VariableDefContext _variableDef;
			public StatementContext block;
			public VariableDefContext variableDef() {
				return GetRuleContext<VariableDefContext>(0);
			}
			public StatementContext statement() {
				return GetRuleContext<StatementContext>(0);
			}
			public FnBlockContentContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_fnBlockContent; } }
		}

		[RuleVersion(0)]
		public FnBlockContentContext fnBlockContent() {
			FnBlockContentContext _localctx = new FnBlockContentContext(Context, State);
			EnterRule(_localctx, 42, RULE_fnBlockContent);
			try {
				State = 369;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
					case 1:
						EnterOuterAlt(_localctx, 1);
					{
						State = 363; _localctx._variableDef = variableDef();
						_localctx.Ast.Add(_localctx._variableDef.Ast); 
					}
						break;
					case 2:
						EnterOuterAlt(_localctx, 2);
					{
						State = 366; _localctx.block = statement();
						_localctx.Ast.AddRange(_localctx.block.Ast); 
					}
						break;
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class StatementContext : ParserRuleContext {
			public List<IStatement> Ast = new List<IStatement>();
			public StatementContext st1;
			public StatementContext st2;
			public IToken w;
			public ExpressionContext cond;
			public StatementContext st;
			public IToken f;
			public StatementContext init;
			public StatementContext incr;
			public VariableContext e;
			public ExpressionContext col;
			public IToken c;
			public IToken br;
			public IToken i;
			public ExpressionContext e1;
			public ExpressionContext e2;
			public IToken r;
			public ExpressionContext expr;
			public ReadPrintContext _readPrint;
			public FuncInvocationContext _funcInvocation;
			public ITerminalNode L_CURL() { return GetToken(SeagullParser.L_CURL, 0); }
			public ITerminalNode R_CURL() { return GetToken(SeagullParser.R_CURL, 0); }
			public ITerminalNode[] DELAY() { return GetTokens(SeagullParser.DELAY); }
			public ITerminalNode DELAY(int i) {
				return GetToken(SeagullParser.DELAY, i);
			}
			public StatementContext[] statement() {
				return GetRuleContexts<StatementContext>();
			}
			public StatementContext statement(int i) {
				return GetRuleContext<StatementContext>(i);
			}
			public ITerminalNode L_PAR() { return GetToken(SeagullParser.L_PAR, 0); }
			public ITerminalNode R_PAR() { return GetToken(SeagullParser.R_PAR, 0); }
			public ITerminalNode WHILE() { return GetToken(SeagullParser.WHILE, 0); }
			public ExpressionContext[] expression() {
				return GetRuleContexts<ExpressionContext>();
			}
			public ExpressionContext expression(int i) {
				return GetRuleContext<ExpressionContext>(i);
			}
			public ITerminalNode SEMI_COL() { return GetToken(SeagullParser.SEMI_COL, 0); }
			public ITerminalNode FOR() { return GetToken(SeagullParser.FOR, 0); }
			public ITerminalNode IN() { return GetToken(SeagullParser.IN, 0); }
			public VariableContext variable() {
				return GetRuleContext<VariableContext>(0);
			}
			public ITerminalNode CONTINUE() { return GetToken(SeagullParser.CONTINUE, 0); }
			public ITerminalNode BREAK() { return GetToken(SeagullParser.BREAK, 0); }
			public ITerminalNode IF() { return GetToken(SeagullParser.IF, 0); }
			public ITerminalNode ELSE() { return GetToken(SeagullParser.ELSE, 0); }
			public ITerminalNode ASSIGN() { return GetToken(SeagullParser.ASSIGN, 0); }
			public ITerminalNode RETURN() { return GetToken(SeagullParser.RETURN, 0); }
			public ReadPrintContext readPrint() {
				return GetRuleContext<ReadPrintContext>(0);
			}
			public FuncInvocationContext funcInvocation() {
				return GetRuleContext<FuncInvocationContext>(0);
			}
			public StatementContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_statement; } }
		}

		[RuleVersion(0)]
		public StatementContext statement() {
			StatementContext _localctx = new StatementContext(Context, State);
			EnterRule(_localctx, 44, RULE_statement);
			int _la;
			try {
				State = 452;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
					case 1:
						EnterOuterAlt(_localctx, 1);
					{
						State = 371; Match(L_CURL);
						List<IStatement> delayed = new List<IStatement>(); 
						State = 382;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << WHILE) | (1L << FOR) | (1L << BREAK) | (1L << CONTINUE) | (1L << NEW) | (1L << RETURN) | (1L << PRINT) | (1L << READ) | (1L << DELAY) | (1L << DEFAULT) | (1L << MINUS) | (1L << NOT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (L_PAR - 64)) | (1L << (L_CURL - 64)) | (1L << (ID - 64)) | (1L << (INT_CONSTANT - 64)) | (1L << (REAL_CONSTANT - 64)) | (1L << (CHAR_CONSTANT - 64)) | (1L << (STRING_CONSTANT - 64)) | (1L << (BOOLEAN_CONSTANT - 64)))) != 0)) {
							{
								State = 380;
								ErrorHandler.Sync(this);
								switch (TokenStream.LA(1)) {
									case IF:
									case WHILE:
									case FOR:
									case BREAK:
									case CONTINUE:
									case NEW:
									case RETURN:
									case PRINT:
									case READ:
									case DEFAULT:
									case MINUS:
									case NOT:
									case L_PAR:
									case L_CURL:
									case ID:
									case INT_CONSTANT:
									case REAL_CONSTANT:
									case CHAR_CONSTANT:
									case STRING_CONSTANT:
									case BOOLEAN_CONSTANT:
									{
										{
											State = 373; _localctx.st1 = statement();
											_localctx.Ast.AddRange(_localctx.st1.Ast); 
										}
									}
										break;
									case DELAY:
									{
										{
											State = 376; Match(DELAY);
											State = 377; _localctx.st2 = statement();
											delayed.AddRange(_localctx.st2.Ast); 
										}
									}
										break;
									default:
										throw new NoViableAltException(this);
								}
							}
							State = 384;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						_localctx.Ast.AddRange(delayed); 
						State = 386; Match(R_CURL);
					}
						break;
					case 2:
						EnterOuterAlt(_localctx, 2);
					{
						State = 387; _localctx.w = Match(WHILE);
						State = 388; Match(L_PAR);
						State = 389; _localctx.cond = expression(0);
						State = 390; Match(R_PAR);
						State = 391; _localctx.st = statement();
						_localctx.Ast.Add(new WhileLoop(_localctx.w.GetLine(), _localctx.w.GetCol(), _localctx.cond.Ast, _localctx.st.Ast)); 
					}
						break;
					case 3:
						EnterOuterAlt(_localctx, 3);
					{
						State = 394; _localctx.f = Match(FOR);
						State = 395; Match(L_PAR);
						State = 396; _localctx.init = statement();
						State = 397; _localctx.cond = expression(0);
						State = 398; Match(SEMI_COL);
						State = 399; _localctx.incr = statement();
						State = 400; Match(R_PAR);
						State = 401; _localctx.st = statement();
						_localctx.Ast.Add(new ForLoop(_localctx.f.GetLine(), _localctx.f.GetCol(), _localctx.init.Ast[0], _localctx.cond.Ast, _localctx.incr.Ast[0], _localctx.st.Ast)); 
					}
						break;
					case 4:
						EnterOuterAlt(_localctx, 4);
					{
						State = 404; _localctx.f = Match(FOR);
						State = 405; Match(L_PAR);
						State = 406; _localctx.e = variable();
						State = 407; Match(IN);
						State = 408; _localctx.col = expression(0);
						State = 409; Match(R_PAR);
						State = 410; _localctx.st = statement();
						_localctx.Ast.Add(new ForeachLoop(_localctx.f.GetLine(), _localctx.f.GetCol(), _localctx.e.Ast, _localctx.col.Ast, _localctx.st.Ast)); 
					}
						break;
					case 5:
						EnterOuterAlt(_localctx, 5);
					{
						State = 413; _localctx.c = Match(CONTINUE);
						State = 414; Match(SEMI_COL);
						_localctx.Ast.Add(new Continue(_localctx.c.GetLine(), _localctx.c.GetCol())); 
					}
						break;
					case 6:
						EnterOuterAlt(_localctx, 6);
					{
						State = 416; _localctx.br = Match(BREAK);
						State = 417; Match(SEMI_COL);
						_localctx.Ast.Add(new Break(_localctx.br.GetLine(), _localctx.br.GetCol())); 
					}
						break;
					case 7:
						EnterOuterAlt(_localctx, 7);
					{
						State = 419; _localctx.i = Match(IF);
						State = 420; Match(L_PAR);
						State = 421; _localctx.cond = expression(0);
						State = 422; Match(R_PAR);
						State = 423; _localctx.st1 = statement();
						_localctx.Ast.Add(new IfStatement(_localctx.i.GetLine(), _localctx.i.GetCol(), _localctx.cond.Ast, _localctx.st1.Ast)); 
						State = 429;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
							case 1:
							{
								State = 425; Match(ELSE);
								State = 426; _localctx.st2 = statement();
								((IfStatement)_localctx.Ast[0]).Else = _localctx.st2.Ast; 
							}
								break;
						}
					}
						break;
					case 8:
						EnterOuterAlt(_localctx, 8);
					{
						State = 431; _localctx.e1 = expression(0);
						State = 432; Match(ASSIGN);
						State = 433; _localctx.e2 = expression(0);
						State = 434; Match(SEMI_COL);
						_localctx.Ast.Add(new Assignment(_localctx.e1.Ast, _localctx.e2.Ast)); 
					}
						break;
					case 9:
						EnterOuterAlt(_localctx, 9);
					{
						State = 437; _localctx.r = Match(RETURN);
						State = 438; _localctx.expr = expression(0);
						State = 439; Match(SEMI_COL);
						_localctx.Ast.Add(new Return(_localctx.r.GetLine(), _localctx.r.GetCol(), _localctx.expr.Ast)); 
					}
						break;
					case 10:
						EnterOuterAlt(_localctx, 10);
					{
						State = 442; _localctx.r = Match(RETURN);
						State = 443; Match(SEMI_COL);
						_localctx.Ast.Add(new Return(_localctx.r.GetLine(), _localctx.r.GetCol(), null)); 
					}
						break;
					case 11:
						EnterOuterAlt(_localctx, 11);
					{
						State = 445; _localctx._readPrint = readPrint();
						_localctx.Ast.Add(_localctx._readPrint.Ast); 
					}
						break;
					case 12:
						EnterOuterAlt(_localctx, 12);
					{
						State = 448; _localctx._funcInvocation = funcInvocation();
						State = 449; Match(SEMI_COL);
						_localctx.Ast.Add(_localctx._funcInvocation.Ast); 
					}
						break;
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class ReadPrintContext : ParserRuleContext {
			public IStatement Ast;
			public IToken p;
			public ExpressionContext e;
			public IToken r;
			public ITerminalNode L_PAR() { return GetToken(SeagullParser.L_PAR, 0); }
			public ITerminalNode R_PAR() { return GetToken(SeagullParser.R_PAR, 0); }
			public ITerminalNode SEMI_COL() { return GetToken(SeagullParser.SEMI_COL, 0); }
			public ITerminalNode PRINT() { return GetToken(SeagullParser.PRINT, 0); }
			public ExpressionContext expression() {
				return GetRuleContext<ExpressionContext>(0);
			}
			public ITerminalNode READ() { return GetToken(SeagullParser.READ, 0); }
			public ReadPrintContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_readPrint; } }
		}

		[RuleVersion(0)]
		public ReadPrintContext readPrint() {
			ReadPrintContext _localctx = new ReadPrintContext(Context, State);
			EnterRule(_localctx, 46, RULE_readPrint);
			try {
				State = 468;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
					case PRINT:
						EnterOuterAlt(_localctx, 1);
					{
						State = 454; _localctx.p = Match(PRINT);
						State = 455; Match(L_PAR);
						State = 456; _localctx.e = expression(0);
						State = 457; Match(R_PAR);
						State = 458; Match(SEMI_COL);
						_localctx.Ast =  new Print(_localctx.p.GetLine(), _localctx.p.GetCol(), _localctx.e.Ast); 
					}
						break;
					case READ:
						EnterOuterAlt(_localctx, 2);
					{
						State = 461; _localctx.r = Match(READ);
						State = 462; Match(L_PAR);
						State = 463; _localctx.e = expression(0);
						State = 464; Match(R_PAR);
						State = 465; Match(SEMI_COL);
						_localctx.Ast =  new Read(_localctx.r.GetLine(), _localctx.r.GetCol(), _localctx.e.Ast); 
					}
						break;
					default:
						throw new NoViableAltException(this);
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class ExpressionContext : ParserRuleContext {
			public IExpression Ast;
			public ExpressionContext e1;
			public ExpressionContext e;
			public VariableContext _variable;
			public LiteralContext _literal;
			public FuncInvocationContext _funcInvocation;
			public ExpressionContext _expression;
			public IToken n;
			public IToken id;
			public IToken def;
			public TypeContext _type;
			public IToken um;
			public IToken not;
			public IToken p;
			public PrimitiveContext t;
			public IToken op;
			public ExpressionContext e2;
			public ExpressionContext e3;
			public IToken att;
			public VariableContext variable() {
				return GetRuleContext<VariableContext>(0);
			}
			public LiteralContext literal() {
				return GetRuleContext<LiteralContext>(0);
			}
			public FuncInvocationContext funcInvocation() {
				return GetRuleContext<FuncInvocationContext>(0);
			}
			public ITerminalNode L_PAR() { return GetToken(SeagullParser.L_PAR, 0); }
			public ITerminalNode R_PAR() { return GetToken(SeagullParser.R_PAR, 0); }
			public ExpressionContext[] expression() {
				return GetRuleContexts<ExpressionContext>();
			}
			public ExpressionContext expression(int i) {
				return GetRuleContext<ExpressionContext>(i);
			}
			public ITerminalNode NEW() { return GetToken(SeagullParser.NEW, 0); }
			public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
			public TypeContext type() {
				return GetRuleContext<TypeContext>(0);
			}
			public ITerminalNode DEFAULT() { return GetToken(SeagullParser.DEFAULT, 0); }
			public ITerminalNode MINUS() { return GetToken(SeagullParser.MINUS, 0); }
			public ITerminalNode NOT() { return GetToken(SeagullParser.NOT, 0); }
			public PrimitiveContext primitive() {
				return GetRuleContext<PrimitiveContext>(0);
			}
			public ITerminalNode STAR() { return GetToken(SeagullParser.STAR, 0); }
			public ITerminalNode SLASH() { return GetToken(SeagullParser.SLASH, 0); }
			public ITerminalNode PERCENT() { return GetToken(SeagullParser.PERCENT, 0); }
			public ITerminalNode PLUS() { return GetToken(SeagullParser.PLUS, 0); }
			public ITerminalNode GREATER_THAN() { return GetToken(SeagullParser.GREATER_THAN, 0); }
			public ITerminalNode LESS_THAN() { return GetToken(SeagullParser.LESS_THAN, 0); }
			public ITerminalNode GREATER_EQ_THAN() { return GetToken(SeagullParser.GREATER_EQ_THAN, 0); }
			public ITerminalNode LESS_EQ_THAN() { return GetToken(SeagullParser.LESS_EQ_THAN, 0); }
			public ITerminalNode EQUAL() { return GetToken(SeagullParser.EQUAL, 0); }
			public ITerminalNode NOT_EQUAL() { return GetToken(SeagullParser.NOT_EQUAL, 0); }
			public ITerminalNode AND() { return GetToken(SeagullParser.AND, 0); }
			public ITerminalNode OR() { return GetToken(SeagullParser.OR, 0); }
			public ITerminalNode QUESTION() { return GetToken(SeagullParser.QUESTION, 0); }
			public ITerminalNode COL() { return GetToken(SeagullParser.COL, 0); }
			public ITerminalNode L_BRACKET() { return GetToken(SeagullParser.L_BRACKET, 0); }
			public ITerminalNode R_BRACKET() { return GetToken(SeagullParser.R_BRACKET, 0); }
			public ITerminalNode DOT() { return GetToken(SeagullParser.DOT, 0); }
			public ExpressionContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_expression; } }
		}

		[RuleVersion(0)]
		public ExpressionContext expression() {
			return expression(0);
		}

		private ExpressionContext expression(int _p) {
			ParserRuleContext _parentctx = Context;
			int _parentState = State;
			ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
			ExpressionContext _prevctx = _localctx;
			int _startState = 48;
			EnterRecursionRule(_localctx, 48, RULE_expression, _p);
			int _la;
			try {
				int _alt;
				EnterOuterAlt(_localctx, 1);
				{
					State = 508;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
						case 1:
						{
							State = 471; _localctx._variable = variable();
							_localctx.Ast =  _localctx._variable.Ast; 
						}
							break;
						case 2:
						{
							State = 474; _localctx._literal = literal();
							_localctx.Ast =  _localctx._literal.Ast; 
						}
							break;
						case 3:
						{
							State = 477; _localctx._funcInvocation = funcInvocation();
							_localctx.Ast =  _localctx._funcInvocation.Ast; 
						}
							break;
						case 4:
						{
							State = 480; Match(L_PAR);
							State = 481; _localctx.e = _localctx._expression = expression(0);
							State = 482; Match(R_PAR);
							_localctx.Ast =  _localctx.e.Ast; 
						}
							break;
						case 5:
						{
							State = 485; _localctx.n = Match(NEW);
							State = 486; _localctx.id = Match(ID);
							_localctx.Ast =  new New(_localctx.n.GetLine(), _localctx.n.GetCol(), _localctx.id.GetText()); 
						}
							break;
						case 6:
						{
							State = 488; _localctx.def = Match(DEFAULT);
							State = 489; Match(L_PAR);
							State = 490; _localctx._type = type(0);
							State = 491; Match(R_PAR);
							_localctx.Ast =  new Default(_localctx.def.GetLine(), _localctx.def.GetCol(), _localctx._type.Ast); 
						}
							break;
						case 7:
						{
							State = 494; _localctx.um = Match(MINUS);
							State = 495; _localctx._expression = expression(8);
							_localctx.Ast =  new UnaryMinus(_localctx.um.GetLine(), _localctx.um.GetCol(), _localctx._expression.Ast); 
						}
							break;
						case 8:
						{
							State = 498; _localctx.not = Match(NOT);
							State = 499; _localctx._expression = expression(7);
							_localctx.Ast =  new Negation(_localctx.not.GetLine(), _localctx.not.GetCol(), _localctx._expression.Ast); 
						}
							break;
						case 9:
						{
							State = 502; _localctx.p = Match(L_PAR);
							State = 503; _localctx.t = primitive();
							State = 504; Match(R_PAR);
							State = 505; _localctx.e = _localctx._expression = expression(4);
							_localctx.Ast =  new Cast(_localctx.p.GetLine(), _localctx.p.GetCol(), _localctx.t.Ast, _localctx.e.Ast); 
						}
							break;
					}
					Context.Stop = TokenStream.LT(-1);
					State = 549;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							if ( ParseListeners!=null )
								TriggerExitRuleEvent();
							_prevctx = _localctx;
							{
								State = 547;
								ErrorHandler.Sync(this);
								switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
									case 1:
									{
										_localctx = new ExpressionContext(_parentctx, _parentState);
										_localctx.e1 = _prevctx;
										PushNewRecursionContext(_localctx, _startState, RULE_expression);
										State = 510;
										if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
										State = 511;
										_localctx.op = TokenStream.LT(1);
										_la = TokenStream.LA(1);
										if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << SLASH) | (1L << PERCENT))) != 0)) ) {
											_localctx.op = ErrorHandler.RecoverInline(this);
										}
										else {
											ErrorHandler.ReportMatch(this);
											Consume();
										}
										State = 512; _localctx.e2 = _localctx._expression = expression(7);
										_localctx.Ast =  new Arithmetic((_localctx.op!=null?_localctx.op.Text:null), _localctx.e1.Ast, _localctx.e2.Ast); 
									}
										break;
									case 2:
									{
										_localctx = new ExpressionContext(_parentctx, _parentState);
										_localctx.e1 = _prevctx;
										PushNewRecursionContext(_localctx, _startState, RULE_expression);
										State = 515;
										if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
										State = 516;
										_localctx.op = TokenStream.LT(1);
										_la = TokenStream.LA(1);
										if ( !(_la==PLUS || _la==MINUS) ) {
											_localctx.op = ErrorHandler.RecoverInline(this);
										}
										else {
											ErrorHandler.ReportMatch(this);
											Consume();
										}
										State = 517; _localctx.e2 = _localctx._expression = expression(6);
										_localctx.Ast =  new Arithmetic((_localctx.op!=null?_localctx.op.Text:null), _localctx.e1.Ast, _localctx.e2.Ast); 
									}
										break;
									case 3:
									{
										_localctx = new ExpressionContext(_parentctx, _parentState);
										_localctx.e1 = _prevctx;
										PushNewRecursionContext(_localctx, _startState, RULE_expression);
										State = 520;
										if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
										State = 521;
										_localctx.op = TokenStream.LT(1);
										_la = TokenStream.LA(1);
										if ( !(((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (EQUAL - 74)) | (1L << (NOT_EQUAL - 74)) | (1L << (LESS_THAN - 74)) | (1L << (GREATER_THAN - 74)) | (1L << (LESS_EQ_THAN - 74)) | (1L << (GREATER_EQ_THAN - 74)))) != 0)) ) {
											_localctx.op = ErrorHandler.RecoverInline(this);
										}
										else {
											ErrorHandler.ReportMatch(this);
											Consume();
										}
										State = 522; _localctx.e2 = _localctx._expression = expression(4);
										_localctx.Ast =  new Comparison((_localctx.op!=null?_localctx.op.Text:null), _localctx.e1.Ast, _localctx.e2.Ast); 
									}
										break;
									case 4:
									{
										_localctx = new ExpressionContext(_parentctx, _parentState);
										_localctx.e1 = _prevctx;
										PushNewRecursionContext(_localctx, _startState, RULE_expression);
										State = 525;
										if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
										State = 526;
										_localctx.op = TokenStream.LT(1);
										_la = TokenStream.LA(1);
										if ( !(_la==AND || _la==OR) ) {
											_localctx.op = ErrorHandler.RecoverInline(this);
										}
										else {
											ErrorHandler.ReportMatch(this);
											Consume();
										}
										State = 527; _localctx.e2 = _localctx._expression = expression(3);
										_localctx.Ast =  new LogicalOperation((_localctx.op!=null?_localctx.op.Text:null), _localctx.e1.Ast, _localctx.e2.Ast); 
									}
										break;
									case 5:
									{
										_localctx = new ExpressionContext(_parentctx, _parentState);
										_localctx.e1 = _prevctx;
										PushNewRecursionContext(_localctx, _startState, RULE_expression);
										State = 530;
										if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
										State = 531; Match(QUESTION);
										State = 532; _localctx.e2 = _localctx._expression = expression(0);
										State = 533; Match(COL);
										State = 534; _localctx.e3 = _localctx._expression = expression(2);
										_localctx.Ast =  new TernaryOperator(_localctx.e1.Ast, _localctx.e2.Ast, _localctx.e3.Ast); 
									}
										break;
									case 6:
									{
										_localctx = new ExpressionContext(_parentctx, _parentState);
										_localctx.e1 = _prevctx;
										PushNewRecursionContext(_localctx, _startState, RULE_expression);
										State = 537;
										if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
										State = 538; Match(L_BRACKET);
										State = 539; _localctx.e2 = _localctx._expression = expression(0);
										State = 540; Match(R_BRACKET);
										_localctx.Ast =  new Indexing(_localctx.e1.Ast, _localctx.e2.Ast); 
									}
										break;
									case 7:
									{
										_localctx = new ExpressionContext(_parentctx, _parentState);
										_localctx.e = _prevctx;
										PushNewRecursionContext(_localctx, _startState, RULE_expression);
										State = 543;
										if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
										State = 544; Match(DOT);
										State = 545; _localctx.att = Match(ID);
										_localctx.Ast =  new AttributeAccess(_localctx.e.Ast, (_localctx.att!=null?_localctx.att.Text:null)); 
									}
										break;
								}
							} 
						}
						State = 551;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
					}
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				UnrollRecursionContexts(_parentctx);
			}
			return _localctx;
		}

		public partial class VariableContext : ParserRuleContext {
			public Variable Ast;
			public IToken _ID;
			public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
			public VariableContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_variable; } }
		}

		[RuleVersion(0)]
		public VariableContext variable() {
			VariableContext _localctx = new VariableContext(Context, State);
			EnterRule(_localctx, 50, RULE_variable);
			try {
				EnterOuterAlt(_localctx, 1);
				{
					State = 552; _localctx._ID = Match(ID);
					_localctx.Ast =  new Variable(_localctx._ID.GetLine(), _localctx._ID.GetCol(), (_localctx._ID!=null?_localctx._ID.Text:null)); 
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public partial class LiteralContext : ParserRuleContext {
			public IExpression Ast;
			public IToken i;
			public IToken r;
			public IToken c;
			public IToken s;
			public IToken b;
			public ITerminalNode INT_CONSTANT() { return GetToken(SeagullParser.INT_CONSTANT, 0); }
			public ITerminalNode REAL_CONSTANT() { return GetToken(SeagullParser.REAL_CONSTANT, 0); }
			public ITerminalNode CHAR_CONSTANT() { return GetToken(SeagullParser.CHAR_CONSTANT, 0); }
			public ITerminalNode STRING_CONSTANT() { return GetToken(SeagullParser.STRING_CONSTANT, 0); }
			public ITerminalNode BOOLEAN_CONSTANT() { return GetToken(SeagullParser.BOOLEAN_CONSTANT, 0); }
			public LiteralContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_literal; } }
		}

		[RuleVersion(0)]
		public LiteralContext literal() {
			LiteralContext _localctx = new LiteralContext(Context, State);
			EnterRule(_localctx, 52, RULE_literal);
			try {
				State = 565;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
					case INT_CONSTANT:
						EnterOuterAlt(_localctx, 1);
					{
						State = 555; _localctx.i = Match(INT_CONSTANT);
						_localctx.Ast =  new IntLiteral(_localctx.i.GetLine(), _localctx.i.GetCol(), LexerHelper.LexemeToInt((_localctx.i!=null?_localctx.i.Text:null))); 
					}
						break;
					case REAL_CONSTANT:
						EnterOuterAlt(_localctx, 2);
					{
						State = 557; _localctx.r = Match(REAL_CONSTANT);
						_localctx.Ast =  new DoubleLiteral(_localctx.r.GetLine(), _localctx.r.GetCol(), LexerHelper.LexemeToReal((_localctx.r!=null?_localctx.r.Text:null))); 
					}
						break;
					case CHAR_CONSTANT:
						EnterOuterAlt(_localctx, 3);
					{
						State = 559; _localctx.c = Match(CHAR_CONSTANT);
						_localctx.Ast =  new CharLiteral(_localctx.c.GetLine(), _localctx.c.GetCol(), LexerHelper.LexemeToChar((_localctx.c!=null?_localctx.c.Text:null))); 
					}
						break;
					case STRING_CONSTANT:
						EnterOuterAlt(_localctx, 4);
					{
						State = 561; _localctx.s = Match(STRING_CONSTANT);
						_localctx.Ast =  new StringLiteral(_localctx.s.GetLine(), _localctx.s.GetCol(), (_localctx.s!=null?_localctx.s.Text:null)); 
					}
						break;
					case BOOLEAN_CONSTANT:
						EnterOuterAlt(_localctx, 5);
					{
						State = 563; _localctx.b = Match(BOOLEAN_CONSTANT);
						_localctx.Ast =  new BooleanLiteral(_localctx.b.GetLine(), _localctx.b.GetCol(), LexerHelper.LexemeToBoolean((_localctx.b!=null?_localctx.b.Text:null))); 
					}
						break;
					default:
						throw new NoViableAltException(this);
				}
			}
			catch (RecognitionException re) {
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally {
				ExitRule();
			}
			return _localctx;
		}

		public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
			switch (ruleIndex) {
				case 3: return type_sempred((TypeContext)_localctx, predIndex);
				case 24: return expression_sempred((ExpressionContext)_localctx, predIndex);
			}
			return true;
		}
		private bool type_sempred(TypeContext _localctx, int predIndex) {
			switch (predIndex) {
				case 0: return Precpred(Context, 2);
			}
			return true;
		}
		private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
			switch (predIndex) {
				case 1: return Precpred(Context, 6);
				case 2: return Precpred(Context, 5);
				case 3: return Precpred(Context, 3);
				case 4: return Precpred(Context, 2);
				case 5: return Precpred(Context, 1);
				case 6: return Precpred(Context, 12);
				case 7: return Precpred(Context, 11);
			}
			return true;
		}

		private static char[] _serializedATN = {
			'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
			'\x5964', '\x3', '\x61', '\x23A', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
			'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
			'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
			'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
			'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
			'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
			'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
			'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
			'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
			'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
			'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x3', '\x2', '\x3', 
			'\x2', '\x3', '\x2', '\a', '\x2', '<', '\n', '\x2', '\f', '\x2', '\xE', 
			'\x2', '?', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', 
			'\x2', '\x44', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 'G', '\v', '\x2', 
			'\x3', '\x2', '\x5', '\x2', 'J', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', 
			'\x3', '\x2', '\a', '\x2', 'O', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 
			'R', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
			'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
			'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\x61', 
			'\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x64', '\v', '\x4', '\x3', '\x4', 
			'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
			'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
			'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 't', '\n', '\x5', 
			'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
			'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x7F', 
			'\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x82', '\v', '\x5', '\a', '\x5', 
			'\x84', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x87', '\v', '\x5', '\x3', 
			'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x8D', 
			'\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
			'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', 
			'\x6', '\x98', '\n', '\x6', '\x5', '\x6', '\x9A', '\n', '\x6', '\x3', 
			'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
			'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
			'\a', '\a', '\a', '\xA8', '\n', '\a', '\f', '\a', '\xE', '\a', '\xAB', 
			'\v', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
			'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '\xB5', '\n', 
			'\a', '\f', '\a', '\xE', '\a', '\xB8', '\v', '\a', '\x3', '\b', '\x3', 
			'\b', '\x5', '\b', '\xBC', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
			'\b', '\a', '\b', '\xC1', '\n', '\b', '\f', '\b', '\xE', '\b', '\xC4', 
			'\v', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', 
			'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
			'\a', '\t', '\xD0', '\n', '\t', '\f', '\t', '\xE', '\t', '\xD3', '\v', 
			'\t', '\x5', '\t', '\xD5', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
			'\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
			'\x3', '\n', '\x3', '\n', '\x5', '\n', '\xE1', '\n', '\n', '\x3', '\v', 
			'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
			'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
			'\x3', '\v', '\x3', '\v', '\x5', '\v', '\xF1', '\n', '\v', '\x3', '\f', 
			'\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', 
			'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
			'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
			'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x107', 
			'\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', 
			'\xF', '\x10D', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\x110', '\v', 
			'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
			'\xF', '\x3', '\xF', '\a', '\xF', '\x118', '\n', '\xF', '\f', '\xF', '\xE', 
			'\xF', '\x11B', '\v', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', 
			'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
			'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
			'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x12D', '\n', 
			'\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
			'\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
			'\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
			'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x141', 
			'\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', 
			'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', 
			'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
			'\x3', '\x15', '\x3', '\x15', '\a', '\x15', '\x153', '\n', '\x15', '\f', 
			'\x15', '\xE', '\x15', '\x156', '\v', '\x15', '\x5', '\x15', '\x158', 
			'\n', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', 
			'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
			'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\a', '\x16', '\x166', '\n', 
			'\x16', '\f', '\x16', '\xE', '\x16', '\x169', '\v', '\x16', '\x3', '\x16', 
			'\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
			'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x174', '\n', 
			'\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
			'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\a', 
			'\x18', '\x17F', '\n', '\x18', '\f', '\x18', '\xE', '\x18', '\x182', '\v', 
			'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
			'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
			'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
			'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
			'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
			'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
			'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
			'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
			'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', 
			'\x18', '\x1B0', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
			'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
			'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
			'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
			'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x1C7', '\n', 
			'\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
			'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
			'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', 
			'\x19', '\x1D7', '\n', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
			'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
			'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
			'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
			'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
			'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
			'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
			'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
			'\x5', '\x1A', '\x1FF', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
			'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
			'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
			'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
			'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
			'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
			'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
			'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\a', 
			'\x1A', '\x226', '\n', '\x1A', '\f', '\x1A', '\xE', '\x1A', '\x229', '\v', 
			'\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', 
			'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
			'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x238', 
			'\n', '\x1C', '\x3', '\x1C', '\x2', '\x4', '\b', '\x32', '\x1D', '\x2', 
			'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
			'\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', 
			'\x30', '\x32', '\x34', '\x36', '\x2', '\a', '\x3', '\x2', '\"', '#', 
			'\x3', '\x2', '/', '\x31', '\x3', '\x2', '\x34', '\x35', '\x3', '\x2', 
			'L', 'Q', '\x3', '\x2', '>', '?', '\x2', '\x267', '\x2', '=', '\x3', '\x2', 
			'\x2', '\x2', '\x4', 'V', '\x3', '\x2', '\x2', '\x2', '\x6', 'Z', '\x3', 
			'\x2', '\x2', '\x2', '\b', 's', '\x3', '\x2', '\x2', '\x2', '\n', '\x88', 
			'\x3', '\x2', '\x2', '\x2', '\f', '\x9D', '\x3', '\x2', '\x2', '\x2', 
			'\xE', '\xB9', '\x3', '\x2', '\x2', '\x2', '\x10', '\xC8', '\x3', '\x2', 
			'\x2', '\x2', '\x12', '\xE0', '\x3', '\x2', '\x2', '\x2', '\x14', '\xF0', 
			'\x3', '\x2', '\x2', '\x2', '\x16', '\xF2', '\x3', '\x2', '\x2', '\x2', 
			'\x18', '\xF5', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x106', '\x3', '\x2', 
			'\x2', '\x2', '\x1C', '\x108', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x12C', 
			'\x3', '\x2', '\x2', '\x2', ' ', '\x12E', '\x3', '\x2', '\x2', '\x2', 
			'\"', '\x134', '\x3', '\x2', '\x2', '\x2', '$', '\x139', '\x3', '\x2', 
			'\x2', '\x2', '&', '\x145', '\x3', '\x2', '\x2', '\x2', '(', '\x14A', 
			'\x3', '\x2', '\x2', '\x2', '*', '\x15C', '\x3', '\x2', '\x2', '\x2', 
			',', '\x173', '\x3', '\x2', '\x2', '\x2', '.', '\x1C6', '\x3', '\x2', 
			'\x2', '\x2', '\x30', '\x1D6', '\x3', '\x2', '\x2', '\x2', '\x32', '\x1FE', 
			'\x3', '\x2', '\x2', '\x2', '\x34', '\x22A', '\x3', '\x2', '\x2', '\x2', 
			'\x36', '\x237', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\x5', '\x4', 
			'\x3', '\x2', '\x39', ':', '\b', '\x2', '\x1', '\x2', ':', '<', '\x3', 
			'\x2', '\x2', '\x2', ';', '\x38', '\x3', '\x2', '\x2', '\x2', '<', '?', 
			'\x3', '\x2', '\x2', '\x2', '=', ';', '\x3', '\x2', '\x2', '\x2', '=', 
			'>', '\x3', '\x2', '\x2', '\x2', '>', '\x45', '\x3', '\x2', '\x2', '\x2', 
			'?', '=', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\x5', '\x6', '\x4', 
			'\x2', '\x41', '\x42', '\b', '\x2', '\x1', '\x2', '\x42', '\x44', '\x3', 
			'\x2', '\x2', '\x2', '\x43', '@', '\x3', '\x2', '\x2', '\x2', '\x44', 
			'G', '\x3', '\x2', '\x2', '\x2', '\x45', '\x43', '\x3', '\x2', '\x2', 
			'\x2', '\x45', '\x46', '\x3', '\x2', '\x2', '\x2', '\x46', 'P', '\x3', 
			'\x2', '\x2', '\x2', 'G', '\x45', '\x3', '\x2', '\x2', '\x2', 'H', 'J', 
			'\x5', '\x18', '\r', '\x2', 'I', 'H', '\x3', '\x2', '\x2', '\x2', 'I', 
			'J', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\x3', '\x2', '\x2', '\x2', 
			'K', 'L', '\x5', '\x1A', '\xE', '\x2', 'L', 'M', '\b', '\x2', '\x1', '\x2', 
			'M', 'O', '\x3', '\x2', '\x2', '\x2', 'N', 'I', '\x3', '\x2', '\x2', '\x2', 
			'O', 'R', '\x3', '\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', '\x2', '\x2', 
			'P', 'Q', '\x3', '\x2', '\x2', '\x2', 'Q', 'S', '\x3', '\x2', '\x2', '\x2', 
			'R', 'P', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\a', '\x2', '\x2', '\x3', 
			'T', 'U', '\b', '\x2', '\x1', '\x2', 'U', '\x3', '\x3', '\x2', '\x2', 
			'\x2', 'V', 'W', '\a', '$', '\x2', '\x2', 'W', 'X', '\a', 'V', '\x2', 
			'\x2', 'X', 'Y', '\b', '\x3', '\x1', '\x2', 'Y', '\x5', '\x3', '\x2', 
			'\x2', '\x2', 'Z', '[', '\a', '%', '\x2', '\x2', '[', '\\', '\a', 'R', 
			'\x2', '\x2', '\\', '\x62', '\b', '\x4', '\x1', '\x2', ']', '^', '\a', 
			'*', '\x2', '\x2', '^', '_', '\a', 'R', '\x2', '\x2', '_', '\x61', '\b', 
			'\x4', '\x1', '\x2', '`', ']', '\x3', '\x2', '\x2', '\x2', '\x61', '\x64', 
			'\x3', '\x2', '\x2', '\x2', '\x62', '`', '\x3', '\x2', '\x2', '\x2', '\x62', 
			'\x63', '\x3', '\x2', '\x2', '\x2', '\x63', '\x65', '\x3', '\x2', '\x2', 
			'\x2', '\x64', '\x62', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\a', 
			'-', '\x2', '\x2', '\x66', '\a', '\x3', '\x2', '\x2', '\x2', 'g', 'h', 
			'\b', '\x5', '\x1', '\x2', 'h', 'i', '\x5', '\x14', '\v', '\x2', 'i', 
			'j', '\b', '\x5', '\x1', '\x2', 'j', 't', '\x3', '\x2', '\x2', '\x2', 
			'k', 'l', '\x5', '\n', '\x6', '\x2', 'l', 'm', '\b', '\x5', '\x1', '\x2', 
			'm', 't', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\x5', '\xE', '\b', '\x2', 
			'o', 'p', '\b', '\x5', '\x1', '\x2', 'p', 't', '\x3', '\x2', '\x2', '\x2', 
			'q', 'r', '\a', 'R', '\x2', '\x2', 'r', 't', '\b', '\x5', '\x1', '\x2', 
			's', 'g', '\x3', '\x2', '\x2', '\x2', 's', 'k', '\x3', '\x2', '\x2', '\x2', 
			's', 'n', '\x3', '\x2', '\x2', '\x2', 's', 'q', '\x3', '\x2', '\x2', '\x2', 
			't', '\x85', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\f', '\x4', '\x2', 
			'\x2', 'v', 'w', '\a', '@', '\x2', '\x2', 'w', 'x', '\a', 'S', '\x2', 
			'\x2', 'x', 'y', '\a', '\x41', '\x2', '\x2', 'y', '\x80', '\b', '\x5', 
			'\x1', '\x2', 'z', '{', '\a', '@', '\x2', '\x2', '{', '|', '\a', 'S', 
			'\x2', '\x2', '|', '}', '\a', '\x41', '\x2', '\x2', '}', '\x7F', '\b', 
			'\x5', '\x1', '\x2', '~', 'z', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x82', 
			'\x3', '\x2', '\x2', '\x2', '\x80', '~', '\x3', '\x2', '\x2', '\x2', '\x80', 
			'\x81', '\x3', '\x2', '\x2', '\x2', '\x81', '\x84', '\x3', '\x2', '\x2', 
			'\x2', '\x82', '\x80', '\x3', '\x2', '\x2', '\x2', '\x83', 'u', '\x3', 
			'\x2', '\x2', '\x2', '\x84', '\x87', '\x3', '\x2', '\x2', '\x2', '\x85', 
			'\x83', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\x3', '\x2', '\x2', 
			'\x2', '\x86', '\t', '\x3', '\x2', '\x2', '\x2', '\x87', '\x85', '\x3', 
			'\x2', '\x2', '\x2', '\x88', '\x8C', '\a', '\x42', '\x2', '\x2', '\x89', 
			'\x8A', '\x5', '\f', '\a', '\x2', '\x8A', '\x8B', '\b', '\x6', '\x1', 
			'\x2', '\x8B', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x89', '\x3', 
			'\x2', '\x2', '\x2', '\x8C', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8D', 
			'\x8E', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', '\a', '\x43', '\x2', 
			'\x2', '\x8F', '\x99', '\b', '\x6', '\x1', '\x2', '\x90', '\x97', '\a', 
			'\x32', '\x2', '\x2', '\x91', '\x92', '\x5', '\b', '\x5', '\x2', '\x92', 
			'\x93', '\b', '\x6', '\x1', '\x2', '\x93', '\x98', '\x3', '\x2', '\x2', 
			'\x2', '\x94', '\x95', '\x5', '\x16', '\f', '\x2', '\x95', '\x96', '\b', 
			'\x6', '\x1', '\x2', '\x96', '\x98', '\x3', '\x2', '\x2', '\x2', '\x97', 
			'\x91', '\x3', '\x2', '\x2', '\x2', '\x97', '\x94', '\x3', '\x2', '\x2', 
			'\x2', '\x98', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x99', '\x90', '\x3', 
			'\x2', '\x2', '\x2', '\x99', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9A', 
			'\x9B', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', '\b', '\x6', '\x1', 
			'\x2', '\x9C', '\v', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\a', 
			'R', '\x2', '\x2', '\x9E', '\x9F', '\a', ',', '\x2', '\x2', '\x9F', '\xA0', 
			'\x5', '\b', '\x5', '\x2', '\xA0', '\xA9', '\b', '\a', '\x1', '\x2', '\xA1', 
			'\xA2', '\a', '+', '\x2', '\x2', '\xA2', '\xA3', '\a', 'R', '\x2', '\x2', 
			'\xA3', '\xA4', '\a', ',', '\x2', '\x2', '\xA4', '\xA5', '\x5', '\b', 
			'\x5', '\x2', '\xA5', '\xA6', '\b', '\a', '\x1', '\x2', '\xA6', '\xA8', 
			'\x3', '\x2', '\x2', '\x2', '\xA7', '\xA1', '\x3', '\x2', '\x2', '\x2', 
			'\xA8', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xA7', '\x3', '\x2', 
			'\x2', '\x2', '\xA9', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xB6', 
			'\x3', '\x2', '\x2', '\x2', '\xAB', '\xA9', '\x3', '\x2', '\x2', '\x2', 
			'\xAC', '\xAD', '\a', '+', '\x2', '\x2', '\xAD', '\xAE', '\a', 'R', '\x2', 
			'\x2', '\xAE', '\xAF', '\a', ',', '\x2', '\x2', '\xAF', '\xB0', '\x5', 
			'\b', '\x5', '\x2', '\xB0', '\xB1', '\a', '.', '\x2', '\x2', '\xB1', '\xB2', 
			'\x5', '\x36', '\x1C', '\x2', '\xB2', '\xB3', '\b', '\a', '\x1', '\x2', 
			'\xB3', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xAC', '\x3', '\x2', 
			'\x2', '\x2', '\xB5', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB4', 
			'\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\x3', '\x2', '\x2', '\x2', 
			'\xB7', '\r', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB6', '\x3', '\x2', 
			'\x2', '\x2', '\xB9', '\xC2', '\a', '\x44', '\x2', '\x2', '\xBA', '\xBC', 
			'\x5', '\x18', '\r', '\x2', '\xBB', '\xBA', '\x3', '\x2', '\x2', '\x2', 
			'\xBB', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBD', '\x3', '\x2', 
			'\x2', '\x2', '\xBD', '\xBE', '\x5', '\x1E', '\x10', '\x2', '\xBE', '\xBF', 
			'\b', '\b', '\x1', '\x2', '\xBF', '\xC1', '\x3', '\x2', '\x2', '\x2', 
			'\xC0', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC4', '\x3', '\x2', 
			'\x2', '\x2', '\xC2', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', 
			'\x3', '\x2', '\x2', '\x2', '\xC3', '\xC5', '\x3', '\x2', '\x2', '\x2', 
			'\xC4', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\a', '\x45', 
			'\x2', '\x2', '\xC6', '\xC7', '\b', '\b', '\x1', '\x2', '\xC7', '\xF', 
			'\x3', '\x2', '\x2', '\x2', '\xC8', '\xD4', '\a', '\x44', '\x2', '\x2', 
			'\xC9', '\xCA', '\x5', '\x12', '\n', '\x2', '\xCA', '\xD1', '\b', '\t', 
			'\x1', '\x2', '\xCB', '\xCC', '\a', '+', '\x2', '\x2', '\xCC', '\xCD', 
			'\x5', '\x12', '\n', '\x2', '\xCD', '\xCE', '\b', '\t', '\x1', '\x2', 
			'\xCE', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xCB', '\x3', '\x2', 
			'\x2', '\x2', '\xD0', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xCF', 
			'\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', '\x3', '\x2', '\x2', '\x2', 
			'\xD2', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD1', '\x3', '\x2', 
			'\x2', '\x2', '\xD4', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD5', 
			'\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\x3', '\x2', '\x2', '\x2', 
			'\xD6', '\xD7', '\a', '\x45', '\x2', '\x2', '\xD7', '\xD8', '\b', '\t', 
			'\x1', '\x2', '\xD8', '\x11', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xDA', 
			'\a', 'R', '\x2', '\x2', '\xDA', '\xDB', '\a', '.', '\x2', '\x2', '\xDB', 
			'\xDC', '\x5', '\x32', '\x1A', '\x2', '\xDC', '\xDD', '\b', '\n', '\x1', 
			'\x2', '\xDD', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xDF', '\a', 
			'R', '\x2', '\x2', '\xDF', '\xE1', '\b', '\n', '\x1', '\x2', '\xE0', '\xD9', 
			'\x3', '\x2', '\x2', '\x2', '\xE0', '\xDE', '\x3', '\x2', '\x2', '\x2', 
			'\xE1', '\x13', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE3', '\a', '\xF', 
			'\x2', '\x2', '\xE3', '\xF1', '\b', '\v', '\x1', '\x2', '\xE4', '\xE5', 
			'\a', '\x6', '\x2', '\x2', '\xE5', '\xF1', '\b', '\v', '\x1', '\x2', '\xE6', 
			'\xE7', '\a', '\v', '\x2', '\x2', '\xE7', '\xF1', '\b', '\v', '\x1', '\x2', 
			'\xE8', '\xE9', '\a', '\x5', '\x2', '\x2', '\xE9', '\xF1', '\b', '\v', 
			'\x1', '\x2', '\xEA', '\xEB', '\a', '\a', '\x2', '\x2', '\xEB', '\xF1', 
			'\b', '\v', '\x1', '\x2', '\xEC', '\xED', '\a', '\n', '\x2', '\x2', '\xED', 
			'\xF1', '\b', '\v', '\x1', '\x2', '\xEE', '\xEF', '\a', '\b', '\x2', '\x2', 
			'\xEF', '\xF1', '\b', '\v', '\x1', '\x2', '\xF0', '\xE2', '\x3', '\x2', 
			'\x2', '\x2', '\xF0', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xE6', 
			'\x3', '\x2', '\x2', '\x2', '\xF0', '\xE8', '\x3', '\x2', '\x2', '\x2', 
			'\xF0', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xEC', '\x3', '\x2', 
			'\x2', '\x2', '\xF0', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xF1', '\x15', 
			'\x3', '\x2', '\x2', '\x2', '\xF2', '\xF3', '\a', '\x4', '\x2', '\x2', 
			'\xF3', '\xF4', '\b', '\f', '\x1', '\x2', '\xF4', '\x17', '\x3', '\x2', 
			'\x2', '\x2', '\xF5', '\xF6', '\t', '\x2', '\x2', '\x2', '\xF6', '\x19', 
			'\x3', '\x2', '\x2', '\x2', '\xF7', '\xF8', '\x5', '\x1C', '\xF', '\x2', 
			'\xF8', '\xF9', '\b', '\xE', '\x1', '\x2', '\xF9', '\x107', '\x3', '\x2', 
			'\x2', '\x2', '\xFA', '\xFB', '\x5', '\x1E', '\x10', '\x2', '\xFB', '\xFC', 
			'\b', '\xE', '\x1', '\x2', '\xFC', '\x107', '\x3', '\x2', '\x2', '\x2', 
			'\xFD', '\xFE', '\x5', ' ', '\x11', '\x2', '\xFE', '\xFF', '\b', '\xE', 
			'\x1', '\x2', '\xFF', '\x107', '\x3', '\x2', '\x2', '\x2', '\x100', '\x101', 
			'\x5', '\"', '\x12', '\x2', '\x101', '\x102', '\b', '\xE', '\x1', '\x2', 
			'\x102', '\x107', '\x3', '\x2', '\x2', '\x2', '\x103', '\x104', '\x5', 
			'$', '\x13', '\x2', '\x104', '\x105', '\b', '\xE', '\x1', '\x2', '\x105', 
			'\x107', '\x3', '\x2', '\x2', '\x2', '\x106', '\xF7', '\x3', '\x2', '\x2', 
			'\x2', '\x106', '\xFA', '\x3', '\x2', '\x2', '\x2', '\x106', '\xFD', '\x3', 
			'\x2', '\x2', '\x2', '\x106', '\x100', '\x3', '\x2', '\x2', '\x2', '\x106', 
			'\x103', '\x3', '\x2', '\x2', '\x2', '\x107', '\x1B', '\x3', '\x2', '\x2', 
			'\x2', '\x108', '\x10E', '\a', '&', '\x2', '\x2', '\x109', '\x10A', '\a', 
			'R', '\x2', '\x2', '\x10A', '\x10B', '\a', '*', '\x2', '\x2', '\x10B', 
			'\x10D', '\b', '\xF', '\x1', '\x2', '\x10C', '\x109', '\x3', '\x2', '\x2', 
			'\x2', '\x10D', '\x110', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x10C', 
			'\x3', '\x2', '\x2', '\x2', '\x10E', '\x10F', '\x3', '\x2', '\x2', '\x2', 
			'\x10F', '\x111', '\x3', '\x2', '\x2', '\x2', '\x110', '\x10E', '\x3', 
			'\x2', '\x2', '\x2', '\x111', '\x112', '\a', 'R', '\x2', '\x2', '\x112', 
			'\x113', '\b', '\xF', '\x1', '\x2', '\x113', '\x119', '\a', '\x44', '\x2', 
			'\x2', '\x114', '\x115', '\x5', '\x1A', '\xE', '\x2', '\x115', '\x116', 
			'\b', '\xF', '\x1', '\x2', '\x116', '\x118', '\x3', '\x2', '\x2', '\x2', 
			'\x117', '\x114', '\x3', '\x2', '\x2', '\x2', '\x118', '\x11B', '\x3', 
			'\x2', '\x2', '\x2', '\x119', '\x117', '\x3', '\x2', '\x2', '\x2', '\x119', 
			'\x11A', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x11C', '\x3', '\x2', '\x2', 
			'\x2', '\x11B', '\x119', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11D', 
			'\a', '\x45', '\x2', '\x2', '\x11D', '\x1D', '\x3', '\x2', '\x2', '\x2', 
			'\x11E', '\x11F', '\a', 'R', '\x2', '\x2', '\x11F', '\x120', '\a', ',', 
			'\x2', '\x2', '\x120', '\x121', '\x5', '\b', '\x5', '\x2', '\x121', '\x122', 
			'\a', '-', '\x2', '\x2', '\x122', '\x123', '\b', '\x10', '\x1', '\x2', 
			'\x123', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x124', '\x125', '\a', 
			'R', '\x2', '\x2', '\x125', '\x126', '\a', ',', '\x2', '\x2', '\x126', 
			'\x127', '\x5', '\b', '\x5', '\x2', '\x127', '\x128', '\a', '.', '\x2', 
			'\x2', '\x128', '\x129', '\x5', '\x32', '\x1A', '\x2', '\x129', '\x12A', 
			'\a', '-', '\x2', '\x2', '\x12A', '\x12B', '\b', '\x10', '\x1', '\x2', 
			'\x12B', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x11E', '\x3', 
			'\x2', '\x2', '\x2', '\x12C', '\x124', '\x3', '\x2', '\x2', '\x2', '\x12D', 
			'\x1F', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x12F', '\a', 'R', '\x2', 
			'\x2', '\x12F', '\x130', '\a', ',', '\x2', '\x2', '\x130', '\x131', '\x5', 
			'\n', '\x6', '\x2', '\x131', '\x132', '\x5', '*', '\x16', '\x2', '\x132', 
			'\x133', '\b', '\x11', '\x1', '\x2', '\x133', '!', '\x3', '\x2', '\x2', 
			'\x2', '\x134', '\x135', '\a', '\t', '\x2', '\x2', '\x135', '\x136', '\a', 
			'R', '\x2', '\x2', '\x136', '\x137', '\x5', '\xE', '\b', '\x2', '\x137', 
			'\x138', '\b', '\x12', '\x1', '\x2', '\x138', '#', '\x3', '\x2', '\x2', 
			'\x2', '\x139', '\x13A', '\a', '\f', '\x2', '\x2', '\x13A', '\x13B', '\a', 
			'R', '\x2', '\x2', '\x13B', '\x140', '\b', '\x13', '\x1', '\x2', '\x13C', 
			'\x13D', '\a', ',', '\x2', '\x2', '\x13D', '\x13E', '\x5', '\b', '\x5', 
			'\x2', '\x13E', '\x13F', '\b', '\x13', '\x1', '\x2', '\x13F', '\x141', 
			'\x3', '\x2', '\x2', '\x2', '\x140', '\x13C', '\x3', '\x2', '\x2', '\x2', 
			'\x140', '\x141', '\x3', '\x2', '\x2', '\x2', '\x141', '\x142', '\x3', 
			'\x2', '\x2', '\x2', '\x142', '\x143', '\x5', '\x10', '\t', '\x2', '\x143', 
			'\x144', '\b', '\x13', '\x1', '\x2', '\x144', '%', '\x3', '\x2', '\x2', 
			'\x2', '\x145', '\x146', '\a', '\r', '\x2', '\x2', '\x146', '\x147', '\a', 
			'R', '\x2', '\x2', '\x147', '\x148', '\x5', '\n', '\x6', '\x2', '\x148', 
			'\x149', '\b', '\x14', '\x1', '\x2', '\x149', '\'', '\x3', '\x2', '\x2', 
			'\x2', '\x14A', '\x14B', '\x5', '\x34', '\x1B', '\x2', '\x14B', '\x157', 
			'\a', '\x42', '\x2', '\x2', '\x14C', '\x14D', '\x5', '\x32', '\x1A', '\x2', 
			'\x14D', '\x154', '\b', '\x15', '\x1', '\x2', '\x14E', '\x14F', '\a', 
			'+', '\x2', '\x2', '\x14F', '\x150', '\x5', '\x32', '\x1A', '\x2', '\x150', 
			'\x151', '\b', '\x15', '\x1', '\x2', '\x151', '\x153', '\x3', '\x2', '\x2', 
			'\x2', '\x152', '\x14E', '\x3', '\x2', '\x2', '\x2', '\x153', '\x156', 
			'\x3', '\x2', '\x2', '\x2', '\x154', '\x152', '\x3', '\x2', '\x2', '\x2', 
			'\x154', '\x155', '\x3', '\x2', '\x2', '\x2', '\x155', '\x158', '\x3', 
			'\x2', '\x2', '\x2', '\x156', '\x154', '\x3', '\x2', '\x2', '\x2', '\x157', 
			'\x14C', '\x3', '\x2', '\x2', '\x2', '\x157', '\x158', '\x3', '\x2', '\x2', 
			'\x2', '\x158', '\x159', '\x3', '\x2', '\x2', '\x2', '\x159', '\x15A', 
			'\a', '\x43', '\x2', '\x2', '\x15A', '\x15B', '\b', '\x15', '\x1', '\x2', 
			'\x15B', ')', '\x3', '\x2', '\x2', '\x2', '\x15C', '\x15D', '\a', '\x44', 
			'\x2', '\x2', '\x15D', '\x167', '\b', '\x16', '\x1', '\x2', '\x15E', '\x15F', 
			'\x5', ',', '\x17', '\x2', '\x15F', '\x160', '\b', '\x16', '\x1', '\x2', 
			'\x160', '\x166', '\x3', '\x2', '\x2', '\x2', '\x161', '\x162', '\a', 
			'!', '\x2', '\x2', '\x162', '\x163', '\x5', ',', '\x17', '\x2', '\x163', 
			'\x164', '\b', '\x16', '\x1', '\x2', '\x164', '\x166', '\x3', '\x2', '\x2', 
			'\x2', '\x165', '\x15E', '\x3', '\x2', '\x2', '\x2', '\x165', '\x161', 
			'\x3', '\x2', '\x2', '\x2', '\x166', '\x169', '\x3', '\x2', '\x2', '\x2', 
			'\x167', '\x165', '\x3', '\x2', '\x2', '\x2', '\x167', '\x168', '\x3', 
			'\x2', '\x2', '\x2', '\x168', '\x16A', '\x3', '\x2', '\x2', '\x2', '\x169', 
			'\x167', '\x3', '\x2', '\x2', '\x2', '\x16A', '\x16B', '\b', '\x16', '\x1', 
			'\x2', '\x16B', '\x16C', '\a', '\x45', '\x2', '\x2', '\x16C', '+', '\x3', 
			'\x2', '\x2', '\x2', '\x16D', '\x16E', '\x5', '\x1E', '\x10', '\x2', '\x16E', 
			'\x16F', '\b', '\x17', '\x1', '\x2', '\x16F', '\x174', '\x3', '\x2', '\x2', 
			'\x2', '\x170', '\x171', '\x5', '.', '\x18', '\x2', '\x171', '\x172', 
			'\b', '\x17', '\x1', '\x2', '\x172', '\x174', '\x3', '\x2', '\x2', '\x2', 
			'\x173', '\x16D', '\x3', '\x2', '\x2', '\x2', '\x173', '\x170', '\x3', 
			'\x2', '\x2', '\x2', '\x174', '-', '\x3', '\x2', '\x2', '\x2', '\x175', 
			'\x176', '\a', '\x44', '\x2', '\x2', '\x176', '\x180', '\b', '\x18', '\x1', 
			'\x2', '\x177', '\x178', '\x5', '.', '\x18', '\x2', '\x178', '\x179', 
			'\b', '\x18', '\x1', '\x2', '\x179', '\x17F', '\x3', '\x2', '\x2', '\x2', 
			'\x17A', '\x17B', '\a', '!', '\x2', '\x2', '\x17B', '\x17C', '\x5', '.', 
			'\x18', '\x2', '\x17C', '\x17D', '\b', '\x18', '\x1', '\x2', '\x17D', 
			'\x17F', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x177', '\x3', '\x2', '\x2', 
			'\x2', '\x17E', '\x17A', '\x3', '\x2', '\x2', '\x2', '\x17F', '\x182', 
			'\x3', '\x2', '\x2', '\x2', '\x180', '\x17E', '\x3', '\x2', '\x2', '\x2', 
			'\x180', '\x181', '\x3', '\x2', '\x2', '\x2', '\x181', '\x183', '\x3', 
			'\x2', '\x2', '\x2', '\x182', '\x180', '\x3', '\x2', '\x2', '\x2', '\x183', 
			'\x184', '\b', '\x18', '\x1', '\x2', '\x184', '\x1C7', '\a', '\x45', '\x2', 
			'\x2', '\x185', '\x186', '\a', '\x14', '\x2', '\x2', '\x186', '\x187', 
			'\a', '\x42', '\x2', '\x2', '\x187', '\x188', '\x5', '\x32', '\x1A', '\x2', 
			'\x188', '\x189', '\a', '\x43', '\x2', '\x2', '\x189', '\x18A', '\x5', 
			'.', '\x18', '\x2', '\x18A', '\x18B', '\b', '\x18', '\x1', '\x2', '\x18B', 
			'\x1C7', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x18D', '\a', '\x15', '\x2', 
			'\x2', '\x18D', '\x18E', '\a', '\x42', '\x2', '\x2', '\x18E', '\x18F', 
			'\x5', '.', '\x18', '\x2', '\x18F', '\x190', '\x5', '\x32', '\x1A', '\x2', 
			'\x190', '\x191', '\a', '-', '\x2', '\x2', '\x191', '\x192', '\x5', '.', 
			'\x18', '\x2', '\x192', '\x193', '\a', '\x43', '\x2', '\x2', '\x193', 
			'\x194', '\x5', '.', '\x18', '\x2', '\x194', '\x195', '\b', '\x18', '\x1', 
			'\x2', '\x195', '\x1C7', '\x3', '\x2', '\x2', '\x2', '\x196', '\x197', 
			'\a', '\x15', '\x2', '\x2', '\x197', '\x198', '\a', '\x42', '\x2', '\x2', 
			'\x198', '\x199', '\x5', '\x34', '\x1B', '\x2', '\x199', '\x19A', '\a', 
			'\x16', '\x2', '\x2', '\x19A', '\x19B', '\x5', '\x32', '\x1A', '\x2', 
			'\x19B', '\x19C', '\a', '\x43', '\x2', '\x2', '\x19C', '\x19D', '\x5', 
			'.', '\x18', '\x2', '\x19D', '\x19E', '\b', '\x18', '\x1', '\x2', '\x19E', 
			'\x1C7', '\x3', '\x2', '\x2', '\x2', '\x19F', '\x1A0', '\a', '\x1A', '\x2', 
			'\x2', '\x1A0', '\x1A1', '\a', '-', '\x2', '\x2', '\x1A1', '\x1C7', '\b', 
			'\x18', '\x1', '\x2', '\x1A2', '\x1A3', '\a', '\x19', '\x2', '\x2', '\x1A3', 
			'\x1A4', '\a', '-', '\x2', '\x2', '\x1A4', '\x1C7', '\b', '\x18', '\x1', 
			'\x2', '\x1A5', '\x1A6', '\a', '\x12', '\x2', '\x2', '\x1A6', '\x1A7', 
			'\a', '\x42', '\x2', '\x2', '\x1A7', '\x1A8', '\x5', '\x32', '\x1A', '\x2', 
			'\x1A8', '\x1A9', '\a', '\x43', '\x2', '\x2', '\x1A9', '\x1AA', '\x5', 
			'.', '\x18', '\x2', '\x1AA', '\x1AF', '\b', '\x18', '\x1', '\x2', '\x1AB', 
			'\x1AC', '\a', '\x13', '\x2', '\x2', '\x1AC', '\x1AD', '\x5', '.', '\x18', 
			'\x2', '\x1AD', '\x1AE', '\b', '\x18', '\x1', '\x2', '\x1AE', '\x1B0', 
			'\x3', '\x2', '\x2', '\x2', '\x1AF', '\x1AB', '\x3', '\x2', '\x2', '\x2', 
			'\x1AF', '\x1B0', '\x3', '\x2', '\x2', '\x2', '\x1B0', '\x1C7', '\x3', 
			'\x2', '\x2', '\x2', '\x1B1', '\x1B2', '\x5', '\x32', '\x1A', '\x2', '\x1B2', 
			'\x1B3', '\a', '.', '\x2', '\x2', '\x1B3', '\x1B4', '\x5', '\x32', '\x1A', 
			'\x2', '\x1B4', '\x1B5', '\a', '-', '\x2', '\x2', '\x1B5', '\x1B6', '\b', 
			'\x18', '\x1', '\x2', '\x1B6', '\x1C7', '\x3', '\x2', '\x2', '\x2', '\x1B7', 
			'\x1B8', '\a', '\x1D', '\x2', '\x2', '\x1B8', '\x1B9', '\x5', '\x32', 
			'\x1A', '\x2', '\x1B9', '\x1BA', '\a', '-', '\x2', '\x2', '\x1BA', '\x1BB', 
			'\b', '\x18', '\x1', '\x2', '\x1BB', '\x1C7', '\x3', '\x2', '\x2', '\x2', 
			'\x1BC', '\x1BD', '\a', '\x1D', '\x2', '\x2', '\x1BD', '\x1BE', '\a', 
			'-', '\x2', '\x2', '\x1BE', '\x1C7', '\b', '\x18', '\x1', '\x2', '\x1BF', 
			'\x1C0', '\x5', '\x30', '\x19', '\x2', '\x1C0', '\x1C1', '\b', '\x18', 
			'\x1', '\x2', '\x1C1', '\x1C7', '\x3', '\x2', '\x2', '\x2', '\x1C2', '\x1C3', 
			'\x5', '(', '\x15', '\x2', '\x1C3', '\x1C4', '\a', '-', '\x2', '\x2', 
			'\x1C4', '\x1C5', '\b', '\x18', '\x1', '\x2', '\x1C5', '\x1C7', '\x3', 
			'\x2', '\x2', '\x2', '\x1C6', '\x175', '\x3', '\x2', '\x2', '\x2', '\x1C6', 
			'\x185', '\x3', '\x2', '\x2', '\x2', '\x1C6', '\x18C', '\x3', '\x2', '\x2', 
			'\x2', '\x1C6', '\x196', '\x3', '\x2', '\x2', '\x2', '\x1C6', '\x19F', 
			'\x3', '\x2', '\x2', '\x2', '\x1C6', '\x1A2', '\x3', '\x2', '\x2', '\x2', 
			'\x1C6', '\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1C6', '\x1B1', '\x3', 
			'\x2', '\x2', '\x2', '\x1C6', '\x1B7', '\x3', '\x2', '\x2', '\x2', '\x1C6', 
			'\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1C6', '\x1BF', '\x3', '\x2', '\x2', 
			'\x2', '\x1C6', '\x1C2', '\x3', '\x2', '\x2', '\x2', '\x1C7', '/', '\x3', 
			'\x2', '\x2', '\x2', '\x1C8', '\x1C9', '\a', '\x1E', '\x2', '\x2', '\x1C9', 
			'\x1CA', '\a', '\x42', '\x2', '\x2', '\x1CA', '\x1CB', '\x5', '\x32', 
			'\x1A', '\x2', '\x1CB', '\x1CC', '\a', '\x43', '\x2', '\x2', '\x1CC', 
			'\x1CD', '\a', '-', '\x2', '\x2', '\x1CD', '\x1CE', '\b', '\x19', '\x1', 
			'\x2', '\x1CE', '\x1D7', '\x3', '\x2', '\x2', '\x2', '\x1CF', '\x1D0', 
			'\a', '\x1F', '\x2', '\x2', '\x1D0', '\x1D1', '\a', '\x42', '\x2', '\x2', 
			'\x1D1', '\x1D2', '\x5', '\x32', '\x1A', '\x2', '\x1D2', '\x1D3', '\a', 
			'\x43', '\x2', '\x2', '\x1D3', '\x1D4', '\a', '-', '\x2', '\x2', '\x1D4', 
			'\x1D5', '\b', '\x19', '\x1', '\x2', '\x1D5', '\x1D7', '\x3', '\x2', '\x2', 
			'\x2', '\x1D6', '\x1C8', '\x3', '\x2', '\x2', '\x2', '\x1D6', '\x1CF', 
			'\x3', '\x2', '\x2', '\x2', '\x1D7', '\x31', '\x3', '\x2', '\x2', '\x2', 
			'\x1D8', '\x1D9', '\b', '\x1A', '\x1', '\x2', '\x1D9', '\x1DA', '\x5', 
			'\x34', '\x1B', '\x2', '\x1DA', '\x1DB', '\b', '\x1A', '\x1', '\x2', '\x1DB', 
			'\x1FF', '\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1DD', '\x5', '\x36', 
			'\x1C', '\x2', '\x1DD', '\x1DE', '\b', '\x1A', '\x1', '\x2', '\x1DE', 
			'\x1FF', '\x3', '\x2', '\x2', '\x2', '\x1DF', '\x1E0', '\x5', '(', '\x15', 
			'\x2', '\x1E0', '\x1E1', '\b', '\x1A', '\x1', '\x2', '\x1E1', '\x1FF', 
			'\x3', '\x2', '\x2', '\x2', '\x1E2', '\x1E3', '\a', '\x42', '\x2', '\x2', 
			'\x1E3', '\x1E4', '\x5', '\x32', '\x1A', '\x2', '\x1E4', '\x1E5', '\a', 
			'\x43', '\x2', '\x2', '\x1E5', '\x1E6', '\b', '\x1A', '\x1', '\x2', '\x1E6', 
			'\x1FF', '\x3', '\x2', '\x2', '\x2', '\x1E7', '\x1E8', '\a', '\x1B', '\x2', 
			'\x2', '\x1E8', '\x1E9', '\a', 'R', '\x2', '\x2', '\x1E9', '\x1FF', '\b', 
			'\x1A', '\x1', '\x2', '\x1EA', '\x1EB', '\a', ')', '\x2', '\x2', '\x1EB', 
			'\x1EC', '\a', '\x42', '\x2', '\x2', '\x1EC', '\x1ED', '\x5', '\b', '\x5', 
			'\x2', '\x1ED', '\x1EE', '\a', '\x43', '\x2', '\x2', '\x1EE', '\x1EF', 
			'\b', '\x1A', '\x1', '\x2', '\x1EF', '\x1FF', '\x3', '\x2', '\x2', '\x2', 
			'\x1F0', '\x1F1', '\a', '\x35', '\x2', '\x2', '\x1F1', '\x1F2', '\x5', 
			'\x32', '\x1A', '\n', '\x1F2', '\x1F3', '\b', '\x1A', '\x1', '\x2', '\x1F3', 
			'\x1FF', '\x3', '\x2', '\x2', '\x2', '\x1F4', '\x1F5', '\a', '=', '\x2', 
			'\x2', '\x1F5', '\x1F6', '\x5', '\x32', '\x1A', '\t', '\x1F6', '\x1F7', 
			'\b', '\x1A', '\x1', '\x2', '\x1F7', '\x1FF', '\x3', '\x2', '\x2', '\x2', 
			'\x1F8', '\x1F9', '\a', '\x42', '\x2', '\x2', '\x1F9', '\x1FA', '\x5', 
			'\x14', '\v', '\x2', '\x1FA', '\x1FB', '\a', '\x43', '\x2', '\x2', '\x1FB', 
			'\x1FC', '\x5', '\x32', '\x1A', '\x6', '\x1FC', '\x1FD', '\b', '\x1A', 
			'\x1', '\x2', '\x1FD', '\x1FF', '\x3', '\x2', '\x2', '\x2', '\x1FE', '\x1D8', 
			'\x3', '\x2', '\x2', '\x2', '\x1FE', '\x1DC', '\x3', '\x2', '\x2', '\x2', 
			'\x1FE', '\x1DF', '\x3', '\x2', '\x2', '\x2', '\x1FE', '\x1E2', '\x3', 
			'\x2', '\x2', '\x2', '\x1FE', '\x1E7', '\x3', '\x2', '\x2', '\x2', '\x1FE', 
			'\x1EA', '\x3', '\x2', '\x2', '\x2', '\x1FE', '\x1F0', '\x3', '\x2', '\x2', 
			'\x2', '\x1FE', '\x1F4', '\x3', '\x2', '\x2', '\x2', '\x1FE', '\x1F8', 
			'\x3', '\x2', '\x2', '\x2', '\x1FF', '\x227', '\x3', '\x2', '\x2', '\x2', 
			'\x200', '\x201', '\f', '\b', '\x2', '\x2', '\x201', '\x202', '\t', '\x3', 
			'\x2', '\x2', '\x202', '\x203', '\x5', '\x32', '\x1A', '\t', '\x203', 
			'\x204', '\b', '\x1A', '\x1', '\x2', '\x204', '\x226', '\x3', '\x2', '\x2', 
			'\x2', '\x205', '\x206', '\f', '\a', '\x2', '\x2', '\x206', '\x207', '\t', 
			'\x4', '\x2', '\x2', '\x207', '\x208', '\x5', '\x32', '\x1A', '\b', '\x208', 
			'\x209', '\b', '\x1A', '\x1', '\x2', '\x209', '\x226', '\x3', '\x2', '\x2', 
			'\x2', '\x20A', '\x20B', '\f', '\x5', '\x2', '\x2', '\x20B', '\x20C', 
			'\t', '\x5', '\x2', '\x2', '\x20C', '\x20D', '\x5', '\x32', '\x1A', '\x6', 
			'\x20D', '\x20E', '\b', '\x1A', '\x1', '\x2', '\x20E', '\x226', '\x3', 
			'\x2', '\x2', '\x2', '\x20F', '\x210', '\f', '\x4', '\x2', '\x2', '\x210', 
			'\x211', '\t', '\x6', '\x2', '\x2', '\x211', '\x212', '\x5', '\x32', '\x1A', 
			'\x5', '\x212', '\x213', '\b', '\x1A', '\x1', '\x2', '\x213', '\x226', 
			'\x3', '\x2', '\x2', '\x2', '\x214', '\x215', '\f', '\x3', '\x2', '\x2', 
			'\x215', '\x216', '\a', '\x33', '\x2', '\x2', '\x216', '\x217', '\x5', 
			'\x32', '\x1A', '\x2', '\x217', '\x218', '\a', ',', '\x2', '\x2', '\x218', 
			'\x219', '\x5', '\x32', '\x1A', '\x4', '\x219', '\x21A', '\b', '\x1A', 
			'\x1', '\x2', '\x21A', '\x226', '\x3', '\x2', '\x2', '\x2', '\x21B', '\x21C', 
			'\f', '\xE', '\x2', '\x2', '\x21C', '\x21D', '\a', '@', '\x2', '\x2', 
			'\x21D', '\x21E', '\x5', '\x32', '\x1A', '\x2', '\x21E', '\x21F', '\a', 
			'\x41', '\x2', '\x2', '\x21F', '\x220', '\b', '\x1A', '\x1', '\x2', '\x220', 
			'\x226', '\x3', '\x2', '\x2', '\x2', '\x221', '\x222', '\f', '\r', '\x2', 
			'\x2', '\x222', '\x223', '\a', '*', '\x2', '\x2', '\x223', '\x224', '\a', 
			'R', '\x2', '\x2', '\x224', '\x226', '\b', '\x1A', '\x1', '\x2', '\x225', 
			'\x200', '\x3', '\x2', '\x2', '\x2', '\x225', '\x205', '\x3', '\x2', '\x2', 
			'\x2', '\x225', '\x20A', '\x3', '\x2', '\x2', '\x2', '\x225', '\x20F', 
			'\x3', '\x2', '\x2', '\x2', '\x225', '\x214', '\x3', '\x2', '\x2', '\x2', 
			'\x225', '\x21B', '\x3', '\x2', '\x2', '\x2', '\x225', '\x221', '\x3', 
			'\x2', '\x2', '\x2', '\x226', '\x229', '\x3', '\x2', '\x2', '\x2', '\x227', 
			'\x225', '\x3', '\x2', '\x2', '\x2', '\x227', '\x228', '\x3', '\x2', '\x2', 
			'\x2', '\x228', '\x33', '\x3', '\x2', '\x2', '\x2', '\x229', '\x227', 
			'\x3', '\x2', '\x2', '\x2', '\x22A', '\x22B', '\a', 'R', '\x2', '\x2', 
			'\x22B', '\x22C', '\b', '\x1B', '\x1', '\x2', '\x22C', '\x35', '\x3', 
			'\x2', '\x2', '\x2', '\x22D', '\x22E', '\a', 'S', '\x2', '\x2', '\x22E', 
			'\x238', '\b', '\x1C', '\x1', '\x2', '\x22F', '\x230', '\a', 'T', '\x2', 
			'\x2', '\x230', '\x238', '\b', '\x1C', '\x1', '\x2', '\x231', '\x232', 
			'\a', 'U', '\x2', '\x2', '\x232', '\x238', '\b', '\x1C', '\x1', '\x2', 
			'\x233', '\x234', '\a', 'V', '\x2', '\x2', '\x234', '\x238', '\b', '\x1C', 
			'\x1', '\x2', '\x235', '\x236', '\a', 'W', '\x2', '\x2', '\x236', '\x238', 
			'\b', '\x1C', '\x1', '\x2', '\x237', '\x22D', '\x3', '\x2', '\x2', '\x2', 
			'\x237', '\x22F', '\x3', '\x2', '\x2', '\x2', '\x237', '\x231', '\x3', 
			'\x2', '\x2', '\x2', '\x237', '\x233', '\x3', '\x2', '\x2', '\x2', '\x237', 
			'\x235', '\x3', '\x2', '\x2', '\x2', '\x238', '\x37', '\x3', '\x2', '\x2', 
			'\x2', '(', '=', '\x45', 'I', 'P', '\x62', 's', '\x80', '\x85', '\x8C', 
			'\x97', '\x99', '\xA9', '\xB6', '\xBB', '\xC2', '\xD1', '\xD4', '\xE0', 
			'\xF0', '\x106', '\x10E', '\x119', '\x12C', '\x140', '\x154', '\x157', 
			'\x165', '\x167', '\x173', '\x17E', '\x180', '\x1AF', '\x1C6', '\x1D6', 
			'\x1FE', '\x225', '\x227', '\x237',
		};

		public static readonly ATN _ATN =
			new ATNDeserializer().Deserialize(_serializedATN);


	}
}

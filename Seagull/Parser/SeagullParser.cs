//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Parser/Seagull.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419



    using System.Collections.Generic;
    
	using Seagull.AST;
	using Seagull.Parser;
	
	using Seagull.AST.Expressions;
	using Seagull.AST.Expressions.Binary;
	using Seagull.AST.Expressions.Literals;
	
	using Seagull.AST.Statements;
	using Seagull.AST.Statements.Definitions;
	
	using Seagull.AST.Types;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class SeagullParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, ID=36, INT_CONSTANT=37, REAL_CONSTANT=38, 
		CHAR_CONSTANT=39, SL_COMMENT=40, ML_COMMENT=41, ML_COMMENT_N=42, BLANKS=43;
	public const int
		RULE_program = 0, RULE_type = 1, RULE_primitive = 2, RULE_voidType = 3, 
		RULE_definition = 4, RULE_variableDef = 5, RULE_funcInvocation = 6, RULE_block = 7, 
		RULE_fnBlock = 8, RULE_statement = 9, RULE_readPrint = 10, RULE_variable = 11, 
		RULE_expression = 12;
	public static readonly string[] ruleNames = {
		"program", "type", "primitive", "voidType", "definition", "variableDef", 
		"funcInvocation", "block", "fnBlock", "statement", "readPrint", "variable", 
		"expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'['", "']'", "'int'", "'char'", "'double'", "'void'", "':'", "';'", 
		"'('", "','", "')'", "'{'", "'}'", "'while'", "'if'", "'else'", "'='", 
		"'return'", "'print'", "'read'", "'.'", "'-'", "'!'", "'*'", "'/'", "'%'", 
		"'+'", "'>'", "'<'", "'>='", "'<='", "'=='", "'!='", "'&&'", "'||'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"ID", "INT_CONSTANT", "REAL_CONSTANT", "CHAR_CONSTANT", "SL_COMMENT", 
		"ML_COMMENT", "ML_COMMENT_N", "BLANKS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Seagull.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SeagullParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SeagullParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SeagullParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public Program Ast;
		public List<IDefinition> Def = new List<IDefinition>();
		public DefinitionContext d;
		public ITerminalNode Eof() { return GetToken(SeagullParser.Eof, 0); }
		public DefinitionContext[] definition() {
			return GetRuleContexts<DefinitionContext>();
		}
		public DefinitionContext definition(int i) {
			return GetRuleContext<DefinitionContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 26; _localctx.d = definition();
				 _localctx.Def.AddRange(_localctx.d.Ast); 
				}
				}
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 34; Match(Eof);
			 _localctx.Ast =  new Program(0, 0, _localctx.Def); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public IType Ast;
		public TypeContext t;
		public PrimitiveContext _primitive;
		public IToken i;
		public IToken i2;
		public PrimitiveContext primitive() {
			return GetRuleContext<PrimitiveContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode[] INT_CONSTANT() { return GetTokens(SeagullParser.INT_CONSTANT); }
		public ITerminalNode INT_CONSTANT(int i) {
			return GetToken(SeagullParser.INT_CONSTANT, i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	}

	[RuleVersion(0)]
	public TypeContext type() {
		return type(0);
	}

	private TypeContext type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeContext _localctx = new TypeContext(Context, _parentState);
		TypeContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_type, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 38; _localctx._primitive = primitive();
			 _localctx.Ast =  _localctx._primitive.Ast; 
			}
			Context.Stop = TokenStream.LT(-1);
			State = 57;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypeContext(_parentctx, _parentState);
					_localctx.t = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_type);
					State = 41;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 42; Match(T__0);
					State = 43; _localctx.i = Match(INT_CONSTANT);
					State = 44; Match(T__1);
					 _localctx.Ast =  ArrayType.BuildArray(int.Parse((_localctx.i!=null?_localctx.i.Text:null)), _localctx.t.Ast); 
					State = 52;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 46; Match(T__0);
							State = 47; _localctx.i2 = Match(INT_CONSTANT);
							State = 48; Match(T__1);
							 _localctx.Ast =  ArrayType.BuildArray( int.Parse((_localctx.i2!=null?_localctx.i2.Text:null)), _localctx.Ast); 
							}
							} 
						}
						State = 54;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
					}
					}
					} 
				}
				State = 59;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimitiveContext : ParserRuleContext {
		public IType Ast;
		public IToken i;
		public IToken c;
		public IToken d;
		public PrimitiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitive; } }
	}

	[RuleVersion(0)]
	public PrimitiveContext primitive() {
		PrimitiveContext _localctx = new PrimitiveContext(Context, State);
		EnterRule(_localctx, 4, RULE_primitive);
		try {
			State = 66;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 60; _localctx.i = Match(T__2);
				 _localctx.Ast =  new IntType(_localctx.i.GetLine(), _localctx.i.GetCol()); 
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 62; _localctx.c = Match(T__3);
				 _localctx.Ast =  new CharType(_localctx.c.GetLine(), _localctx.c.GetCol()); 
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 3);
				{
				State = 64; _localctx.d = Match(T__4);
				 _localctx.Ast =  new DoubleType(_localctx.d.GetLine(), _localctx.d.GetCol()); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoidTypeContext : ParserRuleContext {
		public IType Ast;
		public IToken v;
		public VoidTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voidType; } }
	}

	[RuleVersion(0)]
	public VoidTypeContext voidType() {
		VoidTypeContext _localctx = new VoidTypeContext(Context, State);
		EnterRule(_localctx, 6, RULE_voidType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; _localctx.v = Match(T__5);
			 _localctx.Ast =  new VoidType(_localctx.v.GetLine(), _localctx.v.GetCol()); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		public List<IDefinition> Ast = new List<IDefinition>();
		public VariableDefContext _variableDef;
		public VariableDefContext variableDef() {
			return GetRuleContext<VariableDefContext>(0);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 8, RULE_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71; _localctx._variableDef = variableDef();
			 _localctx.Ast.AddRange(_localctx._variableDef.Ast); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDefContext : ParserRuleContext {
		public List<VariableDefinition> Ast = new List<VariableDefinition>();
		public IToken n;
		public TypeContext t;
		public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public VariableDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDef; } }
	}

	[RuleVersion(0)]
	public VariableDefContext variableDef() {
		VariableDefContext _localctx = new VariableDefContext(Context, State);
		EnterRule(_localctx, 10, RULE_variableDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; _localctx.n = Match(ID);
			State = 75; Match(T__6);
			State = 76; _localctx.t = type(0);
			State = 77; Match(T__7);
			 _localctx.Ast.Add(new VariableDefinition(_localctx.t.Ast.Line, _localctx.t.Ast.Column, _localctx.n.GetText(), _localctx.t.Ast)); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncInvocationContext : ParserRuleContext {
		public FunctionInvocation Ast;
		public List<IExpression> arguments = new List<IExpression>();
		public VariableContext func;
		public ExpressionContext e1;
		public ExpressionContext e2;
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FuncInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcInvocation; } }
	}

	[RuleVersion(0)]
	public FuncInvocationContext funcInvocation() {
		FuncInvocationContext _localctx = new FuncInvocationContext(Context, State);
		EnterRule(_localctx, 12, RULE_funcInvocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; _localctx.func = variable();
			State = 81; Match(T__8);
			State = 93;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__21) | (1L << T__22) | (1L << ID) | (1L << INT_CONSTANT) | (1L << REAL_CONSTANT) | (1L << CHAR_CONSTANT))) != 0)) {
				{
				State = 82; _localctx.e1 = expression(0);
				 _localctx.arguments.Add(_localctx.e1.Ast); 
				State = 90;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__9) {
					{
					{
					State = 84; Match(T__9);
					State = 85; _localctx.e2 = expression(0);
					 _localctx.arguments.Add(_localctx.e2.Ast); 
					}
					}
					State = 92;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 95; Match(T__10);
			 _localctx.Ast =  new FunctionInvocation(_localctx.func.Ast, _localctx.arguments); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public List<IStatement> Ast = new List<IStatement>();
		public StatementContext st1;
		public StatementContext st2;
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 14, RULE_block);
		int _la;
		try {
			State = 111;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__8:
			case T__13:
			case T__14:
			case T__17:
			case T__18:
			case T__19:
			case T__21:
			case T__22:
			case ID:
			case INT_CONSTANT:
			case REAL_CONSTANT:
			case CHAR_CONSTANT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 98; _localctx.st1 = statement();
				 _localctx.Ast.AddRange(_localctx.st1.Ast); 
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 2);
				{
				State = 101; Match(T__11);
				State = 107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__13) | (1L << T__14) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__21) | (1L << T__22) | (1L << ID) | (1L << INT_CONSTANT) | (1L << REAL_CONSTANT) | (1L << CHAR_CONSTANT))) != 0)) {
					{
					{
					State = 102; _localctx.st2 = statement();
					 _localctx.Ast.AddRange(_localctx.st2.Ast); 
					}
					}
					State = 109;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 110; Match(T__12);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FnBlockContext : ParserRuleContext {
		public List<IStatement> Ast = new List<IStatement>();
		public VariableDefContext _variableDef;
		public StatementContext _statement;
		public VariableDefContext[] variableDef() {
			return GetRuleContexts<VariableDefContext>();
		}
		public VariableDefContext variableDef(int i) {
			return GetRuleContext<VariableDefContext>(i);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FnBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fnBlock; } }
	}

	[RuleVersion(0)]
	public FnBlockContext fnBlock() {
		FnBlockContext _localctx = new FnBlockContext(Context, State);
		EnterRule(_localctx, 16, RULE_fnBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 113; Match(T__11);
			State = 119;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 114; _localctx._variableDef = variableDef();
					 _localctx.Ast.AddRange(_localctx._variableDef.Ast); 
					}
					} 
				}
				State = 121;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__13) | (1L << T__14) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__21) | (1L << T__22) | (1L << ID) | (1L << INT_CONSTANT) | (1L << REAL_CONSTANT) | (1L << CHAR_CONSTANT))) != 0)) {
				{
				{
				State = 122; _localctx._statement = statement();
				 _localctx.Ast.AddRange(_localctx._statement.Ast); 
				}
				}
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 130; Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public List<IStatement> Ast = new List<IStatement>();
		public IToken w;
		public ExpressionContext cond;
		public BlockContext b;
		public IToken i;
		public BlockContext b1;
		public BlockContext b2;
		public ExpressionContext e1;
		public ExpressionContext e2;
		public IToken r;
		public ExpressionContext e;
		public ReadPrintContext _readPrint;
		public FuncInvocationContext _funcInvocation;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ReadPrintContext readPrint() {
			return GetRuleContext<ReadPrintContext>(0);
		}
		public FuncInvocationContext funcInvocation() {
			return GetRuleContext<FuncInvocationContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_statement);
		try {
			State = 169;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 132; _localctx.w = Match(T__13);
				State = 133; Match(T__8);
				State = 134; _localctx.cond = expression(0);
				State = 135; Match(T__10);
				State = 136; _localctx.b = block();
				 _localctx.Ast.Add(new WhileLoop(_localctx.w.GetLine(), _localctx.w.GetCol(), _localctx.cond.Ast, _localctx.b.Ast)); 
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 139; _localctx.i = Match(T__14);
				State = 140; Match(T__8);
				State = 141; _localctx.cond = expression(0);
				State = 142; Match(T__10);
				State = 143; _localctx.b1 = block();
				 _localctx.Ast.Add(new IfStatement(_localctx.i.GetLine(), _localctx.i.GetCol(), _localctx.cond.Ast, _localctx.b1.Ast)); 
				State = 149;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
				case 1:
					{
					State = 145; Match(T__15);
					State = 146; _localctx.b2 = block();
					 ((IfStatement)_localctx.Ast[0]).Else = _localctx.b2.Ast; 
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 151; _localctx.e1 = expression(0);
				State = 152; Match(T__16);
				State = 153; _localctx.e2 = expression(0);
				State = 154; Match(T__7);
				 _localctx.Ast.Add(new Assignment(_localctx.e1.Ast, _localctx.e2.Ast)); 
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 157; _localctx.r = Match(T__17);
				State = 158; _localctx.e = expression(0);
				State = 159; Match(T__7);
				 _localctx.Ast.Add(new Return(_localctx.r.GetLine(), _localctx.r.GetCol(), _localctx.e.Ast)); 
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 162; _localctx._readPrint = readPrint();
				 _localctx.Ast.Add(_localctx._readPrint.Ast); 
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 165; _localctx._funcInvocation = funcInvocation();
				State = 166; Match(T__7);
				 _localctx.Ast.Add(_localctx._funcInvocation.Ast); 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadPrintContext : ParserRuleContext {
		public IStatement Ast;
		public IToken p;
		public ExpressionContext e;
		public IToken r;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReadPrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_readPrint; } }
	}

	[RuleVersion(0)]
	public ReadPrintContext readPrint() {
		ReadPrintContext _localctx = new ReadPrintContext(Context, State);
		EnterRule(_localctx, 20, RULE_readPrint);
		try {
			State = 185;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__18:
				EnterOuterAlt(_localctx, 1);
				{
				State = 171; _localctx.p = Match(T__18);
				State = 172; Match(T__8);
				State = 173; _localctx.e = expression(0);
				State = 174; Match(T__10);
				State = 175; Match(T__7);
				 _localctx.Ast =  new Print(_localctx.p.GetLine(), _localctx.p.GetCol(), _localctx.e.Ast); 
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 2);
				{
				State = 178; _localctx.r = Match(T__19);
				State = 179; Match(T__8);
				State = 180; _localctx.e = expression(0);
				State = 181; Match(T__10);
				State = 182; Match(T__7);
				 _localctx.Ast =  new Read(_localctx.r.GetLine(), _localctx.r.GetCol(), _localctx.e.Ast); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public Variable Ast;
		public IToken _ID;
		public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 22, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187; _localctx._ID = Match(ID);
			 _localctx.Ast =  new Variable(_localctx._ID.GetLine(), _localctx._ID.GetCol(), (_localctx._ID!=null?_localctx._ID.Text:null)); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public IExpression Ast;
		public ExpressionContext e1;
		public VariableContext _variable;
		public IToken i;
		public IToken r;
		public IToken c;
		public FuncInvocationContext _funcInvocation;
		public ExpressionContext e;
		public ExpressionContext _expression;
		public VariableContext var;
		public IToken att;
		public IToken um;
		public IToken not;
		public IToken p;
		public PrimitiveContext t;
		public IToken op;
		public ExpressionContext e2;
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode INT_CONSTANT() { return GetToken(SeagullParser.INT_CONSTANT, 0); }
		public ITerminalNode REAL_CONSTANT() { return GetToken(SeagullParser.REAL_CONSTANT, 0); }
		public ITerminalNode CHAR_CONSTANT() { return GetToken(SeagullParser.CHAR_CONSTANT, 0); }
		public FuncInvocationContext funcInvocation() {
			return GetRuleContext<FuncInvocationContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ID() { return GetToken(SeagullParser.ID, 0); }
		public PrimitiveContext primitive() {
			return GetRuleContext<PrimitiveContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 191; _localctx._variable = variable();
				 _localctx.Ast =  _localctx._variable.Ast; 
				}
				break;
			case 2:
				{
				State = 194; _localctx.i = Match(INT_CONSTANT);
				 _localctx.Ast =  new IntLiteral(_localctx.i.GetLine(), _localctx.i.GetCol(), LexerHelper.LexemeToInt((_localctx.i!=null?_localctx.i.Text:null))); 
				}
				break;
			case 3:
				{
				State = 196; _localctx.r = Match(REAL_CONSTANT);
				 _localctx.Ast =  new DoubleLiteral(_localctx.r.GetLine(), _localctx.r.GetCol(), LexerHelper.LexemeToReal((_localctx.r!=null?_localctx.r.Text:null))); 
				}
				break;
			case 4:
				{
				State = 198; _localctx.c = Match(CHAR_CONSTANT);
				 _localctx.Ast =  new CharLiteral(_localctx.c.GetLine(), _localctx.c.GetCol(),LexerHelper.LexemeToChar((_localctx.c!=null?_localctx.c.Text:null))); 
				}
				break;
			case 5:
				{
				State = 200; _localctx._funcInvocation = funcInvocation();
				 _localctx.Ast =  _localctx._funcInvocation.Ast; 
				}
				break;
			case 6:
				{
				State = 203; Match(T__8);
				State = 204; _localctx.e = _localctx._expression = expression(0);
				State = 205; Match(T__10);
				 _localctx.Ast =  _localctx.e.Ast; 
				}
				break;
			case 7:
				{
				State = 208; _localctx.var = _localctx._variable = variable();
				State = 209; Match(T__20);
				State = 210; _localctx.att = Match(ID);
				 _localctx.Ast =  new AttributeAccess(_localctx.var.Ast, (_localctx.att!=null?_localctx.att.Text:null)); 
				}
				break;
			case 8:
				{
				State = 213; _localctx.um = Match(T__21);
				State = 214; _localctx._expression = expression(7);
				 _localctx.Ast =  new UnaryMinus(_localctx.um.GetLine(), _localctx.um.GetCol(), _localctx._expression.Ast); 
				}
				break;
			case 9:
				{
				State = 217; _localctx.not = Match(T__22);
				State = 218; _localctx._expression = expression(6);
				 _localctx.Ast =  new Negation(_localctx.not.GetLine(), _localctx.not.GetCol(), _localctx._expression.Ast); 
				}
				break;
			case 10:
				{
				State = 221; _localctx.p = Match(T__8);
				State = 222; _localctx.t = primitive();
				State = 223; Match(T__10);
				State = 224; _localctx.e = _localctx._expression = expression(3);
				 _localctx.Ast =  new Cast(_localctx.p.GetLine(), _localctx.p.GetCol(), _localctx.t.Ast, _localctx.e.Ast); 
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 257;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 255;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.e1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 229;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 230;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__23) | (1L << T__24) | (1L << T__25))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 231; _localctx.e2 = _localctx._expression = expression(6);
						 _localctx.Ast =  new Arithmetic((_localctx.op!=null?_localctx.op.Text:null), _localctx.e1.Ast, _localctx.e2.Ast); 
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.e1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 234;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 235;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__21 || _la==T__26) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 236; _localctx.e2 = _localctx._expression = expression(5);
						 _localctx.Ast =  new Arithmetic((_localctx.op!=null?_localctx.op.Text:null), _localctx.e1.Ast, _localctx.e2.Ast); 
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.e1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 239;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 240;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 241; _localctx.e2 = _localctx._expression = expression(3);
						 _localctx.Ast =  new Comparison((_localctx.op!=null?_localctx.op.Text:null), _localctx.e1.Ast, _localctx.e2.Ast); 
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.e1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 244;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 245;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__33 || _la==T__34) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 246; _localctx.e2 = _localctx._expression = expression(2);
						 _localctx.Ast =  new LogicalOperation((_localctx.op!=null?_localctx.op.Text:null), _localctx.e1.Ast, _localctx.e2.Ast); 
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.e1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 249;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 250; Match(T__0);
						State = 251; _localctx.e2 = _localctx._expression = expression(0);
						State = 252; Match(T__1);
						 _localctx.Ast =  new Indexing(_localctx.e1.Ast, _localctx.e2.Ast); 
						}
						break;
					}
					} 
				}
				State = 259;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return type_sempred((TypeContext)_localctx, predIndex);
		case 12: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool type_sempred(TypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 2);
		case 4: return Precpred(Context, 1);
		case 5: return Precpred(Context, 9);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '-', '\x107', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', ' ', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', '#', '\v', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 
		'\x35', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x38', '\v', '\x3', '\a', 
		'\x3', ':', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '=', '\v', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x5', '\x4', '\x45', '\n', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '[', '\n', '\b', '\f', '\b', 
		'\xE', '\b', '^', '\v', '\b', '\x5', '\b', '`', '\n', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', 'l', '\n', '\t', 
		'\f', '\t', '\xE', '\t', 'o', '\v', '\t', '\x3', '\t', '\x5', '\t', 'r', 
		'\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', 
		'\n', 'x', '\n', '\n', '\f', '\n', '\xE', '\n', '{', '\v', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\x80', '\n', '\n', '\f', 
		'\n', '\xE', '\n', '\x83', '\v', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x5', '\v', '\x98', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\xAC', 
		'\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\xBC', 
		'\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x5', '\xE', '\xE6', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\x102', 
		'\n', '\xE', '\f', '\xE', '\xE', '\xE', '\x105', '\v', '\xE', '\x3', '\xE', 
		'\x2', '\x4', '\x4', '\x1A', '\xF', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x2', '\x6', '\x3', 
		'\x2', '\x1A', '\x1C', '\x4', '\x2', '\x18', '\x18', '\x1D', '\x1D', '\x3', 
		'\x2', '\x1E', '#', '\x3', '\x2', '$', '%', '\x2', '\x119', '\x2', '!', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\'', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\x44', '\x3', '\x2', '\x2', '\x2', '\b', '\x46', '\x3', '\x2', '\x2', 
		'\x2', '\n', 'I', '\x3', '\x2', '\x2', '\x2', '\f', 'L', '\x3', '\x2', 
		'\x2', '\x2', '\xE', 'R', '\x3', '\x2', '\x2', '\x2', '\x10', 'q', '\x3', 
		'\x2', '\x2', '\x2', '\x12', 's', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\xAB', '\x3', '\x2', '\x2', '\x2', '\x16', '\xBB', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\xBD', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xE5', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\x1D', '\x5', '\n', '\x6', '\x2', '\x1D', 
		'\x1E', '\b', '\x2', '\x1', '\x2', '\x1E', ' ', '\x3', '\x2', '\x2', '\x2', 
		'\x1F', '\x1C', '\x3', '\x2', '\x2', '\x2', ' ', '#', '\x3', '\x2', '\x2', 
		'\x2', '!', '\x1F', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\x3', '\x2', 
		'\x2', '\x2', '\"', '$', '\x3', '\x2', '\x2', '\x2', '#', '!', '\x3', 
		'\x2', '\x2', '\x2', '$', '%', '\a', '\x2', '\x2', '\x3', '%', '&', '\b', 
		'\x2', '\x1', '\x2', '&', '\x3', '\x3', '\x2', '\x2', '\x2', '\'', '(', 
		'\b', '\x3', '\x1', '\x2', '(', ')', '\x5', '\x6', '\x4', '\x2', ')', 
		'*', '\b', '\x3', '\x1', '\x2', '*', ';', '\x3', '\x2', '\x2', '\x2', 
		'+', ',', '\f', '\x3', '\x2', '\x2', ',', '-', '\a', '\x3', '\x2', '\x2', 
		'-', '.', '\a', '\'', '\x2', '\x2', '.', '/', '\a', '\x4', '\x2', '\x2', 
		'/', '\x36', '\b', '\x3', '\x1', '\x2', '\x30', '\x31', '\a', '\x3', '\x2', 
		'\x2', '\x31', '\x32', '\a', '\'', '\x2', '\x2', '\x32', '\x33', '\a', 
		'\x4', '\x2', '\x2', '\x33', '\x35', '\b', '\x3', '\x1', '\x2', '\x34', 
		'\x30', '\x3', '\x2', '\x2', '\x2', '\x35', '\x38', '\x3', '\x2', '\x2', 
		'\x2', '\x36', '\x34', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x37', ':', '\x3', '\x2', '\x2', '\x2', '\x38', 
		'\x36', '\x3', '\x2', '\x2', '\x2', '\x39', '+', '\x3', '\x2', '\x2', 
		'\x2', ':', '=', '\x3', '\x2', '\x2', '\x2', ';', '\x39', '\x3', '\x2', 
		'\x2', '\x2', ';', '<', '\x3', '\x2', '\x2', '\x2', '<', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '=', ';', '\x3', '\x2', '\x2', '\x2', '>', '?', '\a', 
		'\x5', '\x2', '\x2', '?', '\x45', '\b', '\x4', '\x1', '\x2', '@', '\x41', 
		'\a', '\x6', '\x2', '\x2', '\x41', '\x45', '\b', '\x4', '\x1', '\x2', 
		'\x42', '\x43', '\a', '\a', '\x2', '\x2', '\x43', '\x45', '\b', '\x4', 
		'\x1', '\x2', '\x44', '>', '\x3', '\x2', '\x2', '\x2', '\x44', '@', '\x3', 
		'\x2', '\x2', '\x2', '\x44', '\x42', '\x3', '\x2', '\x2', '\x2', '\x45', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\a', '\b', '\x2', '\x2', 
		'G', 'H', '\b', '\x5', '\x1', '\x2', 'H', '\t', '\x3', '\x2', '\x2', '\x2', 
		'I', 'J', '\x5', '\f', '\a', '\x2', 'J', 'K', '\b', '\x6', '\x1', '\x2', 
		'K', '\v', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\a', '&', '\x2', '\x2', 
		'M', 'N', '\a', '\t', '\x2', '\x2', 'N', 'O', '\x5', '\x4', '\x3', '\x2', 
		'O', 'P', '\a', '\n', '\x2', '\x2', 'P', 'Q', '\b', '\a', '\x1', '\x2', 
		'Q', '\r', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x5', '\x18', '\r', 
		'\x2', 'S', '_', '\a', '\v', '\x2', '\x2', 'T', 'U', '\x5', '\x1A', '\xE', 
		'\x2', 'U', '\\', '\b', '\b', '\x1', '\x2', 'V', 'W', '\a', '\f', '\x2', 
		'\x2', 'W', 'X', '\x5', '\x1A', '\xE', '\x2', 'X', 'Y', '\b', '\b', '\x1', 
		'\x2', 'Y', '[', '\x3', '\x2', '\x2', '\x2', 'Z', 'V', '\x3', '\x2', '\x2', 
		'\x2', '[', '^', '\x3', '\x2', '\x2', '\x2', '\\', 'Z', '\x3', '\x2', 
		'\x2', '\x2', '\\', ']', '\x3', '\x2', '\x2', '\x2', ']', '`', '\x3', 
		'\x2', '\x2', '\x2', '^', '\\', '\x3', '\x2', '\x2', '\x2', '_', 'T', 
		'\x3', '\x2', '\x2', '\x2', '_', '`', '\x3', '\x2', '\x2', '\x2', '`', 
		'\x61', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\a', '\r', '\x2', 
		'\x2', '\x62', '\x63', '\b', '\b', '\x1', '\x2', '\x63', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\x64', '\x65', '\x5', '\x14', '\v', '\x2', '\x65', 
		'\x66', '\b', '\t', '\x1', '\x2', '\x66', 'r', '\x3', '\x2', '\x2', '\x2', 
		'g', 'm', '\a', '\xE', '\x2', '\x2', 'h', 'i', '\x5', '\x14', '\v', '\x2', 
		'i', 'j', '\b', '\t', '\x1', '\x2', 'j', 'l', '\x3', '\x2', '\x2', '\x2', 
		'k', 'h', '\x3', '\x2', '\x2', '\x2', 'l', 'o', '\x3', '\x2', '\x2', '\x2', 
		'm', 'k', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\x3', '\x2', '\x2', '\x2', 
		'n', 'p', '\x3', '\x2', '\x2', '\x2', 'o', 'm', '\x3', '\x2', '\x2', '\x2', 
		'p', 'r', '\a', '\xF', '\x2', '\x2', 'q', '\x64', '\x3', '\x2', '\x2', 
		'\x2', 'q', 'g', '\x3', '\x2', '\x2', '\x2', 'r', '\x11', '\x3', '\x2', 
		'\x2', '\x2', 's', 'y', '\a', '\xE', '\x2', '\x2', 't', 'u', '\x5', '\f', 
		'\a', '\x2', 'u', 'v', '\b', '\n', '\x1', '\x2', 'v', 'x', '\x3', '\x2', 
		'\x2', '\x2', 'w', 't', '\x3', '\x2', '\x2', '\x2', 'x', '{', '\x3', '\x2', 
		'\x2', '\x2', 'y', 'w', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\x3', '\x2', 
		'\x2', '\x2', 'z', '\x81', '\x3', '\x2', '\x2', '\x2', '{', 'y', '\x3', 
		'\x2', '\x2', '\x2', '|', '}', '\x5', '\x14', '\v', '\x2', '}', '~', '\b', 
		'\n', '\x1', '\x2', '~', '\x80', '\x3', '\x2', '\x2', '\x2', '\x7F', '|', 
		'\x3', '\x2', '\x2', '\x2', '\x80', '\x83', '\x3', '\x2', '\x2', '\x2', 
		'\x81', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x81', '\x82', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x84', '\x3', '\x2', '\x2', '\x2', '\x83', '\x81', 
		'\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\a', '\xF', '\x2', '\x2', 
		'\x85', '\x13', '\x3', '\x2', '\x2', '\x2', '\x86', '\x87', '\a', '\x10', 
		'\x2', '\x2', '\x87', '\x88', '\a', '\v', '\x2', '\x2', '\x88', '\x89', 
		'\x5', '\x1A', '\xE', '\x2', '\x89', '\x8A', '\a', '\r', '\x2', '\x2', 
		'\x8A', '\x8B', '\x5', '\x10', '\t', '\x2', '\x8B', '\x8C', '\b', '\v', 
		'\x1', '\x2', '\x8C', '\xAC', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', 
		'\a', '\x11', '\x2', '\x2', '\x8E', '\x8F', '\a', '\v', '\x2', '\x2', 
		'\x8F', '\x90', '\x5', '\x1A', '\xE', '\x2', '\x90', '\x91', '\a', '\r', 
		'\x2', '\x2', '\x91', '\x92', '\x5', '\x10', '\t', '\x2', '\x92', '\x97', 
		'\b', '\v', '\x1', '\x2', '\x93', '\x94', '\a', '\x12', '\x2', '\x2', 
		'\x94', '\x95', '\x5', '\x10', '\t', '\x2', '\x95', '\x96', '\b', '\v', 
		'\x1', '\x2', '\x96', '\x98', '\x3', '\x2', '\x2', '\x2', '\x97', '\x93', 
		'\x3', '\x2', '\x2', '\x2', '\x97', '\x98', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\xAC', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', '\x5', '\x1A', 
		'\xE', '\x2', '\x9A', '\x9B', '\a', '\x13', '\x2', '\x2', '\x9B', '\x9C', 
		'\x5', '\x1A', '\xE', '\x2', '\x9C', '\x9D', '\a', '\n', '\x2', '\x2', 
		'\x9D', '\x9E', '\b', '\v', '\x1', '\x2', '\x9E', '\xAC', '\x3', '\x2', 
		'\x2', '\x2', '\x9F', '\xA0', '\a', '\x14', '\x2', '\x2', '\xA0', '\xA1', 
		'\x5', '\x1A', '\xE', '\x2', '\xA1', '\xA2', '\a', '\n', '\x2', '\x2', 
		'\xA2', '\xA3', '\b', '\v', '\x1', '\x2', '\xA3', '\xAC', '\x3', '\x2', 
		'\x2', '\x2', '\xA4', '\xA5', '\x5', '\x16', '\f', '\x2', '\xA5', '\xA6', 
		'\b', '\v', '\x1', '\x2', '\xA6', '\xAC', '\x3', '\x2', '\x2', '\x2', 
		'\xA7', '\xA8', '\x5', '\xE', '\b', '\x2', '\xA8', '\xA9', '\a', '\n', 
		'\x2', '\x2', '\xA9', '\xAA', '\b', '\v', '\x1', '\x2', '\xAA', '\xAC', 
		'\x3', '\x2', '\x2', '\x2', '\xAB', '\x86', '\x3', '\x2', '\x2', '\x2', 
		'\xAB', '\x8D', '\x3', '\x2', '\x2', '\x2', '\xAB', '\x99', '\x3', '\x2', 
		'\x2', '\x2', '\xAB', '\x9F', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xA4', 
		'\x3', '\x2', '\x2', '\x2', '\xAB', '\xA7', '\x3', '\x2', '\x2', '\x2', 
		'\xAC', '\x15', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', '\a', '\x15', 
		'\x2', '\x2', '\xAE', '\xAF', '\a', '\v', '\x2', '\x2', '\xAF', '\xB0', 
		'\x5', '\x1A', '\xE', '\x2', '\xB0', '\xB1', '\a', '\r', '\x2', '\x2', 
		'\xB1', '\xB2', '\a', '\n', '\x2', '\x2', '\xB2', '\xB3', '\b', '\f', 
		'\x1', '\x2', '\xB3', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', 
		'\a', '\x16', '\x2', '\x2', '\xB5', '\xB6', '\a', '\v', '\x2', '\x2', 
		'\xB6', '\xB7', '\x5', '\x1A', '\xE', '\x2', '\xB7', '\xB8', '\a', '\r', 
		'\x2', '\x2', '\xB8', '\xB9', '\a', '\n', '\x2', '\x2', '\xB9', '\xBA', 
		'\b', '\f', '\x1', '\x2', '\xBA', '\xBC', '\x3', '\x2', '\x2', '\x2', 
		'\xBB', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xB4', '\x3', '\x2', 
		'\x2', '\x2', '\xBC', '\x17', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', 
		'\a', '&', '\x2', '\x2', '\xBE', '\xBF', '\b', '\r', '\x1', '\x2', '\xBF', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC1', '\b', '\xE', '\x1', 
		'\x2', '\xC1', '\xC2', '\x5', '\x18', '\r', '\x2', '\xC2', '\xC3', '\b', 
		'\xE', '\x1', '\x2', '\xC3', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xC4', 
		'\xC5', '\a', '\'', '\x2', '\x2', '\xC5', '\xE6', '\b', '\xE', '\x1', 
		'\x2', '\xC6', '\xC7', '\a', '(', '\x2', '\x2', '\xC7', '\xE6', '\b', 
		'\xE', '\x1', '\x2', '\xC8', '\xC9', '\a', ')', '\x2', '\x2', '\xC9', 
		'\xE6', '\b', '\xE', '\x1', '\x2', '\xCA', '\xCB', '\x5', '\xE', '\b', 
		'\x2', '\xCB', '\xCC', '\b', '\xE', '\x1', '\x2', '\xCC', '\xE6', '\x3', 
		'\x2', '\x2', '\x2', '\xCD', '\xCE', '\a', '\v', '\x2', '\x2', '\xCE', 
		'\xCF', '\x5', '\x1A', '\xE', '\x2', '\xCF', '\xD0', '\a', '\r', '\x2', 
		'\x2', '\xD0', '\xD1', '\b', '\xE', '\x1', '\x2', '\xD1', '\xE6', '\x3', 
		'\x2', '\x2', '\x2', '\xD2', '\xD3', '\x5', '\x18', '\r', '\x2', '\xD3', 
		'\xD4', '\a', '\x17', '\x2', '\x2', '\xD4', '\xD5', '\a', '&', '\x2', 
		'\x2', '\xD5', '\xD6', '\b', '\xE', '\x1', '\x2', '\xD6', '\xE6', '\x3', 
		'\x2', '\x2', '\x2', '\xD7', '\xD8', '\a', '\x18', '\x2', '\x2', '\xD8', 
		'\xD9', '\x5', '\x1A', '\xE', '\t', '\xD9', '\xDA', '\b', '\xE', '\x1', 
		'\x2', '\xDA', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDC', '\a', 
		'\x19', '\x2', '\x2', '\xDC', '\xDD', '\x5', '\x1A', '\xE', '\b', '\xDD', 
		'\xDE', '\b', '\xE', '\x1', '\x2', '\xDE', '\xE6', '\x3', '\x2', '\x2', 
		'\x2', '\xDF', '\xE0', '\a', '\v', '\x2', '\x2', '\xE0', '\xE1', '\x5', 
		'\x6', '\x4', '\x2', '\xE1', '\xE2', '\a', '\r', '\x2', '\x2', '\xE2', 
		'\xE3', '\x5', '\x1A', '\xE', '\x5', '\xE3', '\xE4', '\b', '\xE', '\x1', 
		'\x2', '\xE4', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xC0', '\x3', 
		'\x2', '\x2', '\x2', '\xE5', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xE5', 
		'\xC6', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xC8', '\x3', '\x2', '\x2', 
		'\x2', '\xE5', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xCD', '\x3', 
		'\x2', '\x2', '\x2', '\xE5', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xE5', 
		'\xD7', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xDB', '\x3', '\x2', '\x2', 
		'\x2', '\xE5', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xE6', '\x103', '\x3', 
		'\x2', '\x2', '\x2', '\xE7', '\xE8', '\f', '\a', '\x2', '\x2', '\xE8', 
		'\xE9', '\t', '\x2', '\x2', '\x2', '\xE9', '\xEA', '\x5', '\x1A', '\xE', 
		'\b', '\xEA', '\xEB', '\b', '\xE', '\x1', '\x2', '\xEB', '\x102', '\x3', 
		'\x2', '\x2', '\x2', '\xEC', '\xED', '\f', '\x6', '\x2', '\x2', '\xED', 
		'\xEE', '\t', '\x3', '\x2', '\x2', '\xEE', '\xEF', '\x5', '\x1A', '\xE', 
		'\a', '\xEF', '\xF0', '\b', '\xE', '\x1', '\x2', '\xF0', '\x102', '\x3', 
		'\x2', '\x2', '\x2', '\xF1', '\xF2', '\f', '\x4', '\x2', '\x2', '\xF2', 
		'\xF3', '\t', '\x4', '\x2', '\x2', '\xF3', '\xF4', '\x5', '\x1A', '\xE', 
		'\x5', '\xF4', '\xF5', '\b', '\xE', '\x1', '\x2', '\xF5', '\x102', '\x3', 
		'\x2', '\x2', '\x2', '\xF6', '\xF7', '\f', '\x3', '\x2', '\x2', '\xF7', 
		'\xF8', '\t', '\x5', '\x2', '\x2', '\xF8', '\xF9', '\x5', '\x1A', '\xE', 
		'\x4', '\xF9', '\xFA', '\b', '\xE', '\x1', '\x2', '\xFA', '\x102', '\x3', 
		'\x2', '\x2', '\x2', '\xFB', '\xFC', '\f', '\v', '\x2', '\x2', '\xFC', 
		'\xFD', '\a', '\x3', '\x2', '\x2', '\xFD', '\xFE', '\x5', '\x1A', '\xE', 
		'\x2', '\xFE', '\xFF', '\a', '\x4', '\x2', '\x2', '\xFF', '\x100', '\b', 
		'\xE', '\x1', '\x2', '\x100', '\x102', '\x3', '\x2', '\x2', '\x2', '\x101', 
		'\xE7', '\x3', '\x2', '\x2', '\x2', '\x101', '\xEC', '\x3', '\x2', '\x2', 
		'\x2', '\x101', '\xF1', '\x3', '\x2', '\x2', '\x2', '\x101', '\xF6', '\x3', 
		'\x2', '\x2', '\x2', '\x101', '\xFB', '\x3', '\x2', '\x2', '\x2', '\x102', 
		'\x105', '\x3', '\x2', '\x2', '\x2', '\x103', '\x101', '\x3', '\x2', '\x2', 
		'\x2', '\x103', '\x104', '\x3', '\x2', '\x2', '\x2', '\x104', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x105', '\x103', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '!', '\x36', ';', '\x44', '\\', '_', 'm', 'q', 'y', '\x81', '\x97', 
		'\xAB', '\xBB', '\xE5', '\x101', '\x103',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
